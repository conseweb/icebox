// Code generated by protoc-gen-go. DO NOT EDIT.
// source: icebox.proto

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	icebox.proto

It has these top-level messages:
	Header
	ReplyHeader
	HiRequest
	HiReply
	NegotiateRequest
	NegotiateReply
	StartRequest
	StartReply
	ConversationRequest
	ConversationReply
	EndRequest
	EndReply
	CheckRequest
	CheckReply
	InitRequest
	InitReply
	PingRequest
	PingReply
	AddFeatureRequest
	AddFeatureReply
	AddCoinRequest
	AddCoinReply
	CreateFormulaRequest
	CreateFormulaReply
	CreateAddressRequest
	CreateAddressReply
	CreateSecretRequest
	CreateSecretReply
	SignTxRequest
	SignTxReply
	ListCoinRequest
	ListCoinReply
	ListSecretRequest
	ListSecretReply
	ListFormulaRequest
	Formula
	ListFormulaReply
	RemoveCoinRequest
	RemoveCoinReply
	DeleteSecretRequest
	DeleteSecretReply
	DeleteFormulaRequest
	DeleteFormulaReply
	ResetRequest
	ResetReply
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
//import _ "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Header struct {
	Ver              *uint32 `protobuf:"varint,1,req,name=ver,def=1" json:"ver,omitempty"`
	Sn               *uint32 `protobuf:"varint,2,req,name=sn" json:"sn,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

const Default_Header_Ver uint32 = 1

func (m *Header) GetVer() uint32 {
	if m != nil && m.Ver != nil {
		return *m.Ver
	}
	return Default_Header_Ver
}

func (m *Header) GetSn() uint32 {
	if m != nil && m.Sn != nil {
		return *m.Sn
	}
	return 0
}

type ReplyHeader struct {
	Ver              *uint32 `protobuf:"varint,1,req,name=ver,def=1" json:"ver,omitempty"`
	Sn               *uint32 `protobuf:"varint,2,req,name=sn" json:"sn,omitempty"`
	Code             *uint32 `protobuf:"varint,3,req,name=code" json:"code,omitempty"`
	Message          *string `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ReplyHeader) Reset()                    { *m = ReplyHeader{} }
func (m *ReplyHeader) String() string            { return proto.CompactTextString(m) }
func (*ReplyHeader) ProtoMessage()               {}
func (*ReplyHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

const Default_ReplyHeader_Ver uint32 = 1

func (m *ReplyHeader) GetVer() uint32 {
	if m != nil && m.Ver != nil {
		return *m.Ver
	}
	return Default_ReplyHeader_Ver
}

func (m *ReplyHeader) GetSn() uint32 {
	if m != nil && m.Sn != nil {
		return *m.Sn
	}
	return 0
}

func (m *ReplyHeader) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *ReplyHeader) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

type HiRequest struct {
	Header           *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	MagicA           *int64  `protobuf:"varint,2,req,name=magicA" json:"magicA,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *HiRequest) Reset()                    { *m = HiRequest{} }
func (m *HiRequest) String() string            { return proto.CompactTextString(m) }
func (*HiRequest) ProtoMessage()               {}
func (*HiRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *HiRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *HiRequest) GetMagicA() int64 {
	if m != nil && m.MagicA != nil {
		return *m.MagicA
	}
	return 0
}

type HiReply struct {
	Header           *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	MagicB           *int64       `protobuf:"varint,2,req,name=magicB" json:"magicB,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *HiReply) Reset()                    { *m = HiReply{} }
func (m *HiReply) String() string            { return proto.CompactTextString(m) }
func (*HiReply) ProtoMessage()               {}
func (*HiReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *HiReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *HiReply) GetMagicB() int64 {
	if m != nil && m.MagicB != nil {
		return *m.MagicB
	}
	return 0
}

type NegotiateRequest struct {
	Header *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	// pubKeyA: client(requester)'s public key
	KeyA             *string `protobuf:"bytes,4,req,name=keyA" json:"keyA,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NegotiateRequest) Reset()                    { *m = NegotiateRequest{} }
func (m *NegotiateRequest) String() string            { return proto.CompactTextString(m) }
func (*NegotiateRequest) ProtoMessage()               {}
func (*NegotiateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NegotiateRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *NegotiateRequest) GetKeyA() string {
	if m != nil && m.KeyA != nil {
		return *m.KeyA
	}
	return ""
}

type NegotiateReply struct {
	Header           *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	KeyB             *string      `protobuf:"bytes,2,req,name=keyB" json:"keyB,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *NegotiateReply) Reset()                    { *m = NegotiateReply{} }
func (m *NegotiateReply) String() string            { return proto.CompactTextString(m) }
func (*NegotiateReply) ProtoMessage()               {}
func (*NegotiateReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *NegotiateReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *NegotiateReply) GetKeyB() string {
	if m != nil && m.KeyB != nil {
		return *m.KeyB
	}
	return ""
}

type StartRequest struct {
	Header *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	// session id
	SessionID *uint32 `protobuf:"varint,2,req,name=sessionID" json:"sessionID,omitempty"`
	// 会话有效时长，单位：秒
	Duration         *uint32 `protobuf:"varint,3,req,name=duration" json:"duration,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *StartRequest) Reset()                    { *m = StartRequest{} }
func (m *StartRequest) String() string            { return proto.CompactTextString(m) }
func (*StartRequest) ProtoMessage()               {}
func (*StartRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *StartRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *StartRequest) GetSessionID() uint32 {
	if m != nil && m.SessionID != nil {
		return *m.SessionID
	}
	return 0
}

func (m *StartRequest) GetDuration() uint32 {
	if m != nil && m.Duration != nil {
		return *m.Duration
	}
	return 0
}

type StartReply struct {
	Header           *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	SessionId        *uint32      `protobuf:"varint,2,req,name=session_id,json=sessionId" json:"session_id,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *StartReply) Reset()                    { *m = StartReply{} }
func (m *StartReply) String() string            { return proto.CompactTextString(m) }
func (*StartReply) ProtoMessage()               {}
func (*StartReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *StartReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *StartReply) GetSessionId() uint32 {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return 0
}

type ConversationRequest struct {
	Header *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	// session id
	SessionId *uint32 `protobuf:"varint,2,req,name=session_id,json=sessionId" json:"session_id,omitempty"`
	// message id
	MessageId *uint32 `protobuf:"varint,3,req,name=message_id,json=messageId" json:"message_id,omitempty"`
	// encrypted message
	Content *string `protobuf:"bytes,4,req,name=content" json:"content,omitempty"`
	// signatures
	Signature        *string `protobuf:"bytes,5,req,name=signature" json:"signature,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ConversationRequest) Reset()                    { *m = ConversationRequest{} }
func (m *ConversationRequest) String() string            { return proto.CompactTextString(m) }
func (*ConversationRequest) ProtoMessage()               {}
func (*ConversationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ConversationRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ConversationRequest) GetSessionId() uint32 {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return 0
}

func (m *ConversationRequest) GetMessageId() uint32 {
	if m != nil && m.MessageId != nil {
		return *m.MessageId
	}
	return 0
}

func (m *ConversationRequest) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *ConversationRequest) GetSignature() string {
	if m != nil && m.Signature != nil {
		return *m.Signature
	}
	return ""
}

type ConversationReply struct {
	Header *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	// session id
	SessionId *uint32 `protobuf:"varint,2,req,name=session_id,json=sessionId" json:"session_id,omitempty"`
	// message id
	MessageId *uint32 `protobuf:"varint,3,req,name=message_id,json=messageId" json:"message_id,omitempty"`
	// encrypted message
	Content *string `protobuf:"bytes,4,req,name=content" json:"content,omitempty"`
	// signatures
	Signature        *string `protobuf:"bytes,5,req,name=signature" json:"signature,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ConversationReply) Reset()                    { *m = ConversationReply{} }
func (m *ConversationReply) String() string            { return proto.CompactTextString(m) }
func (*ConversationReply) ProtoMessage()               {}
func (*ConversationReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ConversationReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ConversationReply) GetSessionId() uint32 {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return 0
}

func (m *ConversationReply) GetMessageId() uint32 {
	if m != nil && m.MessageId != nil {
		return *m.MessageId
	}
	return 0
}

func (m *ConversationReply) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *ConversationReply) GetSignature() string {
	if m != nil && m.Signature != nil {
		return *m.Signature
	}
	return ""
}

type EndRequest struct {
	Header           *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *EndRequest) Reset()                    { *m = EndRequest{} }
func (m *EndRequest) String() string            { return proto.CompactTextString(m) }
func (*EndRequest) ProtoMessage()               {}
func (*EndRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *EndRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type EndReply struct {
	Header           *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *EndReply) Reset()                    { *m = EndReply{} }
func (m *EndReply) String() string            { return proto.CompactTextString(m) }
func (*EndReply) ProtoMessage()               {}
func (*EndReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *EndReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type CheckRequest struct {
	Header           *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CheckRequest) Reset()                    { *m = CheckRequest{} }
func (m *CheckRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckRequest) ProtoMessage()               {}
func (*CheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CheckRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type CheckReply struct {
	Header *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	State  *int32       `protobuf:"varint,2,req,name=state" json:"state,omitempty"`
	// if paired then return dev_id=hash(id+app_id)
	DevId            *string `protobuf:"bytes,3,opt,name=dev_id,json=devId" json:"dev_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CheckReply) Reset()                    { *m = CheckReply{} }
func (m *CheckReply) String() string            { return proto.CompactTextString(m) }
func (*CheckReply) ProtoMessage()               {}
func (*CheckReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CheckReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CheckReply) GetState() int32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

func (m *CheckReply) GetDevId() string {
	if m != nil && m.DevId != nil {
		return *m.DevId
	}
	return ""
}

type InitRequest struct {
	Header           *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Password         *string `protobuf:"bytes,2,req,name=password" json:"password,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *InitRequest) Reset()                    { *m = InitRequest{} }
func (m *InitRequest) String() string            { return proto.CompactTextString(m) }
func (*InitRequest) ProtoMessage()               {}
func (*InitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *InitRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *InitRequest) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

type InitReply struct {
	Header           *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	DevId            *string      `protobuf:"bytes,2,req,name=dev_id,json=devId" json:"dev_id,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *InitReply) Reset()                    { *m = InitReply{} }
func (m *InitReply) String() string            { return proto.CompactTextString(m) }
func (*InitReply) ProtoMessage()               {}
func (*InitReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *InitReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *InitReply) GetDevId() string {
	if m != nil && m.DevId != nil {
		return *m.DevId
	}
	return ""
}

// The request message containing the user's name.
type PingRequest struct {
	Header           *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *PingRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

// The response message containing the greetings
type PingReply struct {
	Header           *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Timestamp        *int64       `protobuf:"varint,2,req,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *PingReply) Reset()                    { *m = PingReply{} }
func (m *PingReply) String() string            { return proto.CompactTextString(m) }
func (*PingReply) ProtoMessage()               {}
func (*PingReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *PingReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *PingReply) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type AddFeatureRequest struct {
	Header           *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Type             *uint32 `protobuf:"varint,2,req,name=type" json:"type,omitempty"`
	Idx              *uint32 `protobuf:"varint,3,req,name=idx" json:"idx,omitempty"`
	Symbol           *string `protobuf:"bytes,4,req,name=symbol" json:"symbol,omitempty"`
	Name             *string `protobuf:"bytes,5,req,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AddFeatureRequest) Reset()                    { *m = AddFeatureRequest{} }
func (m *AddFeatureRequest) String() string            { return proto.CompactTextString(m) }
func (*AddFeatureRequest) ProtoMessage()               {}
func (*AddFeatureRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *AddFeatureRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AddFeatureRequest) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *AddFeatureRequest) GetIdx() uint32 {
	if m != nil && m.Idx != nil {
		return *m.Idx
	}
	return 0
}

func (m *AddFeatureRequest) GetSymbol() string {
	if m != nil && m.Symbol != nil {
		return *m.Symbol
	}
	return ""
}

func (m *AddFeatureRequest) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type AddFeatureReply struct {
	Header           *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Path             *string      `protobuf:"bytes,2,req,name=path" json:"path,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *AddFeatureReply) Reset()                    { *m = AddFeatureReply{} }
func (m *AddFeatureReply) String() string            { return proto.CompactTextString(m) }
func (*AddFeatureReply) ProtoMessage()               {}
func (*AddFeatureReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *AddFeatureReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AddFeatureReply) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

// if coin_type have exists in cointable, then failed
type AddCoinRequest struct {
	Header           *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Type             *uint32 `protobuf:"varint,2,req,name=type" json:"type,omitempty"`
	Idx              *uint32 `protobuf:"varint,3,req,name=idx" json:"idx,omitempty"`
	Symbol           *string `protobuf:"bytes,4,req,name=symbol" json:"symbol,omitempty"`
	Name             *string `protobuf:"bytes,5,req,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AddCoinRequest) Reset()                    { *m = AddCoinRequest{} }
func (m *AddCoinRequest) String() string            { return proto.CompactTextString(m) }
func (*AddCoinRequest) ProtoMessage()               {}
func (*AddCoinRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *AddCoinRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AddCoinRequest) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *AddCoinRequest) GetIdx() uint32 {
	if m != nil && m.Idx != nil {
		return *m.Idx
	}
	return 0
}

func (m *AddCoinRequest) GetSymbol() string {
	if m != nil && m.Symbol != nil {
		return *m.Symbol
	}
	return ""
}

func (m *AddCoinRequest) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type AddCoinReply struct {
	Header           *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *AddCoinReply) Reset()                    { *m = AddCoinReply{} }
func (m *AddCoinReply) String() string            { return proto.CompactTextString(m) }
func (*AddCoinReply) ProtoMessage()               {}
func (*AddCoinReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *AddCoinReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type CreateFormulaRequest struct {
	Header *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Iscoin *uint32 `protobuf:"varint,2,req,name=iscoin,def=1" json:"iscoin,omitempty"`
	Type   *uint32 `protobuf:"varint,3,req,name=type" json:"type,omitempty"`
	Idx    *uint32 `protobuf:"varint,4,req,name=idx" json:"idx,omitempty"`
	// TODO: 该最大值未经验证
	Name             *string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CreateFormulaRequest) Reset()                    { *m = CreateFormulaRequest{} }
func (m *CreateFormulaRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateFormulaRequest) ProtoMessage()               {}
func (*CreateFormulaRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

const Default_CreateFormulaRequest_Iscoin uint32 = 1

func (m *CreateFormulaRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CreateFormulaRequest) GetIscoin() uint32 {
	if m != nil && m.Iscoin != nil {
		return *m.Iscoin
	}
	return Default_CreateFormulaRequest_Iscoin
}

func (m *CreateFormulaRequest) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CreateFormulaRequest) GetIdx() uint32 {
	if m != nil && m.Idx != nil {
		return *m.Idx
	}
	return 0
}

func (m *CreateFormulaRequest) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type CreateFormulaReply struct {
	Header *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	// TODO: 该最大值未经验证
	Result           *string `protobuf:"bytes,2,req,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CreateFormulaReply) Reset()                    { *m = CreateFormulaReply{} }
func (m *CreateFormulaReply) String() string            { return proto.CompactTextString(m) }
func (*CreateFormulaReply) ProtoMessage()               {}
func (*CreateFormulaReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *CreateFormulaReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CreateFormulaReply) GetResult() string {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return ""
}

type CreateAddressRequest struct {
	Header *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Type   *uint32 `protobuf:"varint,2,req,name=type" json:"type,omitempty"`
	Idx    *uint32 `protobuf:"varint,3,req,name=idx" json:"idx,omitempty"`
	// TODO: 密码需要加密,密钥应该使用会话id相关key
	Password *string `protobuf:"bytes,4,req,name=password" json:"password,omitempty"`
	// TODO: 该最大值未经验证
	Name             *string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CreateAddressRequest) Reset()                    { *m = CreateAddressRequest{} }
func (m *CreateAddressRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateAddressRequest) ProtoMessage()               {}
func (*CreateAddressRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *CreateAddressRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CreateAddressRequest) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CreateAddressRequest) GetIdx() uint32 {
	if m != nil && m.Idx != nil {
		return *m.Idx
	}
	return 0
}

func (m *CreateAddressRequest) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *CreateAddressRequest) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type CreateAddressReply struct {
	Header *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	// TODO: 该最大值未经验证
	Address          *string `protobuf:"bytes,2,req,name=address" json:"address,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CreateAddressReply) Reset()                    { *m = CreateAddressReply{} }
func (m *CreateAddressReply) String() string            { return proto.CompactTextString(m) }
func (*CreateAddressReply) ProtoMessage()               {}
func (*CreateAddressReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *CreateAddressReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CreateAddressReply) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

type CreateSecretRequest struct {
	Header *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Type   *uint32 `protobuf:"varint,2,req,name=type" json:"type,omitempty"`
	Idx    *uint32 `protobuf:"varint,3,req,name=idx" json:"idx,omitempty"`
	// TODO: 密码需要加密,密钥应该使用会话id相关key
	Password *string `protobuf:"bytes,4,req,name=password" json:"password,omitempty"`
	// TODO: 该最大值未经验证
	Name             *string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CreateSecretRequest) Reset()                    { *m = CreateSecretRequest{} }
func (m *CreateSecretRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateSecretRequest) ProtoMessage()               {}
func (*CreateSecretRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *CreateSecretRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CreateSecretRequest) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CreateSecretRequest) GetIdx() uint32 {
	if m != nil && m.Idx != nil {
		return *m.Idx
	}
	return 0
}

func (m *CreateSecretRequest) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *CreateSecretRequest) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type CreateSecretReply struct {
	Header *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	// TODO: 该最大值未经验证
	Address          *string `protobuf:"bytes,2,req,name=address" json:"address,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CreateSecretReply) Reset()                    { *m = CreateSecretReply{} }
func (m *CreateSecretReply) String() string            { return proto.CompactTextString(m) }
func (*CreateSecretReply) ProtoMessage()               {}
func (*CreateSecretReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *CreateSecretReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CreateSecretReply) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

type SignTxRequest struct {
	Header *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Type   *uint32 `protobuf:"varint,2,req,name=type" json:"type,omitempty"`
	Idx    *uint32 `protobuf:"varint,3,req,name=idx" json:"idx,omitempty"`
	Amount *uint64 `protobuf:"varint,4,req,name=amount" json:"amount,omitempty"`
	// TODO: 该最大值未经验证
	Dest *string `protobuf:"bytes,5,req,name=dest" json:"dest,omitempty"`
	// TODO: 该最大值未经验证
	Txid             *string `protobuf:"bytes,6,req,name=txid" json:"txid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SignTxRequest) Reset()                    { *m = SignTxRequest{} }
func (m *SignTxRequest) String() string            { return proto.CompactTextString(m) }
func (*SignTxRequest) ProtoMessage()               {}
func (*SignTxRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *SignTxRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SignTxRequest) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *SignTxRequest) GetIdx() uint32 {
	if m != nil && m.Idx != nil {
		return *m.Idx
	}
	return 0
}

func (m *SignTxRequest) GetAmount() uint64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *SignTxRequest) GetDest() string {
	if m != nil && m.Dest != nil {
		return *m.Dest
	}
	return ""
}

func (m *SignTxRequest) GetTxid() string {
	if m != nil && m.Txid != nil {
		return *m.Txid
	}
	return ""
}

type SignTxReply struct {
	Header *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	// TODO: 该最大值未经验证
	SignedTx         *string `protobuf:"bytes,2,req,name=signedTx" json:"signedTx,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SignTxReply) Reset()                    { *m = SignTxReply{} }
func (m *SignTxReply) String() string            { return proto.CompactTextString(m) }
func (*SignTxReply) ProtoMessage()               {}
func (*SignTxReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *SignTxReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SignTxReply) GetSignedTx() string {
	if m != nil && m.SignedTx != nil {
		return *m.SignedTx
	}
	return ""
}

// list all of wallets
type ListCoinRequest struct {
	Header           *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ListCoinRequest) Reset()                    { *m = ListCoinRequest{} }
func (m *ListCoinRequest) String() string            { return proto.CompactTextString(m) }
func (*ListCoinRequest) ProtoMessage()               {}
func (*ListCoinRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *ListCoinRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type ListCoinReply struct {
	Header           *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Max              *uint32      `protobuf:"varint,2,req,name=max" json:"max,omitempty"`
	Type             []uint32     `protobuf:"varint,3,rep,name=type" json:"type,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ListCoinReply) Reset()                    { *m = ListCoinReply{} }
func (m *ListCoinReply) String() string            { return proto.CompactTextString(m) }
func (*ListCoinReply) ProtoMessage()               {}
func (*ListCoinReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *ListCoinReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ListCoinReply) GetMax() uint32 {
	if m != nil && m.Max != nil {
		return *m.Max
	}
	return 0
}

func (m *ListCoinReply) GetType() []uint32 {
	if m != nil {
		return m.Type
	}
	return nil
}

type ListSecretRequest struct {
	Header           *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Iscoin           *uint32 `protobuf:"varint,2,req,name=iscoin,def=1" json:"iscoin,omitempty"`
	Type             *uint32 `protobuf:"varint,3,req,name=type" json:"type,omitempty"`
	Idx              *uint32 `protobuf:"varint,4,opt,name=idx" json:"idx,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ListSecretRequest) Reset()                    { *m = ListSecretRequest{} }
func (m *ListSecretRequest) String() string            { return proto.CompactTextString(m) }
func (*ListSecretRequest) ProtoMessage()               {}
func (*ListSecretRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

const Default_ListSecretRequest_Iscoin uint32 = 1

func (m *ListSecretRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ListSecretRequest) GetIscoin() uint32 {
	if m != nil && m.Iscoin != nil {
		return *m.Iscoin
	}
	return Default_ListSecretRequest_Iscoin
}

func (m *ListSecretRequest) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *ListSecretRequest) GetIdx() uint32 {
	if m != nil && m.Idx != nil {
		return *m.Idx
	}
	return 0
}

type ListSecretReply struct {
	Header           *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Max              *uint32      `protobuf:"varint,2,req,name=max" json:"max,omitempty"`
	Addr             []*Formula   `protobuf:"bytes,3,rep,name=addr" json:"addr,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ListSecretReply) Reset()                    { *m = ListSecretReply{} }
func (m *ListSecretReply) String() string            { return proto.CompactTextString(m) }
func (*ListSecretReply) ProtoMessage()               {}
func (*ListSecretReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *ListSecretReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ListSecretReply) GetMax() uint32 {
	if m != nil && m.Max != nil {
		return *m.Max
	}
	return 0
}

func (m *ListSecretReply) GetAddr() []*Formula {
	if m != nil {
		return m.Addr
	}
	return nil
}

type ListFormulaRequest struct {
	Header           *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Iscoin           *uint32 `protobuf:"varint,2,req,name=iscoin,def=1" json:"iscoin,omitempty"`
	Type             *uint32 `protobuf:"varint,3,req,name=type" json:"type,omitempty"`
	Idx              *uint32 `protobuf:"varint,4,opt,name=idx" json:"idx,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ListFormulaRequest) Reset()                    { *m = ListFormulaRequest{} }
func (m *ListFormulaRequest) String() string            { return proto.CompactTextString(m) }
func (*ListFormulaRequest) ProtoMessage()               {}
func (*ListFormulaRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

const Default_ListFormulaRequest_Iscoin uint32 = 1

func (m *ListFormulaRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ListFormulaRequest) GetIscoin() uint32 {
	if m != nil && m.Iscoin != nil {
		return *m.Iscoin
	}
	return Default_ListFormulaRequest_Iscoin
}

func (m *ListFormulaRequest) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *ListFormulaRequest) GetIdx() uint32 {
	if m != nil && m.Idx != nil {
		return *m.Idx
	}
	return 0
}

type Formula struct {
	Type *uint32 `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	Idx  *uint32 `protobuf:"varint,2,req,name=idx" json:"idx,omitempty"`
	// TODO: 该最大值未经验证
	SAddr            *string `protobuf:"bytes,3,req,name=s_addr,json=sAddr" json:"s_addr,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Formula) Reset()                    { *m = Formula{} }
func (m *Formula) String() string            { return proto.CompactTextString(m) }
func (*Formula) ProtoMessage()               {}
func (*Formula) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *Formula) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *Formula) GetIdx() uint32 {
	if m != nil && m.Idx != nil {
		return *m.Idx
	}
	return 0
}

func (m *Formula) GetSAddr() string {
	if m != nil && m.SAddr != nil {
		return *m.SAddr
	}
	return ""
}

type ListFormulaReply struct {
	Header           *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Max              *uint32      `protobuf:"varint,2,req,name=max" json:"max,omitempty"`
	Addr             []*Formula   `protobuf:"bytes,3,rep,name=addr" json:"addr,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ListFormulaReply) Reset()                    { *m = ListFormulaReply{} }
func (m *ListFormulaReply) String() string            { return proto.CompactTextString(m) }
func (*ListFormulaReply) ProtoMessage()               {}
func (*ListFormulaReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *ListFormulaReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ListFormulaReply) GetMax() uint32 {
	if m != nil && m.Max != nil {
		return *m.Max
	}
	return 0
}

func (m *ListFormulaReply) GetAddr() []*Formula {
	if m != nil {
		return m.Addr
	}
	return nil
}

type RemoveCoinRequest struct {
	Header           *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Type             *uint32 `protobuf:"varint,2,req,name=type" json:"type,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RemoveCoinRequest) Reset()                    { *m = RemoveCoinRequest{} }
func (m *RemoveCoinRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveCoinRequest) ProtoMessage()               {}
func (*RemoveCoinRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *RemoveCoinRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *RemoveCoinRequest) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

type RemoveCoinReply struct {
	Header           *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *RemoveCoinReply) Reset()                    { *m = RemoveCoinReply{} }
func (m *RemoveCoinReply) String() string            { return proto.CompactTextString(m) }
func (*RemoveCoinReply) ProtoMessage()               {}
func (*RemoveCoinReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *RemoveCoinReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type DeleteSecretRequest struct {
	Header           *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Type             *uint32 `protobuf:"varint,2,req,name=type" json:"type,omitempty"`
	Idx              *uint32 `protobuf:"varint,3,req,name=idx" json:"idx,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DeleteSecretRequest) Reset()                    { *m = DeleteSecretRequest{} }
func (m *DeleteSecretRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteSecretRequest) ProtoMessage()               {}
func (*DeleteSecretRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *DeleteSecretRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DeleteSecretRequest) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *DeleteSecretRequest) GetIdx() uint32 {
	if m != nil && m.Idx != nil {
		return *m.Idx
	}
	return 0
}

type DeleteSecretReply struct {
	Header           *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DeleteSecretReply) Reset()                    { *m = DeleteSecretReply{} }
func (m *DeleteSecretReply) String() string            { return proto.CompactTextString(m) }
func (*DeleteSecretReply) ProtoMessage()               {}
func (*DeleteSecretReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *DeleteSecretReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type DeleteFormulaRequest struct {
	Header           *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Type             *uint32 `protobuf:"varint,2,req,name=type" json:"type,omitempty"`
	Idx              *uint32 `protobuf:"varint,3,req,name=idx" json:"idx,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DeleteFormulaRequest) Reset()                    { *m = DeleteFormulaRequest{} }
func (m *DeleteFormulaRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteFormulaRequest) ProtoMessage()               {}
func (*DeleteFormulaRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *DeleteFormulaRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DeleteFormulaRequest) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *DeleteFormulaRequest) GetIdx() uint32 {
	if m != nil && m.Idx != nil {
		return *m.Idx
	}
	return 0
}

type DeleteFormulaReply struct {
	Header           *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DeleteFormulaReply) Reset()                    { *m = DeleteFormulaReply{} }
func (m *DeleteFormulaReply) String() string            { return proto.CompactTextString(m) }
func (*DeleteFormulaReply) ProtoMessage()               {}
func (*DeleteFormulaReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *DeleteFormulaReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type ResetRequest struct {
	Header           *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ResetRequest) Reset()                    { *m = ResetRequest{} }
func (m *ResetRequest) String() string            { return proto.CompactTextString(m) }
func (*ResetRequest) ProtoMessage()               {}
func (*ResetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *ResetRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type ResetReply struct {
	Header           *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ResetReply) Reset()                    { *m = ResetReply{} }
func (m *ResetReply) String() string            { return proto.CompactTextString(m) }
func (*ResetReply) ProtoMessage()               {}
func (*ResetReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *ResetReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func init() {
	proto.RegisterType((*Header)(nil), "Header")
	proto.RegisterType((*ReplyHeader)(nil), "ReplyHeader")
	proto.RegisterType((*HiRequest)(nil), "HiRequest")
	proto.RegisterType((*HiReply)(nil), "HiReply")
	proto.RegisterType((*NegotiateRequest)(nil), "NegotiateRequest")
	proto.RegisterType((*NegotiateReply)(nil), "NegotiateReply")
	proto.RegisterType((*StartRequest)(nil), "StartRequest")
	proto.RegisterType((*StartReply)(nil), "StartReply")
	proto.RegisterType((*ConversationRequest)(nil), "ConversationRequest")
	proto.RegisterType((*ConversationReply)(nil), "ConversationReply")
	proto.RegisterType((*EndRequest)(nil), "EndRequest")
	proto.RegisterType((*EndReply)(nil), "EndReply")
	proto.RegisterType((*CheckRequest)(nil), "CheckRequest")
	proto.RegisterType((*CheckReply)(nil), "CheckReply")
	proto.RegisterType((*InitRequest)(nil), "InitRequest")
	proto.RegisterType((*InitReply)(nil), "InitReply")
	proto.RegisterType((*PingRequest)(nil), "PingRequest")
	proto.RegisterType((*PingReply)(nil), "PingReply")
	proto.RegisterType((*AddFeatureRequest)(nil), "AddFeatureRequest")
	proto.RegisterType((*AddFeatureReply)(nil), "AddFeatureReply")
	proto.RegisterType((*AddCoinRequest)(nil), "AddCoinRequest")
	proto.RegisterType((*AddCoinReply)(nil), "AddCoinReply")
	proto.RegisterType((*CreateFormulaRequest)(nil), "CreateFormulaRequest")
	proto.RegisterType((*CreateFormulaReply)(nil), "CreateFormulaReply")
	proto.RegisterType((*CreateAddressRequest)(nil), "CreateAddressRequest")
	proto.RegisterType((*CreateAddressReply)(nil), "CreateAddressReply")
	proto.RegisterType((*CreateSecretRequest)(nil), "CreateSecretRequest")
	proto.RegisterType((*CreateSecretReply)(nil), "CreateSecretReply")
	proto.RegisterType((*SignTxRequest)(nil), "SignTxRequest")
	proto.RegisterType((*SignTxReply)(nil), "SignTxReply")
	proto.RegisterType((*ListCoinRequest)(nil), "ListCoinRequest")
	proto.RegisterType((*ListCoinReply)(nil), "ListCoinReply")
	proto.RegisterType((*ListSecretRequest)(nil), "ListSecretRequest")
	proto.RegisterType((*ListSecretReply)(nil), "ListSecretReply")
	proto.RegisterType((*ListFormulaRequest)(nil), "ListFormulaRequest")
	proto.RegisterType((*Formula)(nil), "Formula")
	proto.RegisterType((*ListFormulaReply)(nil), "ListFormulaReply")
	proto.RegisterType((*RemoveCoinRequest)(nil), "RemoveCoinRequest")
	proto.RegisterType((*RemoveCoinReply)(nil), "RemoveCoinReply")
	proto.RegisterType((*DeleteSecretRequest)(nil), "DeleteSecretRequest")
	proto.RegisterType((*DeleteSecretReply)(nil), "DeleteSecretReply")
	proto.RegisterType((*DeleteFormulaRequest)(nil), "DeleteFormulaRequest")
	proto.RegisterType((*DeleteFormulaReply)(nil), "DeleteFormulaReply")
	proto.RegisterType((*ResetRequest)(nil), "ResetRequest")
	proto.RegisterType((*ResetReply)(nil), "ResetReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Icebox service

type IceboxClient interface {
	Hello(ctx context.Context, in *HiRequest, opts ...grpc.CallOption) (*HiReply, error)
	// 协商会话密钥过程。会话过程采用AES进行加密，密钥使用协商出来的共享密钥的前32字节
	NegotiateKey(ctx context.Context, in *NegotiateRequest, opts ...grpc.CallOption) (*NegotiateReply, error)
	// 会话需要加密
	StartSession(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartReply, error)
	Conversation(ctx context.Context, opts ...grpc.CallOption) (Icebox_ConversationClient, error)
	// 结束当前会话后，立刻锁定设备；
	EndSession(ctx context.Context, in *EndRequest, opts ...grpc.CallOption) (*EndReply, error)
	// getdevice info, 判断是否已经进行了初始化, 如果没有则需要进行初始化操作
	// 如果已经进行了初始化，需要返回device_id
	CheckDevice(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckReply, error)
	// initailaize device: create a main private secret key
	// 1. init: ask user input pin from device
	// 2. pin ==> memoric words ==> seed
	// 3. generate secret key and encrypt it with pin
	InitDevice(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitReply, error)
	// Sends a greeting
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	AddCoin(ctx context.Context, in *AddCoinRequest, opts ...grpc.CallOption) (*AddCoinReply, error)
	CreateAddress(ctx context.Context, in *CreateAddressRequest, opts ...grpc.CallOption) (*CreateAddressReply, error)
	CreateSecret(ctx context.Context, in *CreateSecretRequest, opts ...grpc.CallOption) (*CreateSecretReply, error)
	ListCoin(ctx context.Context, in *ListCoinRequest, opts ...grpc.CallOption) (*ListCoinReply, error)
	ListSecret(ctx context.Context, in *ListSecretRequest, opts ...grpc.CallOption) (*ListSecretReply, error)
	ListFormula(ctx context.Context, in *ListFormulaRequest, opts ...grpc.CallOption) (*ListFormulaReply, error)
	SignTx(ctx context.Context, in *SignTxRequest, opts ...grpc.CallOption) (*SignTxReply, error)
	RemoveCoin(ctx context.Context, in *RemoveCoinRequest, opts ...grpc.CallOption) (*RemoveCoinReply, error)
	DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*DeleteSecretReply, error)
	DeleteFormula(ctx context.Context, in *DeleteFormulaRequest, opts ...grpc.CallOption) (*DeleteFormulaReply, error)
	// remove all datas
	ResetDevice(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetReply, error)
}

type iceboxClient struct {
	cc *grpc.ClientConn
}

func NewIceboxClient(cc *grpc.ClientConn) IceboxClient {
	return &iceboxClient{cc}
}

func (c *iceboxClient) Hello(ctx context.Context, in *HiRequest, opts ...grpc.CallOption) (*HiReply, error) {
	out := new(HiReply)
	err := grpc.Invoke(ctx, "/Icebox/Hello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iceboxClient) NegotiateKey(ctx context.Context, in *NegotiateRequest, opts ...grpc.CallOption) (*NegotiateReply, error) {
	out := new(NegotiateReply)
	err := grpc.Invoke(ctx, "/Icebox/NegotiateKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iceboxClient) StartSession(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartReply, error) {
	out := new(StartReply)
	err := grpc.Invoke(ctx, "/Icebox/StartSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iceboxClient) Conversation(ctx context.Context, opts ...grpc.CallOption) (Icebox_ConversationClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Icebox_serviceDesc.Streams[0], c.cc, "/Icebox/Conversation", opts...)
	if err != nil {
		return nil, err
	}
	x := &iceboxConversationClient{stream}
	return x, nil
}

type Icebox_ConversationClient interface {
	Send(*ConversationRequest) error
	Recv() (*ConversationReply, error)
	grpc.ClientStream
}

type iceboxConversationClient struct {
	grpc.ClientStream
}

func (x *iceboxConversationClient) Send(m *ConversationRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *iceboxConversationClient) Recv() (*ConversationReply, error) {
	m := new(ConversationReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *iceboxClient) EndSession(ctx context.Context, in *EndRequest, opts ...grpc.CallOption) (*EndReply, error) {
	out := new(EndReply)
	err := grpc.Invoke(ctx, "/Icebox/EndSession", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iceboxClient) CheckDevice(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckReply, error) {
	out := new(CheckReply)
	err := grpc.Invoke(ctx, "/Icebox/CheckDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iceboxClient) InitDevice(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitReply, error) {
	out := new(InitReply)
	err := grpc.Invoke(ctx, "/Icebox/InitDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iceboxClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := grpc.Invoke(ctx, "/Icebox/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iceboxClient) AddCoin(ctx context.Context, in *AddCoinRequest, opts ...grpc.CallOption) (*AddCoinReply, error) {
	out := new(AddCoinReply)
	err := grpc.Invoke(ctx, "/Icebox/AddCoin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iceboxClient) CreateAddress(ctx context.Context, in *CreateAddressRequest, opts ...grpc.CallOption) (*CreateAddressReply, error) {
	out := new(CreateAddressReply)
	err := grpc.Invoke(ctx, "/Icebox/CreateAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iceboxClient) CreateSecret(ctx context.Context, in *CreateSecretRequest, opts ...grpc.CallOption) (*CreateSecretReply, error) {
	out := new(CreateSecretReply)
	err := grpc.Invoke(ctx, "/Icebox/CreateSecret", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iceboxClient) ListCoin(ctx context.Context, in *ListCoinRequest, opts ...grpc.CallOption) (*ListCoinReply, error) {
	out := new(ListCoinReply)
	err := grpc.Invoke(ctx, "/Icebox/ListCoin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iceboxClient) ListSecret(ctx context.Context, in *ListSecretRequest, opts ...grpc.CallOption) (*ListSecretReply, error) {
	out := new(ListSecretReply)
	err := grpc.Invoke(ctx, "/Icebox/ListSecret", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iceboxClient) ListFormula(ctx context.Context, in *ListFormulaRequest, opts ...grpc.CallOption) (*ListFormulaReply, error) {
	out := new(ListFormulaReply)
	err := grpc.Invoke(ctx, "/Icebox/ListFormula", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iceboxClient) SignTx(ctx context.Context, in *SignTxRequest, opts ...grpc.CallOption) (*SignTxReply, error) {
	out := new(SignTxReply)
	err := grpc.Invoke(ctx, "/Icebox/SignTx", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iceboxClient) RemoveCoin(ctx context.Context, in *RemoveCoinRequest, opts ...grpc.CallOption) (*RemoveCoinReply, error) {
	out := new(RemoveCoinReply)
	err := grpc.Invoke(ctx, "/Icebox/RemoveCoin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iceboxClient) DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*DeleteSecretReply, error) {
	out := new(DeleteSecretReply)
	err := grpc.Invoke(ctx, "/Icebox/DeleteSecret", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iceboxClient) DeleteFormula(ctx context.Context, in *DeleteFormulaRequest, opts ...grpc.CallOption) (*DeleteFormulaReply, error) {
	out := new(DeleteFormulaReply)
	err := grpc.Invoke(ctx, "/Icebox/DeleteFormula", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iceboxClient) ResetDevice(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetReply, error) {
	out := new(ResetReply)
	err := grpc.Invoke(ctx, "/Icebox/ResetDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Icebox service

type IceboxServer interface {
	Hello(context.Context, *HiRequest) (*HiReply, error)
	// 协商会话密钥过程。会话过程采用AES进行加密，密钥使用协商出来的共享密钥的前32字节
	NegotiateKey(context.Context, *NegotiateRequest) (*NegotiateReply, error)
	// 会话需要加密
	StartSession(context.Context, *StartRequest) (*StartReply, error)
	Conversation(Icebox_ConversationServer) error
	// 结束当前会话后，立刻锁定设备；
	EndSession(context.Context, *EndRequest) (*EndReply, error)
	// getdevice info, 判断是否已经进行了初始化, 如果没有则需要进行初始化操作
	// 如果已经进行了初始化，需要返回device_id
	CheckDevice(context.Context, *CheckRequest) (*CheckReply, error)
	// initailaize device: create a main private secret key
	// 1. init: ask user input pin from device
	// 2. pin ==> memoric words ==> seed
	// 3. generate secret key and encrypt it with pin
	InitDevice(context.Context, *InitRequest) (*InitReply, error)
	// Sends a greeting
	Ping(context.Context, *PingRequest) (*PingReply, error)
	AddCoin(context.Context, *AddCoinRequest) (*AddCoinReply, error)
	CreateAddress(context.Context, *CreateAddressRequest) (*CreateAddressReply, error)
	CreateSecret(context.Context, *CreateSecretRequest) (*CreateSecretReply, error)
	ListCoin(context.Context, *ListCoinRequest) (*ListCoinReply, error)
	ListSecret(context.Context, *ListSecretRequest) (*ListSecretReply, error)
	ListFormula(context.Context, *ListFormulaRequest) (*ListFormulaReply, error)
	SignTx(context.Context, *SignTxRequest) (*SignTxReply, error)
	RemoveCoin(context.Context, *RemoveCoinRequest) (*RemoveCoinReply, error)
	DeleteSecret(context.Context, *DeleteSecretRequest) (*DeleteSecretReply, error)
	DeleteFormula(context.Context, *DeleteFormulaRequest) (*DeleteFormulaReply, error)
	// remove all datas
	ResetDevice(context.Context, *ResetRequest) (*ResetReply, error)
}

func RegisterIceboxServer(s *grpc.Server, srv IceboxServer) {
	s.RegisterService(&_Icebox_serviceDesc, srv)
}

func _Icebox_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceboxServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icebox/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceboxServer).Hello(ctx, req.(*HiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icebox_NegotiateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NegotiateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceboxServer).NegotiateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icebox/NegotiateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceboxServer).NegotiateKey(ctx, req.(*NegotiateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icebox_StartSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceboxServer).StartSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icebox/StartSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceboxServer).StartSession(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icebox_Conversation_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IceboxServer).Conversation(&iceboxConversationServer{stream})
}

type Icebox_ConversationServer interface {
	Send(*ConversationReply) error
	Recv() (*ConversationRequest, error)
	grpc.ServerStream
}

type iceboxConversationServer struct {
	grpc.ServerStream
}

func (x *iceboxConversationServer) Send(m *ConversationReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *iceboxConversationServer) Recv() (*ConversationRequest, error) {
	m := new(ConversationRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Icebox_EndSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceboxServer).EndSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icebox/EndSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceboxServer).EndSession(ctx, req.(*EndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icebox_CheckDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceboxServer).CheckDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icebox/CheckDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceboxServer).CheckDevice(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icebox_InitDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceboxServer).InitDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icebox/InitDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceboxServer).InitDevice(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icebox_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceboxServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icebox/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceboxServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icebox_AddCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceboxServer).AddCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icebox/AddCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceboxServer).AddCoin(ctx, req.(*AddCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icebox_CreateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceboxServer).CreateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icebox/CreateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceboxServer).CreateAddress(ctx, req.(*CreateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icebox_CreateSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceboxServer).CreateSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icebox/CreateSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceboxServer).CreateSecret(ctx, req.(*CreateSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icebox_ListCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceboxServer).ListCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icebox/ListCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceboxServer).ListCoin(ctx, req.(*ListCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icebox_ListSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceboxServer).ListSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icebox/ListSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceboxServer).ListSecret(ctx, req.(*ListSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icebox_ListFormula_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFormulaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceboxServer).ListFormula(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icebox/ListFormula",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceboxServer).ListFormula(ctx, req.(*ListFormulaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icebox_SignTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceboxServer).SignTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icebox/SignTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceboxServer).SignTx(ctx, req.(*SignTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icebox_RemoveCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceboxServer).RemoveCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icebox/RemoveCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceboxServer).RemoveCoin(ctx, req.(*RemoveCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icebox_DeleteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceboxServer).DeleteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icebox/DeleteSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceboxServer).DeleteSecret(ctx, req.(*DeleteSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icebox_DeleteFormula_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFormulaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceboxServer).DeleteFormula(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icebox/DeleteFormula",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceboxServer).DeleteFormula(ctx, req.(*DeleteFormulaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icebox_ResetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceboxServer).ResetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icebox/ResetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceboxServer).ResetDevice(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Icebox_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Icebox",
	HandlerType: (*IceboxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Icebox_Hello_Handler,
		},
		{
			MethodName: "NegotiateKey",
			Handler:    _Icebox_NegotiateKey_Handler,
		},
		{
			MethodName: "StartSession",
			Handler:    _Icebox_StartSession_Handler,
		},
		{
			MethodName: "EndSession",
			Handler:    _Icebox_EndSession_Handler,
		},
		{
			MethodName: "CheckDevice",
			Handler:    _Icebox_CheckDevice_Handler,
		},
		{
			MethodName: "InitDevice",
			Handler:    _Icebox_InitDevice_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Icebox_Ping_Handler,
		},
		{
			MethodName: "AddCoin",
			Handler:    _Icebox_AddCoin_Handler,
		},
		{
			MethodName: "CreateAddress",
			Handler:    _Icebox_CreateAddress_Handler,
		},
		{
			MethodName: "CreateSecret",
			Handler:    _Icebox_CreateSecret_Handler,
		},
		{
			MethodName: "ListCoin",
			Handler:    _Icebox_ListCoin_Handler,
		},
		{
			MethodName: "ListSecret",
			Handler:    _Icebox_ListSecret_Handler,
		},
		{
			MethodName: "ListFormula",
			Handler:    _Icebox_ListFormula_Handler,
		},
		{
			MethodName: "SignTx",
			Handler:    _Icebox_SignTx_Handler,
		},
		{
			MethodName: "RemoveCoin",
			Handler:    _Icebox_RemoveCoin_Handler,
		},
		{
			MethodName: "DeleteSecret",
			Handler:    _Icebox_DeleteSecret_Handler,
		},
		{
			MethodName: "DeleteFormula",
			Handler:    _Icebox_DeleteFormula_Handler,
		},
		{
			MethodName: "ResetDevice",
			Handler:    _Icebox_ResetDevice_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Conversation",
			Handler:       _Icebox_Conversation_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "icebox.proto",
}

func init() { proto.RegisterFile("icebox.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x58, 0xdd, 0x8f, 0xdb, 0x44,
	0x10, 0xb7, 0xf3, 0xe1, 0x24, 0x63, 0xe7, 0x2e, 0xd9, 0xbb, 0xa2, 0xd4, 0x2a, 0xea, 0xb1, 0x20,
	0x14, 0x09, 0xba, 0x94, 0x53, 0xa5, 0x8a, 0x4a, 0x50, 0xee, 0x83, 0xf6, 0x8e, 0x02, 0x05, 0x5f,
	0x25, 0x44, 0x01, 0x55, 0xbe, 0x78, 0x75, 0x67, 0x35, 0xb1, 0x83, 0xd7, 0x09, 0xc9, 0x1b, 0x12,
	0x12, 0x7f, 0x40, 0x79, 0x83, 0x57, 0x1e, 0x91, 0xf8, 0x13, 0xf8, 0xd7, 0xd0, 0x7e, 0xf8, 0x2b,
	0x3e, 0x55, 0x0e, 0xdc, 0x01, 0x6f, 0xbb, 0xe3, 0xec, 0xcc, 0xfc, 0x66, 0x67, 0x7f, 0x33, 0x13,
	0xb0, 0xfc, 0x11, 0x3d, 0x0d, 0x17, 0x64, 0x1a, 0x85, 0x71, 0x68, 0x5b, 0x81, 0x1b, 0x84, 0xd3,
	0x53, 0xb9, 0xc3, 0xb7, 0xc0, 0x38, 0xa2, 0xae, 0x47, 0x23, 0xb4, 0x05, 0xf5, 0x39, 0x8d, 0x06,
	0xfa, 0x4e, 0x6d, 0xd8, 0xbd, 0xa7, 0xbf, 0xeb, 0xf0, 0x1d, 0xda, 0x80, 0x1a, 0x0b, 0x06, 0x35,
	0x2e, 0x73, 0x6a, 0x2c, 0xc0, 0xe7, 0x60, 0x3a, 0x74, 0x3a, 0x5e, 0xae, 0x71, 0x06, 0x21, 0x68,
	0x8c, 0x42, 0x8f, 0x0e, 0xea, 0x42, 0x22, 0xd6, 0x68, 0x07, 0x5a, 0x13, 0xca, 0x98, 0x7b, 0x46,
	0x07, 0x8d, 0x1d, 0x7d, 0xd8, 0xd9, 0x37, 0x5e, 0xdc, 0xaf, 0xb7, 0x7f, 0xd0, 0x9d, 0x44, 0x8c,
	0x0f, 0xa1, 0x73, 0xe4, 0x3b, 0xf4, 0xbb, 0x19, 0x65, 0x31, 0xba, 0x09, 0xc6, 0xb9, 0xb0, 0x28,
	0x4c, 0x99, 0xbb, 0x2d, 0x22, 0x1d, 0x70, 0x94, 0x18, 0xbd, 0x02, 0xc6, 0xc4, 0x3d, 0xf3, 0x47,
	0x7b, 0xc2, 0x6e, 0xdd, 0x51, 0x3b, 0xfc, 0x10, 0x5a, 0x5c, 0xcb, 0x74, 0xbc, 0x44, 0x6f, 0xac,
	0xe8, 0xb0, 0x48, 0x0e, 0x49, 0x49, 0xd1, 0x7e, 0x41, 0xd1, 0x3e, 0x7e, 0x08, 0xbd, 0xcf, 0xe8,
	0x59, 0x18, 0xfb, 0x6e, 0x4c, 0x2b, 0x7b, 0x85, 0xa0, 0xf1, 0x9c, 0x2e, 0xf7, 0x06, 0x8d, 0x9d,
	0xda, 0xb0, 0xe3, 0x88, 0x35, 0xfe, 0x18, 0x36, 0x72, 0x8a, 0xaa, 0x3b, 0x26, 0x75, 0x49, 0xb7,
	0xa4, 0xae, 0x7d, 0xec, 0x83, 0x75, 0x12, 0xbb, 0x51, 0x5c, 0xd9, 0xa1, 0x1b, 0xd0, 0x61, 0x94,
	0x31, 0x3f, 0x0c, 0x8e, 0x0f, 0xd5, 0x0d, 0x65, 0x02, 0x64, 0x43, 0xdb, 0x9b, 0x45, 0x6e, 0xec,
	0x87, 0x81, 0xba, 0xac, 0x74, 0x8f, 0xbf, 0x00, 0x50, 0xa6, 0xaa, 0xbb, 0xfc, 0x2a, 0x80, 0x52,
	0xfe, 0xcc, 0xf7, 0x56, 0xcd, 0x79, 0xf8, 0x77, 0x1d, 0xb6, 0x0e, 0xc2, 0x60, 0x4e, 0x23, 0x26,
	0x6c, 0x54, 0x46, 0xf1, 0x72, 0xbd, 0xfc, 0xb3, 0x4a, 0x22, 0xfe, 0x59, 0x02, 0xe9, 0x28, 0xc9,
	0xb1, 0x87, 0x06, 0xd0, 0x1a, 0x85, 0x41, 0x4c, 0x83, 0x58, 0xdd, 0x4b, 0xb2, 0x15, 0xd1, 0xf1,
	0xcf, 0x02, 0x37, 0x9e, 0x45, 0x74, 0xd0, 0x14, 0xdf, 0x32, 0x01, 0xfe, 0x43, 0x87, 0x7e, 0xd1,
	0xdd, 0xcb, 0x8a, 0xc4, 0x55, 0x79, 0x7c, 0x0b, 0xe0, 0xa3, 0xc0, 0xab, 0x1a, 0x56, 0x7c, 0x1b,
	0xda, 0xe2, 0xe7, 0x95, 0x61, 0xe1, 0x77, 0xc0, 0x3a, 0x38, 0xa7, 0xa3, 0xe7, 0x95, 0x4d, 0x3c,
	0x03, 0x50, 0x07, 0xaa, 0xc7, 0x6e, 0x1b, 0x9a, 0x2c, 0x76, 0x63, 0x2a, 0xc2, 0xd6, 0x74, 0xe4,
	0x06, 0x5d, 0x03, 0xc3, 0xa3, 0x73, 0x19, 0x2e, 0x7d, 0xd8, 0x71, 0x9a, 0x1e, 0x9d, 0x1f, 0x7b,
	0xd8, 0x01, 0xf3, 0x38, 0xf0, 0xab, 0x3f, 0x08, 0x0c, 0xed, 0xa9, 0xcb, 0xd8, 0xf7, 0x61, 0x24,
	0xaf, 0x25, 0x23, 0xa2, 0x54, 0x8e, 0x1f, 0x43, 0x47, 0xea, 0xac, 0xee, 0xf3, 0x8d, 0xd4, 0x3b,
	0xa9, 0xb4, 0xf9, 0xe2, 0x7e, 0xad, 0xbd, 0x93, 0x38, 0x49, 0xc0, 0xfc, 0xdc, 0x0f, 0xce, 0x2a,
	0x47, 0xed, 0x31, 0x74, 0xe4, 0xef, 0xd7, 0x71, 0xa0, 0x13, 0xfb, 0x13, 0xca, 0x62, 0x77, 0x32,
	0x55, 0x4c, 0x96, 0x09, 0xf0, 0x4f, 0x3a, 0xf4, 0xf7, 0x3c, 0xef, 0x01, 0x15, 0x79, 0xb2, 0x0e,
	0x9d, 0xc5, 0xcb, 0x29, 0x55, 0xf9, 0x2b, 0xd6, 0xa8, 0x07, 0x75, 0xdf, 0x5b, 0xa8, 0x9c, 0xe5,
	0x4b, 0xce, 0xa0, 0x6c, 0x39, 0x39, 0x0d, 0xc7, 0x2a, 0x59, 0xd5, 0x8e, 0x9f, 0x0e, 0xdc, 0x49,
	0x92, 0xa6, 0x62, 0x8d, 0x1f, 0xc1, 0x66, 0xde, 0x8f, 0xb5, 0xd8, 0x70, 0xea, 0xc6, 0xe7, 0x09,
	0x1b, 0xf2, 0x35, 0xfe, 0x51, 0x87, 0x8d, 0x3d, 0xcf, 0x3b, 0x08, 0xfd, 0xe0, 0x3f, 0x84, 0x74,
	0x07, 0xac, 0xd4, 0x89, 0xea, 0x2f, 0xe9, 0x67, 0x1d, 0xb6, 0x0f, 0x22, 0xea, 0xc6, 0xf4, 0x41,
	0x18, 0x4d, 0x66, 0x63, 0xb7, 0x32, 0x82, 0xeb, 0x60, 0xf8, 0x6c, 0x14, 0xfa, 0xaa, 0xe2, 0xf2,
	0x2a, 0xac, 0x04, 0x29, 0xb8, 0x7a, 0x19, 0x5c, 0x23, 0x03, 0x77, 0x3d, 0x05, 0xa1, 0x67, 0x99,
	0x2a, 0xb1, 0x7c, 0x05, 0x68, 0xc5, 0xa9, 0x75, 0x28, 0xcf, 0x88, 0x28, 0x9b, 0x8d, 0xe3, 0xfc,
	0x13, 0xf8, 0xd0, 0x51, 0x42, 0xfc, 0x6b, 0x0a, 0x78, 0xcf, 0xf3, 0x22, 0xca, 0xd8, 0x25, 0x5f,
	0xd9, 0x6b, 0xb9, 0x87, 0xdd, 0xc8, 0x3b, 0x90, 0x8a, 0x5f, 0x06, 0xfc, 0xeb, 0x04, 0x78, 0xea,
	0x5c, 0x75, 0xe0, 0x37, 0xa1, 0xe5, 0xca, 0x53, 0x45, 0xe4, 0x89, 0x14, 0xff, 0xc2, 0xeb, 0x9e,
	0xd0, 0x7e, 0x42, 0x47, 0x11, 0x8d, 0xff, 0x57, 0xc8, 0x9f, 0x42, 0xbf, 0xe8, 0xdb, 0x25, 0x02,
	0xff, 0x4d, 0x87, 0xee, 0x89, 0x7f, 0x16, 0x3c, 0x59, 0x5c, 0xfe, 0xfb, 0x74, 0x27, 0xe1, 0x4c,
	0xd5, 0xc7, 0x86, 0xa3, 0x76, 0x1c, 0xa7, 0x47, 0x59, 0x2c, 0xdf, 0x67, 0xe2, 0x8e, 0x10, 0xf1,
	0x4f, 0xf1, 0xc2, 0xf7, 0x06, 0x46, 0xe1, 0x13, 0x17, 0xe1, 0x2f, 0xc1, 0x4c, 0xbc, 0xac, 0x0e,
	0x1e, 0x43, 0x9b, 0x17, 0x5e, 0xea, 0x3d, 0x59, 0x14, 0x0a, 0x49, 0xcd, 0x49, 0xe5, 0x78, 0x17,
	0x36, 0x3f, 0xf1, 0x59, 0xbc, 0x0e, 0x41, 0xe1, 0x53, 0xe8, 0x66, 0x67, 0xaa, 0xbb, 0xd3, 0x83,
	0xfa, 0xc4, 0x5d, 0xa8, 0xb0, 0xf1, 0xa5, 0x00, 0x2c, 0xc9, 0xa0, 0x3e, 0xec, 0x0a, 0xc0, 0xbd,
	0xb6, 0x0c, 0x28, 0x9e, 0x41, 0x9f, 0xdb, 0x58, 0x33, 0x1b, 0xff, 0x2e, 0xf1, 0xe8, 0xea, 0xd6,
	0x70, 0x20, 0xc3, 0xb1, 0x7e, 0xa2, 0x95, 0xc1, 0xbd, 0x0e, 0x0d, 0x9e, 0x64, 0x02, 0x9c, 0xb9,
	0xdb, 0x26, 0x8a, 0xaf, 0x52, 0x98, 0xfc, 0x23, 0x9e, 0x03, 0xe2, 0xf6, 0xfe, 0x2d, 0x82, 0x4d,
	0x71, 0x7e, 0x0a, 0x2d, 0x65, 0x33, 0x3d, 0xa0, 0x97, 0x0f, 0xd4, 0xb2, 0x74, 0xbe, 0x01, 0x06,
	0x7b, 0xa6, 0xf0, 0xe4, 0xb2, 0xb3, 0xc9, 0x38, 0x1b, 0xe1, 0x10, 0x7a, 0x05, 0x18, 0x57, 0x1e,
	0xb7, 0x23, 0xe8, 0x3b, 0x74, 0x12, 0xce, 0xe9, 0x3f, 0xad, 0xac, 0xf8, 0x2e, 0x6c, 0xe6, 0x35,
	0x55, 0x2f, 0x8f, 0xdf, 0xc0, 0xd6, 0x21, 0x1d, 0xd3, 0xab, 0x61, 0x4c, 0xfc, 0x1e, 0xf4, 0x8b,
	0xda, 0xab, 0x3b, 0xf6, 0x2d, 0x6c, 0xcb, 0xa3, 0xeb, 0x66, 0x55, 0x35, 0xcf, 0xee, 0x01, 0x5a,
	0x51, 0xbf, 0x56, 0x73, 0xee, 0x50, 0x56, 0x3d, 0x58, 0x78, 0x17, 0x40, 0x1d, 0xa8, 0x6c, 0x64,
	0xf7, 0xcf, 0x16, 0x18, 0xc7, 0xe2, 0xdf, 0x05, 0x74, 0x13, 0x9a, 0x47, 0x74, 0x3c, 0x0e, 0x11,
	0x90, 0x74, 0x70, 0xb7, 0xdb, 0x44, 0x8d, 0xdf, 0x58, 0x43, 0x77, 0xc0, 0x4a, 0x27, 0xdf, 0x47,
	0x74, 0x89, 0xfa, 0x64, 0x75, 0xa2, 0xb6, 0x37, 0x49, 0x71, 0x36, 0xc6, 0x1a, 0x7a, 0x5b, 0xcd,
	0xb8, 0x27, 0x72, 0x5a, 0x42, 0x5d, 0x92, 0x1f, 0x79, 0x6d, 0x93, 0x64, 0x63, 0x29, 0xd6, 0xd0,
	0x07, 0x60, 0xe5, 0x67, 0x34, 0xb4, 0x4d, 0x2e, 0x98, 0x30, 0x6d, 0x44, 0x4a, 0x83, 0x1c, 0xd6,
	0x86, 0xfa, 0x6d, 0x1d, 0xbd, 0x29, 0x46, 0xa6, 0xc4, 0x96, 0x49, 0xb2, 0xf9, 0xc9, 0xee, 0x90,
	0x64, 0x3a, 0xc2, 0x1a, 0x7a, 0x0b, 0x4c, 0x31, 0xc8, 0x1c, 0xd2, 0xb9, 0x3f, 0xa2, 0xa8, 0x4b,
	0xf2, 0x73, 0x90, 0x6d, 0x92, 0x6c, 0xca, 0xc1, 0x1a, 0x1a, 0x02, 0xf0, 0x01, 0x42, 0xfd, 0xd6,
	0x22, 0xb9, 0x09, 0xc5, 0x06, 0x92, 0xce, 0x16, 0x58, 0x43, 0x18, 0x1a, 0xbc, 0xd3, 0x47, 0x16,
	0xc9, 0x0d, 0x08, 0x36, 0x90, 0xb4, 0xfd, 0x17, 0xa6, 0x5b, 0xaa, 0xc1, 0x44, 0x9b, 0xa4, 0xd8,
	0xef, 0xda, 0x5d, 0x92, 0xef, 0x3d, 0xb1, 0x86, 0xde, 0x87, 0x6e, 0xa1, 0x91, 0x41, 0xd7, 0xc8,
	0x45, 0x5d, 0x97, 0xbd, 0x45, 0xca, 0xfd, 0x0e, 0xd6, 0xd0, 0x3d, 0xb0, 0xf2, 0xdd, 0x00, 0x0f,
	0x67, 0xb9, 0x71, 0xe1, 0xe1, 0x5c, 0x6d, 0x19, 0xb0, 0x86, 0x08, 0xb4, 0x93, 0xca, 0x85, 0x7a,
	0x64, 0xa5, 0xf0, 0xd9, 0x1b, 0xa4, 0x50, 0xd6, 0x44, 0x7a, 0x40, 0x56, 0x0e, 0x10, 0x22, 0xa5,
	0x92, 0x64, 0xf7, 0xc8, 0x4a, 0xbd, 0xc0, 0x1a, 0xba, 0x0b, 0x66, 0x8e, 0x0d, 0xd1, 0x16, 0x29,
	0x53, 0xbc, 0xdd, 0x27, 0xab, 0x84, 0x29, 0x2e, 0xc5, 0x90, 0x55, 0x1e, 0x6d, 0x90, 0x42, 0x53,
	0x62, 0x5b, 0x24, 0x57, 0xfe, 0xa5, 0x63, 0x19, 0x6b, 0x21, 0x44, 0x4a, 0x64, 0x68, 0xf7, 0xc8,
	0x0a, 0xad, 0xc9, 0xd0, 0xe5, 0x49, 0x05, 0x6d, 0x93, 0x0b, 0x18, 0xcc, 0x46, 0xa4, 0xc4, 0x3c,
	0xf2, 0xd6, 0x0a, 0xcf, 0x1e, 0x5d, 0x23, 0x17, 0xb1, 0x8c, 0xbd, 0x45, 0xca, 0xec, 0x20, 0x93,
	0x53, 0x3c, 0xe4, 0x34, 0x39, 0xf3, 0x3c, 0x60, 0x9b, 0x24, 0x7b, 0xe5, 0x58, 0xdb, 0x6f, 0x3f,
	0x35, 0xc4, 0x3f, 0x81, 0xec, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x43, 0x49, 0x9d, 0xac, 0x27,
	0x14, 0x00, 0x00,
}
