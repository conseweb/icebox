// Code generated by protoc-gen-go. DO NOT EDIT.
// source: icebox.proto

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	icebox.proto

It has these top-level messages:
	Header
	ReplyHeader
	CheckRequest
	CheckReply
	InitRequest
	InitReply
	HelloRequest
	HelloReply
	AddFeatureRequest
	AddFeatureReply
	AddCoinRequest
	AddCoinReply
	CreateFormulaRequest
	CreateFormulaReply
	CreateAddressRequest
	CreateAddressReply
	SignTxRequest
	SignTxReply
	ListFeatureRequest
	ListFeatureReply
	ListFormulaRequest
	Formula
	ListFormulaReply
	RemoveFeatureRequest
	RemoveFeatureReply
	DeleteFormulaRequest
	DeleteFormulaReply
	ResetRequest
	ResetReply
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "."

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Header struct {
	Ver              *uint32 `protobuf:"varint,1,req,name=ver,def=1" json:"ver,omitempty"`
	Sn               *uint32 `protobuf:"varint,2,req,name=sn" json:"sn,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

const Default_Header_Ver uint32 = 1

func (m *Header) GetVer() uint32 {
	if m != nil && m.Ver != nil {
		return *m.Ver
	}
	return Default_Header_Ver
}

func (m *Header) GetSn() uint32 {
	if m != nil && m.Sn != nil {
		return *m.Sn
	}
	return 0
}

type ReplyHeader struct {
	Ver              *uint32 `protobuf:"varint,1,req,name=ver,def=1" json:"ver,omitempty"`
	Sn               *uint32 `protobuf:"varint,2,req,name=sn" json:"sn,omitempty"`
	Code             *uint32 `protobuf:"varint,3,req,name=code" json:"code,omitempty"`
	Message          *string `protobuf:"bytes,4,opt,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ReplyHeader) Reset()                    { *m = ReplyHeader{} }
func (m *ReplyHeader) String() string            { return proto.CompactTextString(m) }
func (*ReplyHeader) ProtoMessage()               {}
func (*ReplyHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

const Default_ReplyHeader_Ver uint32 = 1

func (m *ReplyHeader) GetVer() uint32 {
	if m != nil && m.Ver != nil {
		return *m.Ver
	}
	return Default_ReplyHeader_Ver
}

func (m *ReplyHeader) GetSn() uint32 {
	if m != nil && m.Sn != nil {
		return *m.Sn
	}
	return 0
}

func (m *ReplyHeader) GetCode() uint32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func (m *ReplyHeader) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

type CheckRequest struct {
	Header           *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CheckRequest) Reset()                    { *m = CheckRequest{} }
func (m *CheckRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckRequest) ProtoMessage()               {}
func (*CheckRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CheckRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type CheckReply struct {
	Header *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	State  *int32       `protobuf:"varint,2,req,name=state" json:"state,omitempty"`
	// if paired then return dev_id=hash(id+app_id)
	DevId            *string `protobuf:"bytes,3,opt,name=dev_id,json=devId" json:"dev_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CheckReply) Reset()                    { *m = CheckReply{} }
func (m *CheckReply) String() string            { return proto.CompactTextString(m) }
func (*CheckReply) ProtoMessage()               {}
func (*CheckReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CheckReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CheckReply) GetState() int32 {
	if m != nil && m.State != nil {
		return *m.State
	}
	return 0
}

func (m *CheckReply) GetDevId() string {
	if m != nil && m.DevId != nil {
		return *m.DevId
	}
	return ""
}

type InitRequest struct {
	Header           *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Password         *string `protobuf:"bytes,2,req,name=password" json:"password,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *InitRequest) Reset()                    { *m = InitRequest{} }
func (m *InitRequest) String() string            { return proto.CompactTextString(m) }
func (*InitRequest) ProtoMessage()               {}
func (*InitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *InitRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *InitRequest) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

type InitReply struct {
	Header           *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	DevId            *string      `protobuf:"bytes,2,req,name=dev_id,json=devId" json:"dev_id,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *InitReply) Reset()                    { *m = InitReply{} }
func (m *InitReply) String() string            { return proto.CompactTextString(m) }
func (*InitReply) ProtoMessage()               {}
func (*InitReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *InitReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *InitReply) GetDevId() string {
	if m != nil && m.DevId != nil {
		return *m.DevId
	}
	return ""
}

// The request message containing the user's name.
type HelloRequest struct {
	Header           *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *HelloRequest) Reset()                    { *m = HelloRequest{} }
func (m *HelloRequest) String() string            { return proto.CompactTextString(m) }
func (*HelloRequest) ProtoMessage()               {}
func (*HelloRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *HelloRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

// The response message containing the greetings
type HelloReply struct {
	Header           *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Timestamp        *int64       `protobuf:"varint,2,req,name=timestamp" json:"timestamp,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *HelloReply) Reset()                    { *m = HelloReply{} }
func (m *HelloReply) String() string            { return proto.CompactTextString(m) }
func (*HelloReply) ProtoMessage()               {}
func (*HelloReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *HelloReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *HelloReply) GetTimestamp() int64 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

type AddFeatureRequest struct {
	Header           *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Type             *uint32 `protobuf:"varint,2,req,name=type" json:"type,omitempty"`
	Idx              *uint32 `protobuf:"varint,3,req,name=idx" json:"idx,omitempty"`
	Symbol           *string `protobuf:"bytes,4,req,name=symbol" json:"symbol,omitempty"`
	Name             *string `protobuf:"bytes,5,req,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AddFeatureRequest) Reset()                    { *m = AddFeatureRequest{} }
func (m *AddFeatureRequest) String() string            { return proto.CompactTextString(m) }
func (*AddFeatureRequest) ProtoMessage()               {}
func (*AddFeatureRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *AddFeatureRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AddFeatureRequest) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *AddFeatureRequest) GetIdx() uint32 {
	if m != nil && m.Idx != nil {
		return *m.Idx
	}
	return 0
}

func (m *AddFeatureRequest) GetSymbol() string {
	if m != nil && m.Symbol != nil {
		return *m.Symbol
	}
	return ""
}

func (m *AddFeatureRequest) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type AddFeatureReply struct {
	Header           *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Path             *string      `protobuf:"bytes,2,req,name=path" json:"path,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *AddFeatureReply) Reset()                    { *m = AddFeatureReply{} }
func (m *AddFeatureReply) String() string            { return proto.CompactTextString(m) }
func (*AddFeatureReply) ProtoMessage()               {}
func (*AddFeatureReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *AddFeatureReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AddFeatureReply) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

// if coin_type have exists in cointable, then failed
type AddCoinRequest struct {
	Header           *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Type             *uint32 `protobuf:"varint,2,req,name=type" json:"type,omitempty"`
	Idx              *uint32 `protobuf:"varint,3,req,name=idx" json:"idx,omitempty"`
	Symbol           *string `protobuf:"bytes,4,req,name=symbol" json:"symbol,omitempty"`
	Name             *string `protobuf:"bytes,5,req,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *AddCoinRequest) Reset()                    { *m = AddCoinRequest{} }
func (m *AddCoinRequest) String() string            { return proto.CompactTextString(m) }
func (*AddCoinRequest) ProtoMessage()               {}
func (*AddCoinRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *AddCoinRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *AddCoinRequest) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *AddCoinRequest) GetIdx() uint32 {
	if m != nil && m.Idx != nil {
		return *m.Idx
	}
	return 0
}

func (m *AddCoinRequest) GetSymbol() string {
	if m != nil && m.Symbol != nil {
		return *m.Symbol
	}
	return ""
}

func (m *AddCoinRequest) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type AddCoinReply struct {
	Header           *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *AddCoinReply) Reset()                    { *m = AddCoinReply{} }
func (m *AddCoinReply) String() string            { return proto.CompactTextString(m) }
func (*AddCoinReply) ProtoMessage()               {}
func (*AddCoinReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *AddCoinReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type CreateFormulaRequest struct {
	Header *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Iscoin *uint32 `protobuf:"varint,2,req,name=iscoin,def=1" json:"iscoin,omitempty"`
	Type   *uint32 `protobuf:"varint,3,req,name=type" json:"type,omitempty"`
	Idx    *uint32 `protobuf:"varint,4,req,name=idx" json:"idx,omitempty"`
	// TODO: 该最大值未经验证
	Name             *string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CreateFormulaRequest) Reset()                    { *m = CreateFormulaRequest{} }
func (m *CreateFormulaRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateFormulaRequest) ProtoMessage()               {}
func (*CreateFormulaRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

const Default_CreateFormulaRequest_Iscoin uint32 = 1

func (m *CreateFormulaRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CreateFormulaRequest) GetIscoin() uint32 {
	if m != nil && m.Iscoin != nil {
		return *m.Iscoin
	}
	return Default_CreateFormulaRequest_Iscoin
}

func (m *CreateFormulaRequest) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CreateFormulaRequest) GetIdx() uint32 {
	if m != nil && m.Idx != nil {
		return *m.Idx
	}
	return 0
}

func (m *CreateFormulaRequest) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type CreateFormulaReply struct {
	Header *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	// TODO: 该最大值未经验证
	Result           *string `protobuf:"bytes,2,req,name=result" json:"result,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CreateFormulaReply) Reset()                    { *m = CreateFormulaReply{} }
func (m *CreateFormulaReply) String() string            { return proto.CompactTextString(m) }
func (*CreateFormulaReply) ProtoMessage()               {}
func (*CreateFormulaReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CreateFormulaReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CreateFormulaReply) GetResult() string {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return ""
}

type CreateAddressRequest struct {
	Header *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Type   *uint32 `protobuf:"varint,2,req,name=type" json:"type,omitempty"`
	Idx    *uint32 `protobuf:"varint,3,req,name=idx" json:"idx,omitempty"`
	// TODO: 密码需要加密,密钥应该使用会话id相关key
	Password *string `protobuf:"bytes,4,req,name=password" json:"password,omitempty"`
	// TODO: 该最大值未经验证
	Name             *string `protobuf:"bytes,5,opt,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CreateAddressRequest) Reset()                    { *m = CreateAddressRequest{} }
func (m *CreateAddressRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateAddressRequest) ProtoMessage()               {}
func (*CreateAddressRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CreateAddressRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CreateAddressRequest) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *CreateAddressRequest) GetIdx() uint32 {
	if m != nil && m.Idx != nil {
		return *m.Idx
	}
	return 0
}

func (m *CreateAddressRequest) GetPassword() string {
	if m != nil && m.Password != nil {
		return *m.Password
	}
	return ""
}

func (m *CreateAddressRequest) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

type CreateAddressReply struct {
	Header *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	// TODO: 该最大值未经验证
	Address          *string `protobuf:"bytes,2,req,name=address" json:"address,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CreateAddressReply) Reset()                    { *m = CreateAddressReply{} }
func (m *CreateAddressReply) String() string            { return proto.CompactTextString(m) }
func (*CreateAddressReply) ProtoMessage()               {}
func (*CreateAddressReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *CreateAddressReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *CreateAddressReply) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

type SignTxRequest struct {
	Header *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Type   *uint32 `protobuf:"varint,2,req,name=type" json:"type,omitempty"`
	Idx    *uint32 `protobuf:"varint,3,req,name=idx" json:"idx,omitempty"`
	Amount *uint64 `protobuf:"varint,4,req,name=amount" json:"amount,omitempty"`
	// TODO: 该最大值未经验证
	Dest *string `protobuf:"bytes,5,req,name=dest" json:"dest,omitempty"`
	// TODO: 该最大值未经验证
	Txid             *string `protobuf:"bytes,6,req,name=txid" json:"txid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SignTxRequest) Reset()                    { *m = SignTxRequest{} }
func (m *SignTxRequest) String() string            { return proto.CompactTextString(m) }
func (*SignTxRequest) ProtoMessage()               {}
func (*SignTxRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *SignTxRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SignTxRequest) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *SignTxRequest) GetIdx() uint32 {
	if m != nil && m.Idx != nil {
		return *m.Idx
	}
	return 0
}

func (m *SignTxRequest) GetAmount() uint64 {
	if m != nil && m.Amount != nil {
		return *m.Amount
	}
	return 0
}

func (m *SignTxRequest) GetDest() string {
	if m != nil && m.Dest != nil {
		return *m.Dest
	}
	return ""
}

func (m *SignTxRequest) GetTxid() string {
	if m != nil && m.Txid != nil {
		return *m.Txid
	}
	return ""
}

type SignTxReply struct {
	Header *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	// TODO: 该最大值未经验证
	SignedTx         *string `protobuf:"bytes,2,req,name=signedTx" json:"signedTx,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *SignTxReply) Reset()                    { *m = SignTxReply{} }
func (m *SignTxReply) String() string            { return proto.CompactTextString(m) }
func (*SignTxReply) ProtoMessage()               {}
func (*SignTxReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *SignTxReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *SignTxReply) GetSignedTx() string {
	if m != nil && m.SignedTx != nil {
		return *m.SignedTx
	}
	return ""
}

// list all of wallets
type ListFeatureRequest struct {
	Header           *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ListFeatureRequest) Reset()                    { *m = ListFeatureRequest{} }
func (m *ListFeatureRequest) String() string            { return proto.CompactTextString(m) }
func (*ListFeatureRequest) ProtoMessage()               {}
func (*ListFeatureRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ListFeatureRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type ListFeatureReply struct {
	Header           *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Max              *uint32      `protobuf:"varint,2,req,name=max" json:"max,omitempty"`
	Type             []uint32     `protobuf:"varint,3,rep,name=type" json:"type,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ListFeatureReply) Reset()                    { *m = ListFeatureReply{} }
func (m *ListFeatureReply) String() string            { return proto.CompactTextString(m) }
func (*ListFeatureReply) ProtoMessage()               {}
func (*ListFeatureReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ListFeatureReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ListFeatureReply) GetMax() uint32 {
	if m != nil && m.Max != nil {
		return *m.Max
	}
	return 0
}

func (m *ListFeatureReply) GetType() []uint32 {
	if m != nil {
		return m.Type
	}
	return nil
}

type ListFormulaRequest struct {
	Header           *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Iscoin           *uint32 `protobuf:"varint,2,req,name=iscoin,def=1" json:"iscoin,omitempty"`
	Type             *uint32 `protobuf:"varint,3,req,name=type" json:"type,omitempty"`
	Idx              *uint32 `protobuf:"varint,4,opt,name=idx" json:"idx,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ListFormulaRequest) Reset()                    { *m = ListFormulaRequest{} }
func (m *ListFormulaRequest) String() string            { return proto.CompactTextString(m) }
func (*ListFormulaRequest) ProtoMessage()               {}
func (*ListFormulaRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

const Default_ListFormulaRequest_Iscoin uint32 = 1

func (m *ListFormulaRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ListFormulaRequest) GetIscoin() uint32 {
	if m != nil && m.Iscoin != nil {
		return *m.Iscoin
	}
	return Default_ListFormulaRequest_Iscoin
}

func (m *ListFormulaRequest) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *ListFormulaRequest) GetIdx() uint32 {
	if m != nil && m.Idx != nil {
		return *m.Idx
	}
	return 0
}

type Formula struct {
	Type *uint32 `protobuf:"varint,1,req,name=type" json:"type,omitempty"`
	Idx  *uint32 `protobuf:"varint,2,req,name=idx" json:"idx,omitempty"`
	// TODO: 该最大值未经验证
	SAddr            *string `protobuf:"bytes,3,req,name=s_addr,json=sAddr" json:"s_addr,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Formula) Reset()                    { *m = Formula{} }
func (m *Formula) String() string            { return proto.CompactTextString(m) }
func (*Formula) ProtoMessage()               {}
func (*Formula) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Formula) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *Formula) GetIdx() uint32 {
	if m != nil && m.Idx != nil {
		return *m.Idx
	}
	return 0
}

func (m *Formula) GetSAddr() string {
	if m != nil && m.SAddr != nil {
		return *m.SAddr
	}
	return ""
}

type ListFormulaReply struct {
	Header           *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Max              *uint32      `protobuf:"varint,2,req,name=max" json:"max,omitempty"`
	Addr             []*Formula   `protobuf:"bytes,3,rep,name=addr" json:"addr,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ListFormulaReply) Reset()                    { *m = ListFormulaReply{} }
func (m *ListFormulaReply) String() string            { return proto.CompactTextString(m) }
func (*ListFormulaReply) ProtoMessage()               {}
func (*ListFormulaReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ListFormulaReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ListFormulaReply) GetMax() uint32 {
	if m != nil && m.Max != nil {
		return *m.Max
	}
	return 0
}

func (m *ListFormulaReply) GetAddr() []*Formula {
	if m != nil {
		return m.Addr
	}
	return nil
}

type RemoveFeatureRequest struct {
	Header           *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Type             *uint32 `protobuf:"varint,2,req,name=type" json:"type,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RemoveFeatureRequest) Reset()                    { *m = RemoveFeatureRequest{} }
func (m *RemoveFeatureRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveFeatureRequest) ProtoMessage()               {}
func (*RemoveFeatureRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *RemoveFeatureRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *RemoveFeatureRequest) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

type RemoveFeatureReply struct {
	Header           *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *RemoveFeatureReply) Reset()                    { *m = RemoveFeatureReply{} }
func (m *RemoveFeatureReply) String() string            { return proto.CompactTextString(m) }
func (*RemoveFeatureReply) ProtoMessage()               {}
func (*RemoveFeatureReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *RemoveFeatureReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type DeleteFormulaRequest struct {
	Header           *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	Type             *uint32 `protobuf:"varint,2,req,name=type" json:"type,omitempty"`
	Idx              *uint32 `protobuf:"varint,3,req,name=idx" json:"idx,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *DeleteFormulaRequest) Reset()                    { *m = DeleteFormulaRequest{} }
func (m *DeleteFormulaRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteFormulaRequest) ProtoMessage()               {}
func (*DeleteFormulaRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *DeleteFormulaRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DeleteFormulaRequest) GetType() uint32 {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return 0
}

func (m *DeleteFormulaRequest) GetIdx() uint32 {
	if m != nil && m.Idx != nil {
		return *m.Idx
	}
	return 0
}

type DeleteFormulaReply struct {
	Header           *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *DeleteFormulaReply) Reset()                    { *m = DeleteFormulaReply{} }
func (m *DeleteFormulaReply) String() string            { return proto.CompactTextString(m) }
func (*DeleteFormulaReply) ProtoMessage()               {}
func (*DeleteFormulaReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *DeleteFormulaReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

type ResetRequest struct {
	Header           *Header `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ResetRequest) Reset()                    { *m = ResetRequest{} }
func (m *ResetRequest) String() string            { return proto.CompactTextString(m) }
func (*ResetRequest) ProtoMessage()               {}
func (*ResetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ResetRequest) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

type ResetReply struct {
	Header           *ReplyHeader `protobuf:"bytes,1,req,name=header" json:"header,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *ResetReply) Reset()                    { *m = ResetReply{} }
func (m *ResetReply) String() string            { return proto.CompactTextString(m) }
func (*ResetReply) ProtoMessage()               {}
func (*ResetReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *ResetReply) GetHeader() *ReplyHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func init() {
	proto.RegisterType((*Header)(nil), "Header")
	proto.RegisterType((*ReplyHeader)(nil), "ReplyHeader")
	proto.RegisterType((*CheckRequest)(nil), "CheckRequest")
	proto.RegisterType((*CheckReply)(nil), "CheckReply")
	proto.RegisterType((*InitRequest)(nil), "InitRequest")
	proto.RegisterType((*InitReply)(nil), "InitReply")
	proto.RegisterType((*HelloRequest)(nil), "HelloRequest")
	proto.RegisterType((*HelloReply)(nil), "HelloReply")
	proto.RegisterType((*AddFeatureRequest)(nil), "AddFeatureRequest")
	proto.RegisterType((*AddFeatureReply)(nil), "AddFeatureReply")
	proto.RegisterType((*AddCoinRequest)(nil), "AddCoinRequest")
	proto.RegisterType((*AddCoinReply)(nil), "AddCoinReply")
	proto.RegisterType((*CreateFormulaRequest)(nil), "CreateFormulaRequest")
	proto.RegisterType((*CreateFormulaReply)(nil), "CreateFormulaReply")
	proto.RegisterType((*CreateAddressRequest)(nil), "CreateAddressRequest")
	proto.RegisterType((*CreateAddressReply)(nil), "CreateAddressReply")
	proto.RegisterType((*SignTxRequest)(nil), "SignTxRequest")
	proto.RegisterType((*SignTxReply)(nil), "SignTxReply")
	proto.RegisterType((*ListFeatureRequest)(nil), "ListFeatureRequest")
	proto.RegisterType((*ListFeatureReply)(nil), "ListFeatureReply")
	proto.RegisterType((*ListFormulaRequest)(nil), "ListFormulaRequest")
	proto.RegisterType((*Formula)(nil), "Formula")
	proto.RegisterType((*ListFormulaReply)(nil), "ListFormulaReply")
	proto.RegisterType((*RemoveFeatureRequest)(nil), "RemoveFeatureRequest")
	proto.RegisterType((*RemoveFeatureReply)(nil), "RemoveFeatureReply")
	proto.RegisterType((*DeleteFormulaRequest)(nil), "DeleteFormulaRequest")
	proto.RegisterType((*DeleteFormulaReply)(nil), "DeleteFormulaReply")
	proto.RegisterType((*ResetRequest)(nil), "ResetRequest")
	proto.RegisterType((*ResetReply)(nil), "ResetReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Icebox service

type IceboxClient interface {
	// getdevice info, 判断是否是特定设备，是否已经进行了初始化, 如果没有则需要进行初始化操作
	// 如果已经进行了初始化，是否需要检测数据的合法性？
	CheckDevice(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckReply, error)
	// initailaize device: create a main private secret key
	// 1. init(pin)   pin as parameter
	// 2. pin ==> memoric words ==> seed
	// 3. generate secret key and encrypt it with pin
	InitDevice(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitReply, error)
	// Sends a greeting
	HandShake(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	AddCoin(ctx context.Context, in *AddCoinRequest, opts ...grpc.CallOption) (*AddCoinReply, error)
	CreateAddress(ctx context.Context, in *CreateAddressRequest, opts ...grpc.CallOption) (*CreateAddressReply, error)
	ListFeature(ctx context.Context, in *ListFeatureRequest, opts ...grpc.CallOption) (*ListFeatureReply, error)
	ListFormula(ctx context.Context, in *ListFormulaRequest, opts ...grpc.CallOption) (*ListFormulaReply, error)
	SignTx(ctx context.Context, in *SignTxRequest, opts ...grpc.CallOption) (*SignTxReply, error)
	RemoveFeature(ctx context.Context, in *RemoveFeatureRequest, opts ...grpc.CallOption) (*RemoveFeatureReply, error)
	DeleteFormula(ctx context.Context, in *DeleteFormulaRequest, opts ...grpc.CallOption) (*DeleteFormulaReply, error)
	// remove all datas
	ResetDevice(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetReply, error)
}

type iceboxClient struct {
	cc *grpc.ClientConn
}

func NewIceboxClient(cc *grpc.ClientConn) IceboxClient {
	return &iceboxClient{cc}
}

func (c *iceboxClient) CheckDevice(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckReply, error) {
	out := new(CheckReply)
	err := grpc.Invoke(ctx, "/Icebox/CheckDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iceboxClient) InitDevice(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitReply, error) {
	out := new(InitReply)
	err := grpc.Invoke(ctx, "/Icebox/InitDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iceboxClient) HandShake(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := grpc.Invoke(ctx, "/Icebox/HandShake", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iceboxClient) AddCoin(ctx context.Context, in *AddCoinRequest, opts ...grpc.CallOption) (*AddCoinReply, error) {
	out := new(AddCoinReply)
	err := grpc.Invoke(ctx, "/Icebox/AddCoin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iceboxClient) CreateAddress(ctx context.Context, in *CreateAddressRequest, opts ...grpc.CallOption) (*CreateAddressReply, error) {
	out := new(CreateAddressReply)
	err := grpc.Invoke(ctx, "/Icebox/CreateAddress", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iceboxClient) ListFeature(ctx context.Context, in *ListFeatureRequest, opts ...grpc.CallOption) (*ListFeatureReply, error) {
	out := new(ListFeatureReply)
	err := grpc.Invoke(ctx, "/Icebox/ListFeature", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iceboxClient) ListFormula(ctx context.Context, in *ListFormulaRequest, opts ...grpc.CallOption) (*ListFormulaReply, error) {
	out := new(ListFormulaReply)
	err := grpc.Invoke(ctx, "/Icebox/ListFormula", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iceboxClient) SignTx(ctx context.Context, in *SignTxRequest, opts ...grpc.CallOption) (*SignTxReply, error) {
	out := new(SignTxReply)
	err := grpc.Invoke(ctx, "/Icebox/SignTx", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iceboxClient) RemoveFeature(ctx context.Context, in *RemoveFeatureRequest, opts ...grpc.CallOption) (*RemoveFeatureReply, error) {
	out := new(RemoveFeatureReply)
	err := grpc.Invoke(ctx, "/Icebox/RemoveFeature", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iceboxClient) DeleteFormula(ctx context.Context, in *DeleteFormulaRequest, opts ...grpc.CallOption) (*DeleteFormulaReply, error) {
	out := new(DeleteFormulaReply)
	err := grpc.Invoke(ctx, "/Icebox/DeleteFormula", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iceboxClient) ResetDevice(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetReply, error) {
	out := new(ResetReply)
	err := grpc.Invoke(ctx, "/Icebox/ResetDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Icebox service

type IceboxServer interface {
	// getdevice info, 判断是否是特定设备，是否已经进行了初始化, 如果没有则需要进行初始化操作
	// 如果已经进行了初始化，是否需要检测数据的合法性？
	CheckDevice(context.Context, *CheckRequest) (*CheckReply, error)
	// initailaize device: create a main private secret key
	// 1. init(pin)   pin as parameter
	// 2. pin ==> memoric words ==> seed
	// 3. generate secret key and encrypt it with pin
	InitDevice(context.Context, *InitRequest) (*InitReply, error)
	// Sends a greeting
	HandShake(context.Context, *HelloRequest) (*HelloReply, error)
	AddCoin(context.Context, *AddCoinRequest) (*AddCoinReply, error)
	CreateAddress(context.Context, *CreateAddressRequest) (*CreateAddressReply, error)
	ListFeature(context.Context, *ListFeatureRequest) (*ListFeatureReply, error)
	ListFormula(context.Context, *ListFormulaRequest) (*ListFormulaReply, error)
	SignTx(context.Context, *SignTxRequest) (*SignTxReply, error)
	RemoveFeature(context.Context, *RemoveFeatureRequest) (*RemoveFeatureReply, error)
	DeleteFormula(context.Context, *DeleteFormulaRequest) (*DeleteFormulaReply, error)
	// remove all datas
	ResetDevice(context.Context, *ResetRequest) (*ResetReply, error)
}

func RegisterIceboxServer(s *grpc.Server, srv IceboxServer) {
	s.RegisterService(&_Icebox_serviceDesc, srv)
}

func _Icebox_CheckDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceboxServer).CheckDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icebox/CheckDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceboxServer).CheckDevice(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icebox_InitDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceboxServer).InitDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icebox/InitDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceboxServer).InitDevice(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icebox_HandShake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceboxServer).HandShake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icebox/HandShake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceboxServer).HandShake(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icebox_AddCoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceboxServer).AddCoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icebox/AddCoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceboxServer).AddCoin(ctx, req.(*AddCoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icebox_CreateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceboxServer).CreateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icebox/CreateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceboxServer).CreateAddress(ctx, req.(*CreateAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icebox_ListFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceboxServer).ListFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icebox/ListFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceboxServer).ListFeature(ctx, req.(*ListFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icebox_ListFormula_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFormulaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceboxServer).ListFormula(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icebox/ListFormula",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceboxServer).ListFormula(ctx, req.(*ListFormulaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icebox_SignTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceboxServer).SignTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icebox/SignTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceboxServer).SignTx(ctx, req.(*SignTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icebox_RemoveFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveFeatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceboxServer).RemoveFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icebox/RemoveFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceboxServer).RemoveFeature(ctx, req.(*RemoveFeatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icebox_DeleteFormula_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFormulaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceboxServer).DeleteFormula(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icebox/DeleteFormula",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceboxServer).DeleteFormula(ctx, req.(*DeleteFormulaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Icebox_ResetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IceboxServer).ResetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Icebox/ResetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IceboxServer).ResetDevice(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Icebox_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Icebox",
	HandlerType: (*IceboxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckDevice",
			Handler:    _Icebox_CheckDevice_Handler,
		},
		{
			MethodName: "InitDevice",
			Handler:    _Icebox_InitDevice_Handler,
		},
		{
			MethodName: "HandShake",
			Handler:    _Icebox_HandShake_Handler,
		},
		{
			MethodName: "AddCoin",
			Handler:    _Icebox_AddCoin_Handler,
		},
		{
			MethodName: "CreateAddress",
			Handler:    _Icebox_CreateAddress_Handler,
		},
		{
			MethodName: "ListFeature",
			Handler:    _Icebox_ListFeature_Handler,
		},
		{
			MethodName: "ListFormula",
			Handler:    _Icebox_ListFormula_Handler,
		},
		{
			MethodName: "SignTx",
			Handler:    _Icebox_SignTx_Handler,
		},
		{
			MethodName: "RemoveFeature",
			Handler:    _Icebox_RemoveFeature_Handler,
		},
		{
			MethodName: "DeleteFormula",
			Handler:    _Icebox_DeleteFormula_Handler,
		},
		{
			MethodName: "ResetDevice",
			Handler:    _Icebox_ResetDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "icebox.proto",
}

func init() { proto.RegisterFile("icebox.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 935 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0x51, 0x6b, 0xe3, 0x46,
	0x10, 0xb6, 0x2c, 0x59, 0x71, 0x46, 0x72, 0x2e, 0xb7, 0x4e, 0x8a, 0x4f, 0x5c, 0xb9, 0x74, 0xdb,
	0x07, 0x97, 0xa3, 0x1b, 0x1a, 0x5a, 0x0a, 0x07, 0xe5, 0x9a, 0xcb, 0x71, 0x24, 0x5c, 0x4b, 0xcb,
	0xde, 0x41, 0x69, 0x4b, 0x09, 0x8a, 0x77, 0x88, 0xc5, 0x59, 0x92, 0xab, 0x95, 0x5d, 0xe7, 0xad,
	0x50, 0xe8, 0x0f, 0xb8, 0x3e, 0xf6, 0xb5, 0x7f, 0xa3, 0xff, 0xad, 0xec, 0x6a, 0x2d, 0x4b, 0x76,
	0x28, 0x32, 0x84, 0xde, 0xdb, 0xee, 0xc8, 0x33, 0xfb, 0x7d, 0xb3, 0xdf, 0xcc, 0x8e, 0xc1, 0x8f,
	0x46, 0x78, 0x95, 0x2e, 0xd8, 0x34, 0x4b, 0xf3, 0x34, 0xf0, 0x93, 0x30, 0x49, 0xa7, 0x57, 0xc5,
	0x8e, 0x7e, 0x02, 0xee, 0x39, 0x86, 0x02, 0x33, 0xd2, 0x07, 0x7b, 0x8e, 0xd9, 0xc0, 0x3a, 0x6a,
	0x0f, 0x7b, 0x4f, 0xac, 0x4f, 0xb9, 0xda, 0x91, 0x3d, 0x68, 0xcb, 0x64, 0xd0, 0x56, 0x36, 0xde,
	0x96, 0x09, 0x1d, 0x83, 0xc7, 0x71, 0x3a, 0xb9, 0xd9, 0xc2, 0x87, 0x10, 0x70, 0x46, 0xa9, 0xc0,
	0x81, 0xad, 0x2d, 0x7a, 0x4d, 0x8e, 0x60, 0x27, 0x46, 0x29, 0xc3, 0x6b, 0x1c, 0x38, 0x47, 0xd6,
	0x70, 0xf7, 0x99, 0xfb, 0xf6, 0xa9, 0xdd, 0xfd, 0xcd, 0xe2, 0x4b, 0x33, 0x3d, 0x06, 0xff, 0x6c,
	0x8c, 0xa3, 0x37, 0x1c, 0x7f, 0x99, 0xa1, 0xcc, 0xc9, 0x23, 0x70, 0xc7, 0xfa, 0x50, 0x7d, 0x9a,
	0x77, 0xb2, 0xc3, 0x0a, 0x0c, 0xdc, 0x98, 0xe9, 0x25, 0x80, 0x71, 0x98, 0x4e, 0x6e, 0xc8, 0x47,
	0x6b, 0x3f, 0xf7, 0x59, 0x05, 0xf7, 0xd2, 0x87, 0x1c, 0x40, 0x47, 0xe6, 0x61, 0x8e, 0x1a, 0x6d,
	0x87, 0x17, 0x1b, 0x72, 0x08, 0xae, 0xc0, 0xf9, 0x65, 0x24, 0x06, 0xb6, 0xc2, 0xc6, 0x3b, 0x02,
	0xe7, 0x17, 0x82, 0x72, 0xf0, 0x2e, 0x92, 0x28, 0x6f, 0x0a, 0x88, 0x50, 0xe8, 0x4e, 0x43, 0x29,
	0x7f, 0x4d, 0x33, 0xa1, 0xe3, 0xaf, 0x48, 0x96, 0x76, 0xfa, 0x2d, 0xec, 0x16, 0x31, 0x9b, 0x63,
	0x7e, 0x58, 0xa2, 0x2b, 0x82, 0x76, 0xde, 0x3e, 0x6d, 0x77, 0x8f, 0x96, 0x20, 0x8f, 0xc1, 0x3f,
	0xc7, 0xc9, 0x24, 0x6d, 0x9c, 0xb6, 0xef, 0x00, 0x8c, 0xc3, 0x36, 0x10, 0x76, 0xf3, 0x28, 0x46,
	0x99, 0x87, 0xf1, 0x54, 0xa3, 0xb0, 0xf9, 0xca, 0x40, 0xff, 0xb0, 0xe0, 0xfe, 0xa9, 0x10, 0x2f,
	0x30, 0xcc, 0x67, 0x19, 0x36, 0x4e, 0x17, 0x01, 0x27, 0xbf, 0x99, 0xa2, 0x11, 0x8e, 0x5e, 0x93,
	0x7d, 0xb0, 0x23, 0xb1, 0x30, 0xca, 0x51, 0x4b, 0xf2, 0x1e, 0xb8, 0xf2, 0x26, 0xbe, 0x4a, 0x27,
	0x03, 0x47, 0xb1, 0xe7, 0x66, 0xa7, 0xbc, 0x93, 0x30, 0xc6, 0x41, 0x47, 0x5b, 0xf5, 0x9a, 0xbe,
	0x84, 0x7b, 0x55, 0x1c, 0xcd, 0xf9, 0x11, 0x70, 0xa6, 0x61, 0x3e, 0x2e, 0x12, 0xcc, 0xf5, 0x9a,
	0xfe, 0x6e, 0xc1, 0xde, 0xa9, 0x10, 0x67, 0x69, 0x94, 0xbc, 0x43, 0x4a, 0x9f, 0x81, 0x5f, 0x82,
	0x68, 0xcc, 0x87, 0xfe, 0x69, 0xc1, 0xc1, 0x59, 0x86, 0x61, 0x8e, 0x2f, 0xd2, 0x2c, 0x9e, 0x4d,
	0xc2, 0xc6, 0x0c, 0x1e, 0x80, 0x1b, 0xc9, 0x51, 0x1a, 0x99, 0x7a, 0x56, 0x35, 0x6e, 0x0c, 0x25,
	0x39, 0x7b, 0x93, 0x9c, 0xb3, 0x22, 0xf7, 0xa0, 0x24, 0x61, 0xad, 0xb4, 0x5a, 0x70, 0xf9, 0x01,
	0xc8, 0x1a, 0xa8, 0xe6, 0x37, 0xf4, 0x3e, 0xb8, 0x19, 0xca, 0xd9, 0x24, 0xaf, 0x16, 0xc1, 0x57,
	0xdc, 0x18, 0xe9, 0x5f, 0x25, 0xe1, 0x53, 0x21, 0x32, 0x94, 0xf2, 0x8e, 0xaf, 0xec, 0x83, 0x4a,
	0x69, 0x3b, 0x55, 0x00, 0xa5, 0xf9, 0xbf, 0x88, 0xff, 0xb4, 0x24, 0x5e, 0x82, 0x6b, 0x4e, 0xfc,
	0x11, 0xec, 0x84, 0x85, 0x57, 0x9d, 0xf9, 0xd2, 0x4a, 0xff, 0xb6, 0xa0, 0xf7, 0x2a, 0xba, 0x4e,
	0x5e, 0x2f, 0xee, 0x5e, 0xa6, 0x61, 0x9c, 0xce, 0x92, 0x5c, 0x33, 0x76, 0xb8, 0xd9, 0x29, 0xa2,
	0x02, 0x65, 0x5e, 0xc8, 0x74, 0x09, 0x47, 0x9b, 0xd4, 0xa7, 0x7c, 0x11, 0x89, 0x81, 0x5b, 0xfb,
	0xa4, 0x4c, 0xf4, 0x7b, 0xf0, 0x96, 0x28, 0x9b, 0x93, 0xa7, 0xd0, 0x95, 0xd1, 0x75, 0x82, 0xe2,
	0xf5, 0xa2, 0xd6, 0x51, 0xdb, 0xbc, 0xb4, 0xd3, 0xcf, 0x81, 0x7c, 0x1d, 0xc9, 0x7c, 0xcb, 0xee,
	0x43, 0x11, 0xf6, 0x6b, 0x6e, 0xcd, 0x41, 0xed, 0x83, 0x1d, 0x87, 0x0b, 0x93, 0x3c, 0xb5, 0xd4,
	0xb4, 0x8b, 0xca, 0xb0, 0x87, 0x3d, 0x4d, 0x7b, 0xbf, 0x5b, 0xa4, 0x95, 0xce, 0x0d, 0xba, 0xff,
	0xa9, 0x0c, 0x2d, 0x73, 0x79, 0xf4, 0x1b, 0xd8, 0x31, 0x67, 0x96, 0x0e, 0xd6, 0xa6, 0x43, 0x7b,
	0x75, 0xdb, 0x0f, 0xc1, 0x95, 0x97, 0x4a, 0x53, 0x3a, 0x70, 0x79, 0x79, 0x1d, 0xa9, 0x34, 0x4b,
	0x53, 0x93, 0xad, 0xed, 0x0b, 0x77, 0x33, 0x5b, 0x1f, 0x82, 0x63, 0xce, 0xb1, 0x87, 0xde, 0x49,
	0x97, 0x99, 0xa0, 0x65, 0xde, 0xd4, 0x47, 0xfa, 0x12, 0x0e, 0x38, 0xc6, 0xe9, 0x1c, 0xef, 0xe0,
	0x55, 0xa1, 0x4f, 0x80, 0xac, 0x05, 0x6b, 0xde, 0x4a, 0x7f, 0x86, 0x83, 0xe7, 0x38, 0xc1, 0xed,
	0x3b, 0x69, 0xa3, 0x22, 0x53, 0xd0, 0xd6, 0xc2, 0x37, 0x87, 0x76, 0x0c, 0x3e, 0x47, 0x89, 0x8d,
	0x07, 0x14, 0x7a, 0x02, 0x60, 0x1c, 0x1a, 0x1f, 0x72, 0xf2, 0x8f, 0x03, 0xee, 0x85, 0x1e, 0x27,
	0xc9, 0x63, 0xf0, 0xf4, 0xc0, 0xf5, 0x1c, 0xe7, 0xd1, 0x08, 0x49, 0x8f, 0x55, 0xe7, 0xb5, 0xc0,
	0x63, 0xab, 0x69, 0x8c, 0xb6, 0xc8, 0x10, 0x40, 0x0d, 0x3a, 0xe6, 0xb7, 0x3e, 0xab, 0x4c, 0x52,
	0x01, 0xb0, 0x72, 0x06, 0xa2, 0x2d, 0xf2, 0x31, 0xec, 0x9e, 0x87, 0x89, 0x78, 0x35, 0x0e, 0xdf,
	0xa8, 0xa0, 0xd5, 0x69, 0x26, 0xf0, 0xd8, 0x6a, 0x56, 0xa1, 0x2d, 0xf2, 0x18, 0x76, 0xcc, 0x6b,
	0x48, 0xee, 0xb1, 0xfa, 0xe3, 0x1c, 0xf4, 0x58, 0xf5, 0xa1, 0xa4, 0x2d, 0xf2, 0x25, 0xf4, 0x6a,
	0x5d, 0x97, 0x1c, 0xb2, 0xdb, 0x9e, 0x88, 0xa0, 0xcf, 0x36, 0x9b, 0x33, 0x6d, 0x91, 0x2f, 0xc0,
	0xab, 0x34, 0x08, 0xd2, 0x67, 0x9b, 0x5d, 0x26, 0xb8, 0xcf, 0xd6, 0x7b, 0x48, 0xc5, 0xd1, 0x94,
	0x9f, 0x71, 0xac, 0xa9, 0x67, 0xe9, 0x58, 0xb9, 0x73, 0x9d, 0x32, 0xb7, 0x68, 0x91, 0x64, 0x8f,
	0xd5, 0x3a, 0x7a, 0xe0, 0xb3, 0x4a, 0xef, 0x2c, 0xa8, 0xd5, 0x04, 0x4d, 0x0e, 0xd9, 0x6d, 0xd5,
	0x12, 0xf4, 0xd9, 0xa6, 0xee, 0x0b, 0xf7, 0x9a, 0xe8, 0xc8, 0x21, 0xbb, 0x4d, 0xe3, 0x41, 0x9f,
	0x6d, 0x6a, 0x53, 0xdf, 0x82, 0xa7, 0x65, 0x54, 0xea, 0xa0, 0xaa, 0xc2, 0xc0, 0x63, 0x2b, 0x8d,
	0xd1, 0xd6, 0xb3, 0xee, 0x8f, 0xae, 0xfe, 0xe3, 0x21, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x1f,
	0xdf, 0x8c, 0x01, 0x96, 0x0c, 0x00, 0x00,
}
