//File: wallet.proto
// c , java, golang

syntax = "proto2";
// import "nanopb.proto";
// option go_package = "conseweb.com/wallet/device";
package wallet;

//enum MessageID {
//  SHAKEHAND_REQ = 0;
//  SHAKEHAND_RESP = 1;
//  SIGNTX_REQ = 2;
//  SIGNTX_RESP = 3;
//  QUERYADDR_REQ = 4;
//  QUERYADDR_RESP = 5;
//  CREATEADDR_REQ = 6;
//  CREATEADDR_RESP = 7;
//  DELETEADDR_REQ = 8;
//  DELETEADDR_RESP = 9;
//}

service ColdWallet {
    // getdevice info, 判断是否已经进行了配对, 如果没有则需要进行初始化操作
    rpc CheckDevice (CheckRequest) returns (stream CheckReply) {}
    // initailaize device: create a main private secret key
    // 1. init
    // 2. ask pin code
    // 3. ask memoric words
    // 4. generate seed
    // 5. generate secret key and encrypt it with pin
    rpc InitDevice (InitRequest) returns (stream InitReply) {}
    // Sends a greeting
    rpc HandShake (HelloRequest) returns (HelloReply) {}
    //
    rpc AddCoin (AddCoinRequest) returns (AddCoinReply) {}

    rpc CreateAddress (CreateAddrRequest) returns (CreateAddrReply) {}

    rpc ListCoins (ListCoinRequest) returns (ListCoinReply) {}

    rpc ListAddresses (ListAddressRequest) returns (ListAddressReply) {}

    rpc DeleteCoin (DeleteCoinRequest) returns (DeleteCoinReply) {}

    rpc DeleteAddress (DeleteAddressRequest) returns (DeleteAddressReply) {}
    // remove all datas
    rpc ResetDevice (ResetRequest) returns (ResetReply) {}

}

message Error {
    required int32 code = 1;
    required string message = 2;
//   map<string, string> nested_errors = 3;
//   repeated string details = 4;
//   bytes stack = 5 [(gogoproto.customtype) = "Stack"];
}

message CheckRequest {
    required string app_id = 1;
}

message CheckReply {
    required int32 state = 1;  // 0: unpaired, 1: pared
    // if paired then return dev_id=hash(id+app_id)
    optional string dev_id = 2;
    optional string sn = 3; // device serial number

}

message InitRequest {}
message InitReply {
    required Header header = 1;
}

// The request message containing the user's name.
message HelloRequest {
  required int32 ver = 1;
  required int32 msg_id = 2;
}

// The response message containing the greetings
message HelloReply {
  required string message = 1;
}

message Header {
    required uint32 ver = 1;
//    required MessageID msg_id = 2;
}

// if coin_type have exists, then failed
message AddCoinRequest {
    required uint32 type = 1; // bip44: coin_type
    required uint32 idx = 2;  // bip44: address_index
}

message AddCoinReply {
    required uint32 status = 1;
}

message CreateAddrRequest {
    required Header header = 1;
    required uint32 type = 2;
    optional string name = 3;
}

message CreateAddrReply {
    required Header header = 1;
    required uint32 status = 2;
    optional string message = 3;
    optional uint32 type = 4;
    optional uint32 index = 5;
    optional string name = 6;
}

message DeleteAddrReq {
    required Header header = 1;
    required uint32 type = 2;
    required uint32 index = 3;
}

message DeleteAddrResp {
    required Header header = 1;
    required uint32 status = 2;
    optional string message = 3;
}

message SignTxReq {
    required Header header = 1;
    required uint32 coinType = 2;
    required uint32 addrIdx = 3;
    required uint64 amount = 4;
    required string dest = 5;
    required string txid = 6;
}

message SignTxRes {
    required string signedTx = 1;
}

// list all of wallets
message ListCoinRequest {}
message ListCoinReply {
    repeated uint32 coin = 1;
}

message ListAddressRequest {
    required uint32 coinType = 1;
    required uint32 addrIdx = 2;
}

message Address {
    required uint32 type = 1;
    required uint32 index = 2;
    required string s_addr = 3;
}

message ListAddressReply {
    repeated Address addr = 1;
}

message DeleteCoinRequest {
    required uint32 type = 1;
}

message DeleteCoinReply {
    required uint32 status = 1;
}

message DeleteAddressRequest {
    required uint32 type = 1;
    required uint32 idx = 2;
}

message DeleteAddressReply {
    required uint32 status = 1;
}

message ResetRequest {}
message ResetReply {
    required uint32 status = 1;
}


// device info
message CoinTable {
    required uint32 type = 1;
    required string path = 2;    // like: "m/44'/0'/0'/" 到account
    // 对实际设备而言，以下两个字段都不是必须的
    optional string symbol = 3;  // like "btc"
    optional string name = 4;    // like "bitcoin"
}

message AddrTable {
    required uint32 type = 1;
    required uint32 idx = 2;
    required uint32 change = 3[default = 0];  // 该字段一般取值为0/1, 默认为0, 暂未使用
    optional string name = 5;   // 地址的名字, 只需要记录在app侧
}