// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: icebox.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "icebox.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class TimestampDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Timestamp>
     _instance;
} _Timestamp_default_instance_;
class IceboxMessage_HeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IceboxMessage_Header>
     _instance;
} _IceboxMessage_Header_default_instance_;
class IceboxMessageDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<IceboxMessage>
     _instance;
} _IceboxMessage_default_instance_;
class ErrorDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Error>
     _instance;
} _Error_default_instance_;
class HeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Header>
     _instance;
} _Header_default_instance_;
class ReplyHeaderDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ReplyHeader>
     _instance;
} _ReplyHeader_default_instance_;
class HiRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HiRequest>
     _instance;
} _HiRequest_default_instance_;
class HiReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<HiReply>
     _instance;
} _HiReply_default_instance_;
class NegotiateRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NegotiateRequest>
     _instance;
} _NegotiateRequest_default_instance_;
class NegotiateReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<NegotiateReply>
     _instance;
} _NegotiateReply_default_instance_;
class StartRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StartRequest>
     _instance;
} _StartRequest_default_instance_;
class StartReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<StartReply>
     _instance;
} _StartReply_default_instance_;
class ConversationRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ConversationRequest>
     _instance;
} _ConversationRequest_default_instance_;
class ConversationReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ConversationReply>
     _instance;
} _ConversationReply_default_instance_;
class EndRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EndRequest>
     _instance;
} _EndRequest_default_instance_;
class EndReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<EndReply>
     _instance;
} _EndReply_default_instance_;
class CheckRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CheckRequest>
     _instance;
} _CheckRequest_default_instance_;
class CheckReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CheckReply>
     _instance;
} _CheckReply_default_instance_;
class InitRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InitRequest>
     _instance;
} _InitRequest_default_instance_;
class InitReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<InitReply>
     _instance;
} _InitReply_default_instance_;
class PingRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PingRequest>
     _instance;
} _PingRequest_default_instance_;
class PingReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PingReply>
     _instance;
} _PingReply_default_instance_;
class AddCoinRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AddCoinRequest>
     _instance;
} _AddCoinRequest_default_instance_;
class AddCoinReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AddCoinReply>
     _instance;
} _AddCoinReply_default_instance_;
class CreateAddressRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CreateAddressRequest>
     _instance;
} _CreateAddressRequest_default_instance_;
class CreateAddressReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CreateAddressReply>
     _instance;
} _CreateAddressReply_default_instance_;
class CreateSecretRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CreateSecretRequest>
     _instance;
} _CreateSecretRequest_default_instance_;
class CreateSecretReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<CreateSecretReply>
     _instance;
} _CreateSecretReply_default_instance_;
class AddSecretRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AddSecretRequest>
     _instance;
} _AddSecretRequest_default_instance_;
class AddSecretReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<AddSecretReply>
     _instance;
} _AddSecretReply_default_instance_;
class SignTxRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SignTxRequest>
     _instance;
} _SignTxRequest_default_instance_;
class SignTxReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SignTxReply>
     _instance;
} _SignTxReply_default_instance_;
class SignMsgRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SignMsgRequest>
     _instance;
} _SignMsgRequest_default_instance_;
class SignMsgReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<SignMsgReply>
     _instance;
} _SignMsgReply_default_instance_;
class ListCoinRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ListCoinRequest>
     _instance;
} _ListCoinRequest_default_instance_;
class ListCoinReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ListCoinReply>
     _instance;
} _ListCoinReply_default_instance_;
class GetAddressRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetAddressRequest>
     _instance;
} _GetAddressRequest_default_instance_;
class GetAddressReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<GetAddressReply>
     _instance;
} _GetAddressReply_default_instance_;
class ListAddressRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ListAddressRequest>
     _instance;
} _ListAddressRequest_default_instance_;
class AddressDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Address>
     _instance;
} _Address_default_instance_;
class ListAddressReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ListAddressReply>
     _instance;
} _ListAddressReply_default_instance_;
class ListSecretRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ListSecretRequest>
     _instance;
} _ListSecretRequest_default_instance_;
class SecretDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<Secret>
     _instance;
} _Secret_default_instance_;
class ListSecretReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ListSecretReply>
     _instance;
} _ListSecretReply_default_instance_;
class RemoveCoinRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RemoveCoinRequest>
     _instance;
} _RemoveCoinRequest_default_instance_;
class RemoveCoinReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<RemoveCoinReply>
     _instance;
} _RemoveCoinReply_default_instance_;
class DeleteSecretRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DeleteSecretRequest>
     _instance;
} _DeleteSecretRequest_default_instance_;
class DeleteSecretReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DeleteSecretReply>
     _instance;
} _DeleteSecretReply_default_instance_;
class DeleteAddressRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DeleteAddressRequest>
     _instance;
} _DeleteAddressRequest_default_instance_;
class DeleteAddressReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DeleteAddressReply>
     _instance;
} _DeleteAddressReply_default_instance_;
class ResetRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ResetRequest>
     _instance;
} _ResetRequest_default_instance_;
class ResetReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<ResetReply>
     _instance;
} _ResetReply_default_instance_;
class DispMsgRequestDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DispMsgRequest>
     _instance;
} _DispMsgRequest_default_instance_;
class DispMsgReplyDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<DispMsgReply>
     _instance;
} _DispMsgReply_default_instance_;

namespace protobuf_icebox_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[54];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Timestamp, nanos_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IceboxMessage_Header, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IceboxMessage_Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IceboxMessage_Header, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IceboxMessage_Header, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IceboxMessage_Header, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IceboxMessage_Header, session_id_),
  3,
  1,
  0,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IceboxMessage, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IceboxMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IceboxMessage, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IceboxMessage, payload_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IceboxMessage, signature_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Error, message_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, sn_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHeader, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHeader, ver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHeader, sn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHeader, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyHeader, message_),
  3,
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HiRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HiRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HiRequest, magica_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HiReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HiReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HiReply, magicb_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NegotiateRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NegotiateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NegotiateRequest, keya_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NegotiateRequest, hash_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NegotiateReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NegotiateReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NegotiateReply, keyb_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NegotiateReply, hash_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConversationRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConversationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConversationRequest, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConversationRequest, message_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConversationRequest, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConversationRequest, signature_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConversationReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConversationReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConversationReply, session_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConversationReply, message_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConversationReply, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConversationReply, signature_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EndReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckReply, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckReply, dev_id_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitRequest, password_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitReply, dev_id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingReply, timestamp_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCoinRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCoinRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCoinRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCoinRequest, idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCoinRequest, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCoinRequest, name_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCoinReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddCoinReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAddressRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAddressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAddressRequest, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAddressRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAddressRequest, idx_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAddressReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAddressReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAddressReply, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAddressReply, idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateAddressReply, address_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSecretRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSecretRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSecretRequest, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSecretRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSecretRequest, site_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSecretRequest, account_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSecretReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSecretReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSecretReply, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSecretReply, site_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSecretReply, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSecretReply, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateSecretReply, secret_),
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSecretRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSecretRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSecretRequest, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSecretRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSecretRequest, site_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSecretRequest, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSecretRequest, secret_),
  0,
  2,
  3,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSecretReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSecretReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSecretReply, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSecretReply, site_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSecretReply, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSecretReply, idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddSecretReply, secret_),
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignTxRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignTxRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignTxRequest, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignTxRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignTxRequest, idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignTxRequest, amount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignTxRequest, dest_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignTxRequest, tx_hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignTxRequest, tx_idx_),
  0,
  3,
  4,
  5,
  1,
  2,
  6,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignTxReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignTxReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignTxReply, signedtx_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignMsgRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignMsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignMsgRequest, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignMsgRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignMsgRequest, idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignMsgRequest, message_),
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignMsgReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignMsgReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignMsgReply, signed__),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCoinRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCoinRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCoinReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCoinReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCoinReply, max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListCoinReply, type_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAddressRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAddressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAddressRequest, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAddressRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAddressRequest, idx_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAddressReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAddressReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAddressReply, addr_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListAddressRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListAddressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListAddressRequest, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListAddressRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListAddressRequest, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListAddressRequest, limit_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Address, s_addr_),
  2,
  3,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListAddressReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListAddressReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListAddressReply, total_records_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListAddressReply, total_pages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListAddressReply, limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListAddressReply, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListAddressReply, addr_),
  0,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSecretRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSecretRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSecretRequest, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSecretRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSecretRequest, site_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSecretRequest, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSecretRequest, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSecretRequest, limit_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, site_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, idx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Secret, s_secret_),
  1,
  2,
  3,
  4,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSecretReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSecretReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSecretReply, total_records_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSecretReply, total_pages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSecretReply, limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSecretReply, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ListSecretReply, secret_),
  0,
  1,
  2,
  3,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveCoinRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveCoinRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveCoinRequest, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveCoinRequest, type_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveCoinReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveCoinReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSecretRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSecretRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSecretRequest, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSecretRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSecretRequest, idx_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSecretReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteSecretReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteAddressRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteAddressRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteAddressRequest, password_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteAddressRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteAddressRequest, idx_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteAddressReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteAddressReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetRequest, password_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResetReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispMsgRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispMsgRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispMsgRequest, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispMsgRequest, content_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispMsgRequest, icon_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispMsgReply, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispMsgReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DispMsgReply, result_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(Timestamp)},
  { 9, 18, sizeof(IceboxMessage_Header)},
  { 22, 30, sizeof(IceboxMessage)},
  { 33, 40, sizeof(Error)},
  { 42, 49, sizeof(Header)},
  { 51, 60, sizeof(ReplyHeader)},
  { 64, 70, sizeof(HiRequest)},
  { 71, 77, sizeof(HiReply)},
  { 78, 85, sizeof(NegotiateRequest)},
  { 87, 94, sizeof(NegotiateReply)},
  { 96, 101, sizeof(StartRequest)},
  { 101, 106, sizeof(StartReply)},
  { 106, 115, sizeof(ConversationRequest)},
  { 119, 128, sizeof(ConversationReply)},
  { 132, 137, sizeof(EndRequest)},
  { 137, 142, sizeof(EndReply)},
  { 142, 147, sizeof(CheckRequest)},
  { 147, 154, sizeof(CheckReply)},
  { 156, 162, sizeof(InitRequest)},
  { 163, 169, sizeof(InitReply)},
  { 170, 175, sizeof(PingRequest)},
  { 175, 181, sizeof(PingReply)},
  { 182, 191, sizeof(AddCoinRequest)},
  { 195, 200, sizeof(AddCoinReply)},
  { 200, 208, sizeof(CreateAddressRequest)},
  { 211, 219, sizeof(CreateAddressReply)},
  { 222, 231, sizeof(CreateSecretRequest)},
  { 235, 245, sizeof(CreateSecretReply)},
  { 250, 260, sizeof(AddSecretRequest)},
  { 265, 275, sizeof(AddSecretReply)},
  { 280, 292, sizeof(SignTxRequest)},
  { 299, 305, sizeof(SignTxReply)},
  { 306, 315, sizeof(SignMsgRequest)},
  { 319, 325, sizeof(SignMsgReply)},
  { 326, 331, sizeof(ListCoinRequest)},
  { 331, 338, sizeof(ListCoinReply)},
  { 340, 348, sizeof(GetAddressRequest)},
  { 351, 357, sizeof(GetAddressReply)},
  { 358, 367, sizeof(ListAddressRequest)},
  { 371, 380, sizeof(Address)},
  { 384, 394, sizeof(ListAddressReply)},
  { 399, 410, sizeof(ListSecretRequest)},
  { 416, 426, sizeof(Secret)},
  { 431, 441, sizeof(ListSecretReply)},
  { 446, 453, sizeof(RemoveCoinRequest)},
  { 455, 460, sizeof(RemoveCoinReply)},
  { 460, 468, sizeof(DeleteSecretRequest)},
  { 471, 476, sizeof(DeleteSecretReply)},
  { 476, 484, sizeof(DeleteAddressRequest)},
  { 487, 492, sizeof(DeleteAddressReply)},
  { 492, 498, sizeof(ResetRequest)},
  { 499, 504, sizeof(ResetReply)},
  { 504, 512, sizeof(DispMsgRequest)},
  { 515, 521, sizeof(DispMsgReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Timestamp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IceboxMessage_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_IceboxMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Error_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Header_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ReplyHeader_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HiRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_HiReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NegotiateRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NegotiateReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StartRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StartReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConversationRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ConversationReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EndRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EndReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CheckReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_InitReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PingRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PingReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddCoinRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddCoinReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateAddressRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateAddressReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateSecretRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CreateSecretReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddSecretRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AddSecretReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SignTxRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SignTxReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SignMsgRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SignMsgReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListCoinRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListCoinReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetAddressRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_GetAddressReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListAddressRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Address_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListAddressReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListSecretRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Secret_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ListSecretReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RemoveCoinRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RemoveCoinReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeleteSecretRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeleteSecretReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeleteAddressRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DeleteAddressReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResetReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DispMsgRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DispMsgReply_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "icebox.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 54);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_nanopb_2eproto::InitDefaults();
  _Timestamp_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Timestamp_default_instance_);_IceboxMessage_Header_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IceboxMessage_Header_default_instance_);_IceboxMessage_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_IceboxMessage_default_instance_);_Error_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Error_default_instance_);_Header_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Header_default_instance_);_ReplyHeader_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ReplyHeader_default_instance_);_HiRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HiRequest_default_instance_);_HiReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_HiReply_default_instance_);_NegotiateRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NegotiateRequest_default_instance_);_NegotiateReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_NegotiateReply_default_instance_);_StartRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StartRequest_default_instance_);_StartReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_StartReply_default_instance_);_ConversationRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ConversationRequest_default_instance_);_ConversationReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ConversationReply_default_instance_);_EndRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EndRequest_default_instance_);_EndReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_EndReply_default_instance_);_CheckRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CheckRequest_default_instance_);_CheckReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CheckReply_default_instance_);_InitRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InitRequest_default_instance_);_InitReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_InitReply_default_instance_);_PingRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PingRequest_default_instance_);_PingReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PingReply_default_instance_);_AddCoinRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AddCoinRequest_default_instance_);_AddCoinReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AddCoinReply_default_instance_);_CreateAddressRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CreateAddressRequest_default_instance_);_CreateAddressReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CreateAddressReply_default_instance_);_CreateSecretRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CreateSecretRequest_default_instance_);_CreateSecretReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_CreateSecretReply_default_instance_);_AddSecretRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AddSecretRequest_default_instance_);_AddSecretReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_AddSecretReply_default_instance_);_SignTxRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SignTxRequest_default_instance_);_SignTxReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SignTxReply_default_instance_);_SignMsgRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SignMsgRequest_default_instance_);_SignMsgReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_SignMsgReply_default_instance_);_ListCoinRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ListCoinRequest_default_instance_);_ListCoinReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ListCoinReply_default_instance_);_GetAddressRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetAddressRequest_default_instance_);_GetAddressReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_GetAddressReply_default_instance_);_ListAddressRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ListAddressRequest_default_instance_);_Address_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Address_default_instance_);_ListAddressReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ListAddressReply_default_instance_);_ListSecretRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ListSecretRequest_default_instance_);_Secret_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_Secret_default_instance_);_ListSecretReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ListSecretReply_default_instance_);_RemoveCoinRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RemoveCoinRequest_default_instance_);_RemoveCoinReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_RemoveCoinReply_default_instance_);_DeleteSecretRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DeleteSecretRequest_default_instance_);_DeleteSecretReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DeleteSecretReply_default_instance_);_DeleteAddressRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DeleteAddressRequest_default_instance_);_DeleteAddressReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DeleteAddressReply_default_instance_);_ResetRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ResetRequest_default_instance_);_ResetReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_ResetReply_default_instance_);_DispMsgRequest_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DispMsgRequest_default_instance_);_DispMsgReply_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_DispMsgReply_default_instance_);_IceboxMessage_Header_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::Timestamp*>(
      ::Timestamp::internal_default_instance());
  _IceboxMessage_default_instance_._instance.get_mutable()->header_ = const_cast< ::IceboxMessage_Header*>(
      ::IceboxMessage_Header::internal_default_instance());
  _GetAddressReply_default_instance_._instance.get_mutable()->addr_ = const_cast< ::Address*>(
      ::Address::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014icebox.proto\032\014nanopb.proto\"+\n\tTimestam"
      "p\022\017\n\007seconds\030\001 \002(\003\022\r\n\005nanos\030\002 \002(\005\"\262\004\n\rIc"
      "eboxMessage\022%\n\006header\030\001 \002(\0132\025.IceboxMess"
      "age.Header\022\017\n\007payload\030\002 \002(\014\022\021\n\tsignature"
      "\030\003 \002(\014\032r\n\006Header\022\022\n\007version\030\001 \002(\r:\0011\022!\n\004"
      "type\030\002 \002(\0162\023.IceboxMessage.Type\022\035\n\ttimes"
      "tamp\030\003 \002(\0132\n.Timestamp\022\022\n\nsession_id\030\004 \002"
      "(\r\"\341\002\n\004Type\022\r\n\tUNDEFINED\020\000\022\t\n\005ERROR\020\001\022\t\n"
      "\005HELLO\020\002\022\r\n\tNEGOTIATE\020\003\022\t\n\005START\020\004\022\007\n\003EN"
      "D\020\005\022\t\n\005CHECK\020\006\022\010\n\004INIT\020\007\022\010\n\004PING\020\010\022\t\n\005RE"
      "SET\020\t\022\014\n\010ADD_COIN\020\n\022\022\n\016CREATE_ADDRESS\020\013\022"
      "\021\n\rCREATE_SECRET\020\014\022\r\n\tLIST_COIN\020\r\022\020\n\014LIS"
      "T_ADDRESS\020\016\022\017\n\013LIST_SECRET\020\017\022\013\n\007SIGN_TX\020"
      "\020\022\017\n\013REMOVE_COIN\020\021\022\022\n\016DELETE_ADDRESS\020\022\022\021"
      "\n\rDELETE_SECRET\020\023\022\017\n\013GET_ADDRESS\020\024\022\016\n\nGE"
      "T_SECRET\020\025\022\014\n\010SIGN_MSG\020\026\022\014\n\010DISP_MSG\020\027\"."
      "\n\005Error\022\014\n\004code\030\001 \002(\005\022\027\n\007message\030\002 \001(\tB\006"
      "\222\?\003\010\200\002\"$\n\006Header\022\016\n\003ver\030\001 \002(\r:\0011\022\n\n\002sn\030\002"
      " \002(\r\"P\n\013ReplyHeader\022\016\n\003ver\030\001 \002(\r:\0011\022\n\n\002s"
      "n\030\002 \002(\r\022\014\n\004code\030\003 \002(\r\022\027\n\007message\030\004 \001(\tB\006"
      "\222\?\003\010\200\001\"\033\n\tHiRequest\022\016\n\006magicA\030\002 \002(\003\"\031\n\007H"
      "iReply\022\016\n\006magicB\030\002 \002(\003\".\n\020NegotiateReque"
      "st\022\014\n\004keyA\030\002 \002(\t\022\014\n\004hash\030\003 \002(\t\",\n\016Negoti"
      "ateReply\022\014\n\004keyB\030\002 \002(\t\022\014\n\004hash\030\003 \002(\t\"\016\n\014"
      "StartRequest\"\014\n\nStartReply\"a\n\023Conversati"
      "onRequest\022\022\n\nsession_id\030\002 \002(\r\022\022\n\nmessage"
      "_id\030\003 \002(\r\022\017\n\007content\030\004 \002(\014\022\021\n\tsignature\030"
      "\005 \002(\014\"_\n\021ConversationReply\022\022\n\nsession_id"
      "\030\002 \002(\r\022\022\n\nmessage_id\030\003 \002(\r\022\017\n\007content\030\004 "
      "\002(\014\022\021\n\tsignature\030\005 \002(\014\"\014\n\nEndRequest\"\n\n\010"
      "EndReply\"\016\n\014CheckRequest\"+\n\nCheckReply\022\r"
      "\n\005state\030\002 \002(\005\022\016\n\006dev_id\030\003 \001(\t\"\'\n\013InitReq"
      "uest\022\030\n\010password\030\002 \002(\tB\006\222\?\003\010\200\001\"\"\n\tInitRe"
      "ply\022\025\n\006dev_id\030\002 \002(\014B\005\222\?\002\010 \"\r\n\013PingReques"
      "t\"\036\n\tPingReply\022\021\n\ttimestamp\030\002 \002(\003\"I\n\016Add"
      "CoinRequest\022\014\n\004type\030\002 \002(\r\022\013\n\003idx\030\003 \002(\r\022\016"
      "\n\006symbol\030\004 \002(\t\022\014\n\004name\030\005 \002(\t\"\016\n\014AddCoinR"
      "eply\"J\n\024CreateAddressRequest\022\027\n\010password"
      "\030\001 \002(\tB\005\222\?\002\010@\022\014\n\004type\030\002 \002(\r\022\013\n\003idx\030\003 \001(\r"
      "\"G\n\022CreateAddressReply\022\014\n\004type\030\001 \002(\r\022\013\n\003"
      "idx\030\002 \002(\r\022\026\n\007address\030\003 \002(\tB\005\222\?\002\010\"\"[\n\023Cre"
      "ateSecretRequest\022\027\n\010password\030\001 \002(\tB\005\222\?\002\010"
      "@\022\014\n\004type\030\002 \002(\r\022\014\n\004site\030\003 \002(\r\022\017\n\007account"
      "\030\004 \002(\r\"f\n\021CreateSecretReply\022\014\n\004type\030\001 \002("
      "\r\022\014\n\004site\030\002 \002(\r\022\017\n\007account\030\003 \002(\r\022\r\n\005inde"
      "x\030\004 \002(\r\022\025\n\006secret\030\005 \002(\014B\005\222\?\002\010@\"o\n\020AddSec"
      "retRequest\022\027\n\010password\030\001 \002(\tB\005\222\?\002\010@\022\014\n\004t"
      "ype\030\002 \002(\r\022\014\n\004site\030\003 \002(\r\022\017\n\007account\030\004 \002(\r"
      "\022\025\n\006secret\030\005 \002(\014B\005\222\?\002\010@\"a\n\016AddSecretRepl"
      "y\022\014\n\004type\030\001 \002(\r\022\014\n\004site\030\002 \002(\r\022\017\n\007account"
      "\030\003 \002(\r\022\013\n\003idx\030\004 \002(\r\022\025\n\006secret\030\005 \002(\014B\005\222\?\002"
      "\010@\"\211\001\n\rSignTxRequest\022\020\n\010password\030\001 \002(\t\022\014"
      "\n\004type\030\002 \002(\r\022\013\n\003idx\030\003 \002(\r\022\016\n\006amount\030\004 \002("
      "\004\022\023\n\004dest\030\005 \002(\tB\005\222\?\002\010\"\022\026\n\007tx_hash\030\006 \002(\014B"
      "\005\222\?\002\010 \022\016\n\006tx_idx\030\007 \002(\r\"\'\n\013SignTxReply\022\030\n"
      "\010signedTx\030\002 \002(\014B\006\222\?\003\010\200\004\"N\n\016SignMsgReques"
      "t\022\020\n\010password\030\001 \002(\t\022\014\n\004type\030\002 \002(\r\022\013\n\003idx"
      "\030\003 \002(\r\022\017\n\007message\030\004 \002(\014\"%\n\014SignMsgReply\022"
      "\025\n\006signed\030\001 \002(\014B\005\222\?\002\010F\"\021\n\017ListCoinReques"
      "t\"1\n\rListCoinReply\022\013\n\003max\030\002 \002(\r\022\023\n\004type\030"
      "\003 \003(\rB\005\222\?\002\020\010\"@\n\021GetAddressRequest\022\020\n\010pas"
      "sword\030\001 \002(\t\022\014\n\004type\030\002 \002(\r\022\013\n\003idx\030\003 \002(\r\")"
      "\n\017GetAddressReply\022\026\n\004addr\030\001 \002(\0132\010.Addres"
      "s\"S\n\022ListAddressRequest\022\020\n\010password\030\001 \002("
      "\t\022\014\n\004type\030\002 \002(\r\022\016\n\006offset\030\003 \002(\r\022\r\n\005limit"
      "\030\004 \002(\r\"I\n\007Address\022\014\n\004type\030\001 \002(\r\022\013\n\003idx\030\002"
      " \002(\r\022\014\n\004name\030\003 \001(\t\022\025\n\006s_addr\030\004 \002(\tB\005\222\?\002\010"
      "\"\"|\n\020ListAddressReply\022\025\n\rtotal_records\030\001"
      " \002(\r\022\023\n\013total_pages\030\002 \002(\r\022\r\n\005limit\030\003 \002(\r"
      "\022\016\n\006offset\030\004 \002(\r\022\035\n\004addr\030\005 \003(\0132\010.Address"
      "B\005\222\?\002\020\031\"q\n\021ListSecretRequest\022\020\n\010password"
      "\030\001 \002(\t\022\014\n\004type\030\002 \002(\r\022\014\n\004site\030\003 \001(\r\022\017\n\007ac"
      "count\030\004 \001(\r\022\016\n\006offset\030\005 \002(\r\022\r\n\005limit\030\006 \002"
      "(\r\"[\n\006Secret\022\014\n\004type\030\001 \002(\r\022\014\n\004site\030\002 \002(\r"
      "\022\017\n\007account\030\003 \002(\r\022\013\n\003idx\030\004 \002(\r\022\027\n\010s_secr"
      "et\030\005 \002(\014B\005\222\?\002\010@\"|\n\017ListSecretReply\022\025\n\rto"
      "tal_records\030\001 \002(\r\022\023\n\013total_pages\030\002 \002(\r\022\r"
      "\n\005limit\030\003 \002(\r\022\016\n\006offset\030\004 \002(\r\022\036\n\006secret\030"
      "\005 \003(\0132\007.SecretB\005\222\?\002\020\031\"3\n\021RemoveCoinReque"
      "st\022\020\n\010password\030\001 \002(\t\022\014\n\004type\030\002 \002(\r\"\021\n\017Re"
      "moveCoinReply\"B\n\023DeleteSecretRequest\022\020\n\010"
      "password\030\001 \002(\t\022\014\n\004type\030\002 \002(\r\022\013\n\003idx\030\003 \002("
      "\r\"\023\n\021DeleteSecretReply\"C\n\024DeleteAddressR"
      "equest\022\020\n\010password\030\001 \002(\t\022\014\n\004type\030\002 \002(\r\022\013"
      "\n\003idx\030\003 \002(\r\"\024\n\022DeleteAddressReply\" \n\014Res"
      "etRequest\022\020\n\010password\030\001 \002(\t\"\014\n\nResetRepl"
      "y\">\n\016DispMsgRequest\022\r\n\005title\030\001 \002(\014\022\017\n\007co"
      "ntent\030\002 \002(\014\022\014\n\004icon\030\003 \002(\014\"\036\n\014DispMsgRepl"
      "y\022\016\n\006result\030\001 \002(\01022\n\006Icebox\022(\n\004Chat\022\016.Ic"
      "eboxMessage\032\016.IceboxMessage\"\000B\010Z\006protos"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3599);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "icebox.proto", &protobuf_RegisterTypes);
  ::protobuf_nanopb_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_icebox_2eproto

const ::google::protobuf::EnumDescriptor* IceboxMessage_Type_descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_enum_descriptors[0];
}
bool IceboxMessage_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const IceboxMessage_Type IceboxMessage::UNDEFINED;
const IceboxMessage_Type IceboxMessage::ERROR;
const IceboxMessage_Type IceboxMessage::HELLO;
const IceboxMessage_Type IceboxMessage::NEGOTIATE;
const IceboxMessage_Type IceboxMessage::START;
const IceboxMessage_Type IceboxMessage::END;
const IceboxMessage_Type IceboxMessage::CHECK;
const IceboxMessage_Type IceboxMessage::INIT;
const IceboxMessage_Type IceboxMessage::PING;
const IceboxMessage_Type IceboxMessage::RESET;
const IceboxMessage_Type IceboxMessage::ADD_COIN;
const IceboxMessage_Type IceboxMessage::CREATE_ADDRESS;
const IceboxMessage_Type IceboxMessage::CREATE_SECRET;
const IceboxMessage_Type IceboxMessage::LIST_COIN;
const IceboxMessage_Type IceboxMessage::LIST_ADDRESS;
const IceboxMessage_Type IceboxMessage::LIST_SECRET;
const IceboxMessage_Type IceboxMessage::SIGN_TX;
const IceboxMessage_Type IceboxMessage::REMOVE_COIN;
const IceboxMessage_Type IceboxMessage::DELETE_ADDRESS;
const IceboxMessage_Type IceboxMessage::DELETE_SECRET;
const IceboxMessage_Type IceboxMessage::GET_ADDRESS;
const IceboxMessage_Type IceboxMessage::GET_SECRET;
const IceboxMessage_Type IceboxMessage::SIGN_MSG;
const IceboxMessage_Type IceboxMessage::DISP_MSG;
const IceboxMessage_Type IceboxMessage::Type_MIN;
const IceboxMessage_Type IceboxMessage::Type_MAX;
const int IceboxMessage::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Timestamp::kSecondsFieldNumber;
const int Timestamp::kNanosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Timestamp::Timestamp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Timestamp)
}
Timestamp::Timestamp(const Timestamp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seconds_, &from.seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&nanos_) -
    reinterpret_cast<char*>(&seconds_)) + sizeof(nanos_));
  // @@protoc_insertion_point(copy_constructor:Timestamp)
}

void Timestamp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nanos_) -
      reinterpret_cast<char*>(&seconds_)) + sizeof(nanos_));
}

Timestamp::~Timestamp() {
  // @@protoc_insertion_point(destructor:Timestamp)
  SharedDtor();
}

void Timestamp::SharedDtor() {
}

void Timestamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Timestamp::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Timestamp& Timestamp::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

Timestamp* Timestamp::New(::google::protobuf::Arena* arena) const {
  Timestamp* n = new Timestamp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Timestamp::Clear() {
// @@protoc_insertion_point(message_clear_start:Timestamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&seconds_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nanos_) -
        reinterpret_cast<char*>(&seconds_)) + sizeof(nanos_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Timestamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Timestamp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 seconds = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 nanos = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_nanos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nanos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Timestamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Timestamp)
  return false;
#undef DO_
}

void Timestamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Timestamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 seconds = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->seconds(), output);
  }

  // required int32 nanos = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nanos(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Timestamp)
}

::google::protobuf::uint8* Timestamp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Timestamp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 seconds = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->seconds(), target);
  }

  // required int32 nanos = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nanos(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Timestamp)
  return target;
}

size_t Timestamp::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Timestamp)
  size_t total_size = 0;

  if (has_seconds()) {
    // required int64 seconds = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->seconds());
  }

  if (has_nanos()) {
    // required int32 nanos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nanos());
  }

  return total_size;
}
size_t Timestamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Timestamp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int64 seconds = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->seconds());

    // required int32 nanos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nanos());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Timestamp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  const Timestamp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Timestamp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Timestamp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Timestamp)
    MergeFrom(*source);
  }
}

void Timestamp::MergeFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Timestamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      seconds_ = from.seconds_;
    }
    if (cached_has_bits & 0x00000002u) {
      nanos_ = from.nanos_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Timestamp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Timestamp::CopyFrom(const Timestamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Timestamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Timestamp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Timestamp::Swap(Timestamp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Timestamp::InternalSwap(Timestamp* other) {
  using std::swap;
  swap(seconds_, other->seconds_);
  swap(nanos_, other->nanos_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Timestamp::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Timestamp

// required int64 seconds = 1;
bool Timestamp::has_seconds() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Timestamp::set_has_seconds() {
  _has_bits_[0] |= 0x00000001u;
}
void Timestamp::clear_has_seconds() {
  _has_bits_[0] &= ~0x00000001u;
}
void Timestamp::clear_seconds() {
  seconds_ = GOOGLE_LONGLONG(0);
  clear_has_seconds();
}
::google::protobuf::int64 Timestamp::seconds() const {
  // @@protoc_insertion_point(field_get:Timestamp.seconds)
  return seconds_;
}
void Timestamp::set_seconds(::google::protobuf::int64 value) {
  set_has_seconds();
  seconds_ = value;
  // @@protoc_insertion_point(field_set:Timestamp.seconds)
}

// required int32 nanos = 2;
bool Timestamp::has_nanos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Timestamp::set_has_nanos() {
  _has_bits_[0] |= 0x00000002u;
}
void Timestamp::clear_has_nanos() {
  _has_bits_[0] &= ~0x00000002u;
}
void Timestamp::clear_nanos() {
  nanos_ = 0;
  clear_has_nanos();
}
::google::protobuf::int32 Timestamp::nanos() const {
  // @@protoc_insertion_point(field_get:Timestamp.nanos)
  return nanos_;
}
void Timestamp::set_nanos(::google::protobuf::int32 value) {
  set_has_nanos();
  nanos_ = value;
  // @@protoc_insertion_point(field_set:Timestamp.nanos)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IceboxMessage_Header::kVersionFieldNumber;
const int IceboxMessage_Header::kTypeFieldNumber;
const int IceboxMessage_Header::kTimestampFieldNumber;
const int IceboxMessage_Header::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IceboxMessage_Header::IceboxMessage_Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IceboxMessage.Header)
}
IceboxMessage_Header::IceboxMessage_Header(const IceboxMessage_Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_timestamp()) {
    timestamp_ = new ::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&type_)) + sizeof(version_));
  // @@protoc_insertion_point(copy_constructor:IceboxMessage.Header)
}

void IceboxMessage_Header::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&session_id_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(session_id_));
  version_ = 1u;
}

IceboxMessage_Header::~IceboxMessage_Header() {
  // @@protoc_insertion_point(destructor:IceboxMessage.Header)
  SharedDtor();
}

void IceboxMessage_Header::SharedDtor() {
  if (this != internal_default_instance()) delete timestamp_;
}

void IceboxMessage_Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IceboxMessage_Header::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IceboxMessage_Header& IceboxMessage_Header::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

IceboxMessage_Header* IceboxMessage_Header::New(::google::protobuf::Arena* arena) const {
  IceboxMessage_Header* n = new IceboxMessage_Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IceboxMessage_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:IceboxMessage.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_timestamp()) {
    GOOGLE_DCHECK(timestamp_ != NULL);
    timestamp_->::Timestamp::Clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 14u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&session_id_) -
        reinterpret_cast<char*>(&type_)) + sizeof(session_id_));
    version_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IceboxMessage_Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IceboxMessage.Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 version = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .IceboxMessage.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::IceboxMessage_Type_IsValid(value)) {
            set_type(static_cast< ::IceboxMessage_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .Timestamp timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 session_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IceboxMessage.Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IceboxMessage.Header)
  return false;
#undef DO_
}

void IceboxMessage_Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IceboxMessage.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->version(), output);
  }

  // required .IceboxMessage.Type type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required .Timestamp timestamp = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->timestamp_, output);
  }

  // required uint32 session_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->session_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IceboxMessage.Header)
}

::google::protobuf::uint8* IceboxMessage_Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IceboxMessage.Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->version(), target);
  }

  // required .IceboxMessage.Type type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required .Timestamp timestamp = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->timestamp_, deterministic, target);
  }

  // required uint32 session_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->session_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IceboxMessage.Header)
  return target;
}

size_t IceboxMessage_Header::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IceboxMessage.Header)
  size_t total_size = 0;

  if (has_timestamp()) {
    // required .Timestamp timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  if (has_type()) {
    // required .IceboxMessage.Type type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_session_id()) {
    // required uint32 session_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  if (has_version()) {
    // required uint32 version = 1 [default = 1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());
  }

  return total_size;
}
size_t IceboxMessage_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IceboxMessage.Header)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required .Timestamp timestamp = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);

    // required .IceboxMessage.Type type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required uint32 session_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());

    // required uint32 version = 1 [default = 1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->version());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IceboxMessage_Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IceboxMessage.Header)
  GOOGLE_DCHECK_NE(&from, this);
  const IceboxMessage_Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IceboxMessage_Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IceboxMessage.Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IceboxMessage.Header)
    MergeFrom(*source);
  }
}

void IceboxMessage_Header::MergeFrom(const IceboxMessage_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IceboxMessage.Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_timestamp()->::Timestamp::MergeFrom(from.timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IceboxMessage_Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IceboxMessage.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IceboxMessage_Header::CopyFrom(const IceboxMessage_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IceboxMessage.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IceboxMessage_Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_timestamp()) {
    if (!this->timestamp_->IsInitialized()) return false;
  }
  return true;
}

void IceboxMessage_Header::Swap(IceboxMessage_Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IceboxMessage_Header::InternalSwap(IceboxMessage_Header* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(type_, other->type_);
  swap(session_id_, other->session_id_);
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IceboxMessage_Header::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IceboxMessage_Header

// required uint32 version = 1 [default = 1];
bool IceboxMessage_Header::has_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IceboxMessage_Header::set_has_version() {
  _has_bits_[0] |= 0x00000008u;
}
void IceboxMessage_Header::clear_has_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void IceboxMessage_Header::clear_version() {
  version_ = 1u;
  clear_has_version();
}
::google::protobuf::uint32 IceboxMessage_Header::version() const {
  // @@protoc_insertion_point(field_get:IceboxMessage.Header.version)
  return version_;
}
void IceboxMessage_Header::set_version(::google::protobuf::uint32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:IceboxMessage.Header.version)
}

// required .IceboxMessage.Type type = 2;
bool IceboxMessage_Header::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IceboxMessage_Header::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void IceboxMessage_Header::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void IceboxMessage_Header::clear_type() {
  type_ = 0;
  clear_has_type();
}
::IceboxMessage_Type IceboxMessage_Header::type() const {
  // @@protoc_insertion_point(field_get:IceboxMessage.Header.type)
  return static_cast< ::IceboxMessage_Type >(type_);
}
void IceboxMessage_Header::set_type(::IceboxMessage_Type value) {
  assert(::IceboxMessage_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:IceboxMessage.Header.type)
}

// required .Timestamp timestamp = 3;
bool IceboxMessage_Header::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IceboxMessage_Header::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void IceboxMessage_Header::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void IceboxMessage_Header::clear_timestamp() {
  if (timestamp_ != NULL) timestamp_->::Timestamp::Clear();
  clear_has_timestamp();
}
const ::Timestamp& IceboxMessage_Header::timestamp() const {
  const ::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:IceboxMessage.Header.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::Timestamp*>(
      &::_Timestamp_default_instance_);
}
::Timestamp* IceboxMessage_Header::mutable_timestamp() {
  set_has_timestamp();
  if (timestamp_ == NULL) {
    timestamp_ = new ::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:IceboxMessage.Header.timestamp)
  return timestamp_;
}
::Timestamp* IceboxMessage_Header::release_timestamp() {
  // @@protoc_insertion_point(field_release:IceboxMessage.Header.timestamp)
  clear_has_timestamp();
  ::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void IceboxMessage_Header::set_allocated_timestamp(::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    set_has_timestamp();
  } else {
    clear_has_timestamp();
  }
  // @@protoc_insertion_point(field_set_allocated:IceboxMessage.Header.timestamp)
}

// required uint32 session_id = 4;
bool IceboxMessage_Header::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IceboxMessage_Header::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
void IceboxMessage_Header::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void IceboxMessage_Header::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
::google::protobuf::uint32 IceboxMessage_Header::session_id() const {
  // @@protoc_insertion_point(field_get:IceboxMessage.Header.session_id)
  return session_id_;
}
void IceboxMessage_Header::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:IceboxMessage.Header.session_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IceboxMessage::kHeaderFieldNumber;
const int IceboxMessage::kPayloadFieldNumber;
const int IceboxMessage::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IceboxMessage::IceboxMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:IceboxMessage)
}
IceboxMessage::IceboxMessage(const IceboxMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload()) {
    payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.has_header()) {
    header_ = new ::IceboxMessage_Header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:IceboxMessage)
}

void IceboxMessage::SharedCtor() {
  _cached_size_ = 0;
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  header_ = NULL;
}

IceboxMessage::~IceboxMessage() {
  // @@protoc_insertion_point(destructor:IceboxMessage)
  SharedDtor();
}

void IceboxMessage::SharedDtor() {
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void IceboxMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IceboxMessage::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IceboxMessage& IceboxMessage::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

IceboxMessage* IceboxMessage::New(::google::protobuf::Arena* arena) const {
  IceboxMessage* n = new IceboxMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IceboxMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:IceboxMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!payload_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*payload_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!signature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*signature_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::IceboxMessage_Header::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IceboxMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IceboxMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .IceboxMessage.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes payload = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes signature = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IceboxMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IceboxMessage)
  return false;
#undef DO_
}

void IceboxMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IceboxMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .IceboxMessage.Header header = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // required bytes payload = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->payload(), output);
  }

  // required bytes signature = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IceboxMessage)
}

::google::protobuf::uint8* IceboxMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:IceboxMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .IceboxMessage.Header header = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, deterministic, target);
  }

  // required bytes payload = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->payload(), target);
  }

  // required bytes signature = 3;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IceboxMessage)
  return target;
}

size_t IceboxMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:IceboxMessage)
  size_t total_size = 0;

  if (has_payload()) {
    // required bytes payload = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  if (has_signature()) {
    // required bytes signature = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());
  }

  if (has_header()) {
    // required .IceboxMessage.Header header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  return total_size;
}
size_t IceboxMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IceboxMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes payload = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());

    // required bytes signature = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());

    // required .IceboxMessage.Header header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IceboxMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:IceboxMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const IceboxMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IceboxMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:IceboxMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:IceboxMessage)
    MergeFrom(*source);
  }
}

void IceboxMessage::MergeFrom(const IceboxMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IceboxMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_payload();
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_header()->::IceboxMessage_Header::MergeFrom(from.header());
    }
  }
}

void IceboxMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:IceboxMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IceboxMessage::CopyFrom(const IceboxMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IceboxMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IceboxMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_header()) {
    if (!this->header_->IsInitialized()) return false;
  }
  return true;
}

void IceboxMessage::Swap(IceboxMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IceboxMessage::InternalSwap(IceboxMessage* other) {
  using std::swap;
  payload_.Swap(&other->payload_);
  signature_.Swap(&other->signature_);
  swap(header_, other->header_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IceboxMessage::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IceboxMessage

// required .IceboxMessage.Header header = 1;
bool IceboxMessage::has_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IceboxMessage::set_has_header() {
  _has_bits_[0] |= 0x00000004u;
}
void IceboxMessage::clear_has_header() {
  _has_bits_[0] &= ~0x00000004u;
}
void IceboxMessage::clear_header() {
  if (header_ != NULL) header_->::IceboxMessage_Header::Clear();
  clear_has_header();
}
const ::IceboxMessage_Header& IceboxMessage::header() const {
  const ::IceboxMessage_Header* p = header_;
  // @@protoc_insertion_point(field_get:IceboxMessage.header)
  return p != NULL ? *p : *reinterpret_cast<const ::IceboxMessage_Header*>(
      &::_IceboxMessage_Header_default_instance_);
}
::IceboxMessage_Header* IceboxMessage::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::IceboxMessage_Header;
  }
  // @@protoc_insertion_point(field_mutable:IceboxMessage.header)
  return header_;
}
::IceboxMessage_Header* IceboxMessage::release_header() {
  // @@protoc_insertion_point(field_release:IceboxMessage.header)
  clear_has_header();
  ::IceboxMessage_Header* temp = header_;
  header_ = NULL;
  return temp;
}
void IceboxMessage::set_allocated_header(::IceboxMessage_Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:IceboxMessage.header)
}

// required bytes payload = 2;
bool IceboxMessage::has_payload() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IceboxMessage::set_has_payload() {
  _has_bits_[0] |= 0x00000001u;
}
void IceboxMessage::clear_has_payload() {
  _has_bits_[0] &= ~0x00000001u;
}
void IceboxMessage::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
}
const ::std::string& IceboxMessage::payload() const {
  // @@protoc_insertion_point(field_get:IceboxMessage.payload)
  return payload_.GetNoArena();
}
void IceboxMessage::set_payload(const ::std::string& value) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IceboxMessage.payload)
}
#if LANG_CXX11
void IceboxMessage::set_payload(::std::string&& value) {
  set_has_payload();
  payload_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IceboxMessage.payload)
}
#endif
void IceboxMessage::set_payload(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IceboxMessage.payload)
}
void IceboxMessage::set_payload(const void* value, size_t size) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IceboxMessage.payload)
}
::std::string* IceboxMessage::mutable_payload() {
  set_has_payload();
  // @@protoc_insertion_point(field_mutable:IceboxMessage.payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IceboxMessage::release_payload() {
  // @@protoc_insertion_point(field_release:IceboxMessage.payload)
  clear_has_payload();
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IceboxMessage::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:IceboxMessage.payload)
}

// required bytes signature = 3;
bool IceboxMessage::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IceboxMessage::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
void IceboxMessage::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
void IceboxMessage::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
const ::std::string& IceboxMessage::signature() const {
  // @@protoc_insertion_point(field_get:IceboxMessage.signature)
  return signature_.GetNoArena();
}
void IceboxMessage::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:IceboxMessage.signature)
}
#if LANG_CXX11
void IceboxMessage::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:IceboxMessage.signature)
}
#endif
void IceboxMessage::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:IceboxMessage.signature)
}
void IceboxMessage::set_signature(const void* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:IceboxMessage.signature)
}
::std::string* IceboxMessage::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:IceboxMessage.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* IceboxMessage::release_signature() {
  // @@protoc_insertion_point(field_release:IceboxMessage.signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void IceboxMessage::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:IceboxMessage.signature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Error::kCodeFieldNumber;
const int Error::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Error::Error()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Error)
}
Error::Error(const Error& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:Error)
}

void Error::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

Error::~Error() {
  // @@protoc_insertion_point(destructor:Error)
  SharedDtor();
}

void Error::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Error::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Error::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Error& Error::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

Error* Error::New(::google::protobuf::Arena* arena) const {
  Error* n = new Error;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Error::Clear() {
// @@protoc_insertion_point(message_clear_start:Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_message()) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Error::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Error)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2 [(.nanopb) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Error.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Error)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Error)
  return false;
#undef DO_
}

void Error::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional string message = 2 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Error.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Error)
}

::google::protobuf::uint8* Error::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Error)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional string message = 2 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Error.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Error)
  return target;
}

size_t Error::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Error)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 code = 1;
  if (has_code()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }
  // optional string message = 2 [(.nanopb) = {
  if (has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Error::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Error)
  GOOGLE_DCHECK_NE(&from, this);
  const Error* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Error>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Error)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Error)
    MergeFrom(*source);
  }
}

void Error::MergeFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Error)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Error::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Error::CopyFrom(const Error& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Error)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Error::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void Error::Swap(Error* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Error::InternalSwap(Error* other) {
  using std::swap;
  message_.Swap(&other->message_);
  swap(code_, other->code_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Error::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Error

// required int32 code = 1;
bool Error::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Error::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
void Error::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void Error::clear_code() {
  code_ = 0;
  clear_has_code();
}
::google::protobuf::int32 Error::code() const {
  // @@protoc_insertion_point(field_get:Error.code)
  return code_;
}
void Error::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:Error.code)
}

// optional string message = 2 [(.nanopb) = {
bool Error::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Error::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void Error::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void Error::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& Error::message() const {
  // @@protoc_insertion_point(field_get:Error.message)
  return message_.GetNoArena();
}
void Error::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Error.message)
}
#if LANG_CXX11
void Error::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Error.message)
}
#endif
void Error::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Error.message)
}
void Error::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Error.message)
}
::std::string* Error::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:Error.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Error::release_message() {
  // @@protoc_insertion_point(field_release:Error.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Error::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:Error.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Header::kVerFieldNumber;
const int Header::kSnFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Header)
}
Header::Header(const Header& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sn_, &from.sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&ver_) -
    reinterpret_cast<char*>(&sn_)) + sizeof(ver_));
  // @@protoc_insertion_point(copy_constructor:Header)
}

void Header::SharedCtor() {
  _cached_size_ = 0;
  sn_ = 0u;
  ver_ = 1u;
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:Header)
  SharedDtor();
}

void Header::SharedDtor() {
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Header& Header::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

Header* Header::New(::google::protobuf::Arena* arena) const {
  Header* n = new Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    sn_ = 0u;
    ver_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ver = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 sn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_sn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 ver = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ver(), output);
  }

  // required uint32 sn = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sn(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Header)
}

::google::protobuf::uint8* Header::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Header)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 ver = 1 [default = 1];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ver(), target);
  }

  // required uint32 sn = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sn(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Header)
  return target;
}

size_t Header::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Header)
  size_t total_size = 0;

  if (has_sn()) {
    // required uint32 sn = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sn());
  }

  if (has_ver()) {
    // required uint32 ver = 1 [default = 1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ver());
  }

  return total_size;
}
size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Header)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 sn = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sn());

    // required uint32 ver = 1 [default = 1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ver());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Header)
  GOOGLE_DCHECK_NE(&from, this);
  const Header* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Header)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Header)
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Header)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      sn_ = from.sn_;
    }
    if (cached_has_bits & 0x00000002u) {
      ver_ = from.ver_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  using std::swap;
  swap(sn_, other->sn_);
  swap(ver_, other->ver_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Header

// required uint32 ver = 1 [default = 1];
bool Header::has_ver() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Header::set_has_ver() {
  _has_bits_[0] |= 0x00000002u;
}
void Header::clear_has_ver() {
  _has_bits_[0] &= ~0x00000002u;
}
void Header::clear_ver() {
  ver_ = 1u;
  clear_has_ver();
}
::google::protobuf::uint32 Header::ver() const {
  // @@protoc_insertion_point(field_get:Header.ver)
  return ver_;
}
void Header::set_ver(::google::protobuf::uint32 value) {
  set_has_ver();
  ver_ = value;
  // @@protoc_insertion_point(field_set:Header.ver)
}

// required uint32 sn = 2;
bool Header::has_sn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Header::set_has_sn() {
  _has_bits_[0] |= 0x00000001u;
}
void Header::clear_has_sn() {
  _has_bits_[0] &= ~0x00000001u;
}
void Header::clear_sn() {
  sn_ = 0u;
  clear_has_sn();
}
::google::protobuf::uint32 Header::sn() const {
  // @@protoc_insertion_point(field_get:Header.sn)
  return sn_;
}
void Header::set_sn(::google::protobuf::uint32 value) {
  set_has_sn();
  sn_ = value;
  // @@protoc_insertion_point(field_set:Header.sn)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReplyHeader::kVerFieldNumber;
const int ReplyHeader::kSnFieldNumber;
const int ReplyHeader::kCodeFieldNumber;
const int ReplyHeader::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReplyHeader::ReplyHeader()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ReplyHeader)
}
ReplyHeader::ReplyHeader(const ReplyHeader& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&sn_, &from.sn_,
    static_cast<size_t>(reinterpret_cast<char*>(&ver_) -
    reinterpret_cast<char*>(&sn_)) + sizeof(ver_));
  // @@protoc_insertion_point(copy_constructor:ReplyHeader)
}

void ReplyHeader::SharedCtor() {
  _cached_size_ = 0;
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&code_) -
      reinterpret_cast<char*>(&sn_)) + sizeof(code_));
  ver_ = 1u;
}

ReplyHeader::~ReplyHeader() {
  // @@protoc_insertion_point(destructor:ReplyHeader)
  SharedDtor();
}

void ReplyHeader::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReplyHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyHeader::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReplyHeader& ReplyHeader::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

ReplyHeader* ReplyHeader::New(::google::protobuf::Arena* arena) const {
  ReplyHeader* n = new ReplyHeader;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReplyHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:ReplyHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_message()) {
    GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*message_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 14u) {
    ::memset(&sn_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&code_) -
        reinterpret_cast<char*>(&sn_)) + sizeof(code_));
    ver_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ReplyHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ReplyHeader)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ver = 1 [default = 1];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_ver();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 sn = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_sn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 code = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 4 [(.nanopb) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ReplyHeader.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ReplyHeader)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ReplyHeader)
  return false;
#undef DO_
}

void ReplyHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ReplyHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 ver = 1 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ver(), output);
  }

  // required uint32 sn = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sn(), output);
  }

  // required uint32 code = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->code(), output);
  }

  // optional string message = 4 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ReplyHeader.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ReplyHeader)
}

::google::protobuf::uint8* ReplyHeader::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ReplyHeader)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 ver = 1 [default = 1];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ver(), target);
  }

  // required uint32 sn = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sn(), target);
  }

  // required uint32 code = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->code(), target);
  }

  // optional string message = 4 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ReplyHeader.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReplyHeader)
  return target;
}

size_t ReplyHeader::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ReplyHeader)
  size_t total_size = 0;

  if (has_sn()) {
    // required uint32 sn = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sn());
  }

  if (has_code()) {
    // required uint32 code = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());
  }

  if (has_ver()) {
    // required uint32 ver = 1 [default = 1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ver());
  }

  return total_size;
}
size_t ReplyHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReplyHeader)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required uint32 sn = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sn());

    // required uint32 code = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->code());

    // required uint32 ver = 1 [default = 1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ver());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string message = 4 [(.nanopb) = {
  if (has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyHeader::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReplyHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplyHeader* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReplyHeader>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReplyHeader)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReplyHeader)
    MergeFrom(*source);
  }
}

void ReplyHeader::MergeFrom(const ReplyHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReplyHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      sn_ = from.sn_;
    }
    if (cached_has_bits & 0x00000004u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000008u) {
      ver_ = from.ver_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ReplyHeader::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReplyHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyHeader::CopyFrom(const ReplyHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReplyHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  return true;
}

void ReplyHeader::Swap(ReplyHeader* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReplyHeader::InternalSwap(ReplyHeader* other) {
  using std::swap;
  message_.Swap(&other->message_);
  swap(sn_, other->sn_);
  swap(code_, other->code_);
  swap(ver_, other->ver_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReplyHeader::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ReplyHeader

// required uint32 ver = 1 [default = 1];
bool ReplyHeader::has_ver() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ReplyHeader::set_has_ver() {
  _has_bits_[0] |= 0x00000008u;
}
void ReplyHeader::clear_has_ver() {
  _has_bits_[0] &= ~0x00000008u;
}
void ReplyHeader::clear_ver() {
  ver_ = 1u;
  clear_has_ver();
}
::google::protobuf::uint32 ReplyHeader::ver() const {
  // @@protoc_insertion_point(field_get:ReplyHeader.ver)
  return ver_;
}
void ReplyHeader::set_ver(::google::protobuf::uint32 value) {
  set_has_ver();
  ver_ = value;
  // @@protoc_insertion_point(field_set:ReplyHeader.ver)
}

// required uint32 sn = 2;
bool ReplyHeader::has_sn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ReplyHeader::set_has_sn() {
  _has_bits_[0] |= 0x00000002u;
}
void ReplyHeader::clear_has_sn() {
  _has_bits_[0] &= ~0x00000002u;
}
void ReplyHeader::clear_sn() {
  sn_ = 0u;
  clear_has_sn();
}
::google::protobuf::uint32 ReplyHeader::sn() const {
  // @@protoc_insertion_point(field_get:ReplyHeader.sn)
  return sn_;
}
void ReplyHeader::set_sn(::google::protobuf::uint32 value) {
  set_has_sn();
  sn_ = value;
  // @@protoc_insertion_point(field_set:ReplyHeader.sn)
}

// required uint32 code = 3;
bool ReplyHeader::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ReplyHeader::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
void ReplyHeader::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
void ReplyHeader::clear_code() {
  code_ = 0u;
  clear_has_code();
}
::google::protobuf::uint32 ReplyHeader::code() const {
  // @@protoc_insertion_point(field_get:ReplyHeader.code)
  return code_;
}
void ReplyHeader::set_code(::google::protobuf::uint32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:ReplyHeader.code)
}

// optional string message = 4 [(.nanopb) = {
bool ReplyHeader::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ReplyHeader::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
void ReplyHeader::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
void ReplyHeader::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& ReplyHeader::message() const {
  // @@protoc_insertion_point(field_get:ReplyHeader.message)
  return message_.GetNoArena();
}
void ReplyHeader::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ReplyHeader.message)
}
#if LANG_CXX11
void ReplyHeader::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ReplyHeader.message)
}
#endif
void ReplyHeader::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ReplyHeader.message)
}
void ReplyHeader::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ReplyHeader.message)
}
::std::string* ReplyHeader::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:ReplyHeader.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ReplyHeader::release_message() {
  // @@protoc_insertion_point(field_release:ReplyHeader.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ReplyHeader::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:ReplyHeader.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HiRequest::kMagicAFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HiRequest::HiRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:HiRequest)
}
HiRequest::HiRequest(const HiRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  magica_ = from.magica_;
  // @@protoc_insertion_point(copy_constructor:HiRequest)
}

void HiRequest::SharedCtor() {
  _cached_size_ = 0;
  magica_ = GOOGLE_LONGLONG(0);
}

HiRequest::~HiRequest() {
  // @@protoc_insertion_point(destructor:HiRequest)
  SharedDtor();
}

void HiRequest::SharedDtor() {
}

void HiRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HiRequest::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HiRequest& HiRequest::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

HiRequest* HiRequest::New(::google::protobuf::Arena* arena) const {
  HiRequest* n = new HiRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HiRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:HiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  magica_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HiRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HiRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 magicA = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_magica();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &magica_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HiRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HiRequest)
  return false;
#undef DO_
}

void HiRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 magicA = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->magica(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HiRequest)
}

::google::protobuf::uint8* HiRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HiRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 magicA = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->magica(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HiRequest)
  return target;
}

size_t HiRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HiRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 magicA = 2;
  if (has_magica()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->magica());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HiRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HiRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HiRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HiRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HiRequest)
    MergeFrom(*source);
  }
}

void HiRequest::MergeFrom(const HiRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HiRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_magica()) {
    set_magica(from.magica());
  }
}

void HiRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HiRequest::CopyFrom(const HiRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HiRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HiRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void HiRequest::Swap(HiRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HiRequest::InternalSwap(HiRequest* other) {
  using std::swap;
  swap(magica_, other->magica_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HiRequest::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HiRequest

// required int64 magicA = 2;
bool HiRequest::has_magica() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HiRequest::set_has_magica() {
  _has_bits_[0] |= 0x00000001u;
}
void HiRequest::clear_has_magica() {
  _has_bits_[0] &= ~0x00000001u;
}
void HiRequest::clear_magica() {
  magica_ = GOOGLE_LONGLONG(0);
  clear_has_magica();
}
::google::protobuf::int64 HiRequest::magica() const {
  // @@protoc_insertion_point(field_get:HiRequest.magicA)
  return magica_;
}
void HiRequest::set_magica(::google::protobuf::int64 value) {
  set_has_magica();
  magica_ = value;
  // @@protoc_insertion_point(field_set:HiRequest.magicA)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HiReply::kMagicBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HiReply::HiReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:HiReply)
}
HiReply::HiReply(const HiReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  magicb_ = from.magicb_;
  // @@protoc_insertion_point(copy_constructor:HiReply)
}

void HiReply::SharedCtor() {
  _cached_size_ = 0;
  magicb_ = GOOGLE_LONGLONG(0);
}

HiReply::~HiReply() {
  // @@protoc_insertion_point(destructor:HiReply)
  SharedDtor();
}

void HiReply::SharedDtor() {
}

void HiReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HiReply::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HiReply& HiReply::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

HiReply* HiReply::New(::google::protobuf::Arena* arena) const {
  HiReply* n = new HiReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HiReply::Clear() {
// @@protoc_insertion_point(message_clear_start:HiReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  magicb_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HiReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HiReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 magicB = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_magicb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &magicb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HiReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HiReply)
  return false;
#undef DO_
}

void HiReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HiReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 magicB = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->magicb(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HiReply)
}

::google::protobuf::uint8* HiReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HiReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 magicB = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->magicb(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HiReply)
  return target;
}

size_t HiReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HiReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 magicB = 2;
  if (has_magicb()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->magicb());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HiReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HiReply)
  GOOGLE_DCHECK_NE(&from, this);
  const HiReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HiReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HiReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HiReply)
    MergeFrom(*source);
  }
}

void HiReply::MergeFrom(const HiReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HiReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_magicb()) {
    set_magicb(from.magicb());
  }
}

void HiReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HiReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HiReply::CopyFrom(const HiReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HiReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HiReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void HiReply::Swap(HiReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HiReply::InternalSwap(HiReply* other) {
  using std::swap;
  swap(magicb_, other->magicb_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HiReply::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HiReply

// required int64 magicB = 2;
bool HiReply::has_magicb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HiReply::set_has_magicb() {
  _has_bits_[0] |= 0x00000001u;
}
void HiReply::clear_has_magicb() {
  _has_bits_[0] &= ~0x00000001u;
}
void HiReply::clear_magicb() {
  magicb_ = GOOGLE_LONGLONG(0);
  clear_has_magicb();
}
::google::protobuf::int64 HiReply::magicb() const {
  // @@protoc_insertion_point(field_get:HiReply.magicB)
  return magicb_;
}
void HiReply::set_magicb(::google::protobuf::int64 value) {
  set_has_magicb();
  magicb_ = value;
  // @@protoc_insertion_point(field_set:HiReply.magicB)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NegotiateRequest::kKeyAFieldNumber;
const int NegotiateRequest::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NegotiateRequest::NegotiateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NegotiateRequest)
}
NegotiateRequest::NegotiateRequest(const NegotiateRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keya_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_keya()) {
    keya_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keya_);
  }
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hash()) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  // @@protoc_insertion_point(copy_constructor:NegotiateRequest)
}

void NegotiateRequest::SharedCtor() {
  _cached_size_ = 0;
  keya_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NegotiateRequest::~NegotiateRequest() {
  // @@protoc_insertion_point(destructor:NegotiateRequest)
  SharedDtor();
}

void NegotiateRequest::SharedDtor() {
  keya_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NegotiateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NegotiateRequest::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NegotiateRequest& NegotiateRequest::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

NegotiateRequest* NegotiateRequest::New(::google::protobuf::Arena* arena) const {
  NegotiateRequest* n = new NegotiateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NegotiateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:NegotiateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!keya_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*keya_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hash_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NegotiateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NegotiateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string keyA = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keya()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keya().data(), static_cast<int>(this->keya().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NegotiateRequest.keyA");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string hash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hash().data(), static_cast<int>(this->hash().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NegotiateRequest.hash");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NegotiateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NegotiateRequest)
  return false;
#undef DO_
}

void NegotiateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NegotiateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string keyA = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keya().data(), static_cast<int>(this->keya().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NegotiateRequest.keyA");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->keya(), output);
  }

  // required string hash = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NegotiateRequest.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NegotiateRequest)
}

::google::protobuf::uint8* NegotiateRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NegotiateRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string keyA = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keya().data(), static_cast<int>(this->keya().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NegotiateRequest.keyA");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->keya(), target);
  }

  // required string hash = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NegotiateRequest.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NegotiateRequest)
  return target;
}

size_t NegotiateRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NegotiateRequest)
  size_t total_size = 0;

  if (has_keya()) {
    // required string keyA = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->keya());
  }

  if (has_hash()) {
    // required string hash = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());
  }

  return total_size;
}
size_t NegotiateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NegotiateRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string keyA = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->keya());

    // required string hash = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NegotiateRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NegotiateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NegotiateRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NegotiateRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NegotiateRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NegotiateRequest)
    MergeFrom(*source);
  }
}

void NegotiateRequest::MergeFrom(const NegotiateRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NegotiateRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_keya();
      keya_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keya_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
  }
}

void NegotiateRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NegotiateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NegotiateRequest::CopyFrom(const NegotiateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NegotiateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NegotiateRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void NegotiateRequest::Swap(NegotiateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NegotiateRequest::InternalSwap(NegotiateRequest* other) {
  using std::swap;
  keya_.Swap(&other->keya_);
  hash_.Swap(&other->hash_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NegotiateRequest::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NegotiateRequest

// required string keyA = 2;
bool NegotiateRequest::has_keya() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NegotiateRequest::set_has_keya() {
  _has_bits_[0] |= 0x00000001u;
}
void NegotiateRequest::clear_has_keya() {
  _has_bits_[0] &= ~0x00000001u;
}
void NegotiateRequest::clear_keya() {
  keya_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_keya();
}
const ::std::string& NegotiateRequest::keya() const {
  // @@protoc_insertion_point(field_get:NegotiateRequest.keyA)
  return keya_.GetNoArena();
}
void NegotiateRequest::set_keya(const ::std::string& value) {
  set_has_keya();
  keya_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NegotiateRequest.keyA)
}
#if LANG_CXX11
void NegotiateRequest::set_keya(::std::string&& value) {
  set_has_keya();
  keya_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NegotiateRequest.keyA)
}
#endif
void NegotiateRequest::set_keya(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_keya();
  keya_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NegotiateRequest.keyA)
}
void NegotiateRequest::set_keya(const char* value, size_t size) {
  set_has_keya();
  keya_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NegotiateRequest.keyA)
}
::std::string* NegotiateRequest::mutable_keya() {
  set_has_keya();
  // @@protoc_insertion_point(field_mutable:NegotiateRequest.keyA)
  return keya_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NegotiateRequest::release_keya() {
  // @@protoc_insertion_point(field_release:NegotiateRequest.keyA)
  clear_has_keya();
  return keya_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NegotiateRequest::set_allocated_keya(::std::string* keya) {
  if (keya != NULL) {
    set_has_keya();
  } else {
    clear_has_keya();
  }
  keya_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keya);
  // @@protoc_insertion_point(field_set_allocated:NegotiateRequest.keyA)
}

// required string hash = 3;
bool NegotiateRequest::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NegotiateRequest::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void NegotiateRequest::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void NegotiateRequest::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
const ::std::string& NegotiateRequest::hash() const {
  // @@protoc_insertion_point(field_get:NegotiateRequest.hash)
  return hash_.GetNoArena();
}
void NegotiateRequest::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NegotiateRequest.hash)
}
#if LANG_CXX11
void NegotiateRequest::set_hash(::std::string&& value) {
  set_has_hash();
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NegotiateRequest.hash)
}
#endif
void NegotiateRequest::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NegotiateRequest.hash)
}
void NegotiateRequest::set_hash(const char* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NegotiateRequest.hash)
}
::std::string* NegotiateRequest::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:NegotiateRequest.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NegotiateRequest::release_hash() {
  // @@protoc_insertion_point(field_release:NegotiateRequest.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NegotiateRequest::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:NegotiateRequest.hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NegotiateReply::kKeyBFieldNumber;
const int NegotiateReply::kHashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NegotiateReply::NegotiateReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:NegotiateReply)
}
NegotiateReply::NegotiateReply(const NegotiateReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keyb_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_keyb()) {
    keyb_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keyb_);
  }
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_hash()) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  // @@protoc_insertion_point(copy_constructor:NegotiateReply)
}

void NegotiateReply::SharedCtor() {
  _cached_size_ = 0;
  keyb_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

NegotiateReply::~NegotiateReply() {
  // @@protoc_insertion_point(destructor:NegotiateReply)
  SharedDtor();
}

void NegotiateReply::SharedDtor() {
  keyb_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NegotiateReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NegotiateReply::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NegotiateReply& NegotiateReply::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

NegotiateReply* NegotiateReply::New(::google::protobuf::Arena* arena) const {
  NegotiateReply* n = new NegotiateReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NegotiateReply::Clear() {
// @@protoc_insertion_point(message_clear_start:NegotiateReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!keyb_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*keyb_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*hash_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NegotiateReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NegotiateReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string keyB = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_keyb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->keyb().data(), static_cast<int>(this->keyb().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NegotiateReply.keyB");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string hash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->hash().data(), static_cast<int>(this->hash().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "NegotiateReply.hash");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NegotiateReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NegotiateReply)
  return false;
#undef DO_
}

void NegotiateReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NegotiateReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string keyB = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyb().data(), static_cast<int>(this->keyb().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NegotiateReply.keyB");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->keyb(), output);
  }

  // required string hash = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NegotiateReply.hash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->hash(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NegotiateReply)
}

::google::protobuf::uint8* NegotiateReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:NegotiateReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string keyB = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->keyb().data(), static_cast<int>(this->keyb().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NegotiateReply.keyB");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->keyb(), target);
  }

  // required string hash = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->hash().data(), static_cast<int>(this->hash().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "NegotiateReply.hash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->hash(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NegotiateReply)
  return target;
}

size_t NegotiateReply::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:NegotiateReply)
  size_t total_size = 0;

  if (has_keyb()) {
    // required string keyB = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->keyb());
  }

  if (has_hash()) {
    // required string hash = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());
  }

  return total_size;
}
size_t NegotiateReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NegotiateReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string keyB = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->keyb());

    // required string hash = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hash());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NegotiateReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NegotiateReply)
  GOOGLE_DCHECK_NE(&from, this);
  const NegotiateReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NegotiateReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NegotiateReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NegotiateReply)
    MergeFrom(*source);
  }
}

void NegotiateReply::MergeFrom(const NegotiateReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NegotiateReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_keyb();
      keyb_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.keyb_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_hash();
      hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
    }
  }
}

void NegotiateReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NegotiateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NegotiateReply::CopyFrom(const NegotiateReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NegotiateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NegotiateReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void NegotiateReply::Swap(NegotiateReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NegotiateReply::InternalSwap(NegotiateReply* other) {
  using std::swap;
  keyb_.Swap(&other->keyb_);
  hash_.Swap(&other->hash_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NegotiateReply::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NegotiateReply

// required string keyB = 2;
bool NegotiateReply::has_keyb() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void NegotiateReply::set_has_keyb() {
  _has_bits_[0] |= 0x00000001u;
}
void NegotiateReply::clear_has_keyb() {
  _has_bits_[0] &= ~0x00000001u;
}
void NegotiateReply::clear_keyb() {
  keyb_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_keyb();
}
const ::std::string& NegotiateReply::keyb() const {
  // @@protoc_insertion_point(field_get:NegotiateReply.keyB)
  return keyb_.GetNoArena();
}
void NegotiateReply::set_keyb(const ::std::string& value) {
  set_has_keyb();
  keyb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NegotiateReply.keyB)
}
#if LANG_CXX11
void NegotiateReply::set_keyb(::std::string&& value) {
  set_has_keyb();
  keyb_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NegotiateReply.keyB)
}
#endif
void NegotiateReply::set_keyb(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_keyb();
  keyb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NegotiateReply.keyB)
}
void NegotiateReply::set_keyb(const char* value, size_t size) {
  set_has_keyb();
  keyb_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NegotiateReply.keyB)
}
::std::string* NegotiateReply::mutable_keyb() {
  set_has_keyb();
  // @@protoc_insertion_point(field_mutable:NegotiateReply.keyB)
  return keyb_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NegotiateReply::release_keyb() {
  // @@protoc_insertion_point(field_release:NegotiateReply.keyB)
  clear_has_keyb();
  return keyb_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NegotiateReply::set_allocated_keyb(::std::string* keyb) {
  if (keyb != NULL) {
    set_has_keyb();
  } else {
    clear_has_keyb();
  }
  keyb_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), keyb);
  // @@protoc_insertion_point(field_set_allocated:NegotiateReply.keyB)
}

// required string hash = 3;
bool NegotiateReply::has_hash() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void NegotiateReply::set_has_hash() {
  _has_bits_[0] |= 0x00000002u;
}
void NegotiateReply::clear_has_hash() {
  _has_bits_[0] &= ~0x00000002u;
}
void NegotiateReply::clear_hash() {
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hash();
}
const ::std::string& NegotiateReply::hash() const {
  // @@protoc_insertion_point(field_get:NegotiateReply.hash)
  return hash_.GetNoArena();
}
void NegotiateReply::set_hash(const ::std::string& value) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:NegotiateReply.hash)
}
#if LANG_CXX11
void NegotiateReply::set_hash(::std::string&& value) {
  set_has_hash();
  hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:NegotiateReply.hash)
}
#endif
void NegotiateReply::set_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:NegotiateReply.hash)
}
void NegotiateReply::set_hash(const char* value, size_t size) {
  set_has_hash();
  hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:NegotiateReply.hash)
}
::std::string* NegotiateReply::mutable_hash() {
  set_has_hash();
  // @@protoc_insertion_point(field_mutable:NegotiateReply.hash)
  return hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NegotiateReply::release_hash() {
  // @@protoc_insertion_point(field_release:NegotiateReply.hash)
  clear_has_hash();
  return hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NegotiateReply::set_allocated_hash(::std::string* hash) {
  if (hash != NULL) {
    set_has_hash();
  } else {
    clear_has_hash();
  }
  hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:NegotiateReply.hash)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartRequest::StartRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:StartRequest)
}
StartRequest::StartRequest(const StartRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StartRequest)
}

void StartRequest::SharedCtor() {
  _cached_size_ = 0;
}

StartRequest::~StartRequest() {
  // @@protoc_insertion_point(destructor:StartRequest)
  SharedDtor();
}

void StartRequest::SharedDtor() {
}

void StartRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartRequest::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StartRequest& StartRequest::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

StartRequest* StartRequest::New(::google::protobuf::Arena* arena) const {
  StartRequest* n = new StartRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:StartRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StartRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StartRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:StartRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StartRequest)
  return false;
#undef DO_
}

void StartRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StartRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StartRequest)
}

::google::protobuf::uint8* StartRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:StartRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StartRequest)
  return target;
}

size_t StartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StartRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StartRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StartRequest)
    MergeFrom(*source);
  }
}

void StartRequest::MergeFrom(const StartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StartRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartRequest::CopyFrom(const StartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartRequest::IsInitialized() const {
  return true;
}

void StartRequest::Swap(StartRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartRequest::InternalSwap(StartRequest* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartRequest::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartReply::StartReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:StartReply)
}
StartReply::StartReply(const StartReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StartReply)
}

void StartReply::SharedCtor() {
  _cached_size_ = 0;
}

StartReply::~StartReply() {
  // @@protoc_insertion_point(destructor:StartReply)
  SharedDtor();
}

void StartReply::SharedDtor() {
}

void StartReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartReply::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StartReply& StartReply::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

StartReply* StartReply::New(::google::protobuf::Arena* arena) const {
  StartReply* n = new StartReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartReply::Clear() {
// @@protoc_insertion_point(message_clear_start:StartReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StartReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StartReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:StartReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StartReply)
  return false;
#undef DO_
}

void StartReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StartReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StartReply)
}

::google::protobuf::uint8* StartReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:StartReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StartReply)
  return target;
}

size_t StartReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StartReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StartReply)
  GOOGLE_DCHECK_NE(&from, this);
  const StartReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StartReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StartReply)
    MergeFrom(*source);
  }
}

void StartReply::MergeFrom(const StartReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StartReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StartReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StartReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartReply::CopyFrom(const StartReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartReply::IsInitialized() const {
  return true;
}

void StartReply::Swap(StartReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartReply::InternalSwap(StartReply* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartReply::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartReply

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConversationRequest::kSessionIdFieldNumber;
const int ConversationRequest::kMessageIdFieldNumber;
const int ConversationRequest::kContentFieldNumber;
const int ConversationRequest::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConversationRequest::ConversationRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConversationRequest)
}
ConversationRequest::ConversationRequest(const ConversationRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&message_id_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(message_id_));
  // @@protoc_insertion_point(copy_constructor:ConversationRequest)
}

void ConversationRequest::SharedCtor() {
  _cached_size_ = 0;
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_id_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(message_id_));
}

ConversationRequest::~ConversationRequest() {
  // @@protoc_insertion_point(destructor:ConversationRequest)
  SharedDtor();
}

void ConversationRequest::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConversationRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConversationRequest::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConversationRequest& ConversationRequest::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConversationRequest* ConversationRequest::New(::google::protobuf::Arena* arena) const {
  ConversationRequest* n = new ConversationRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConversationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ConversationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!signature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*signature_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&message_id_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(message_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConversationRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConversationRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 message_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_message_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes content = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes signature = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConversationRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConversationRequest)
  return false;
#undef DO_
}

void ConversationRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConversationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 session_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->session_id(), output);
  }

  // required uint32 message_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->message_id(), output);
  }

  // required bytes content = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->content(), output);
  }

  // required bytes signature = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConversationRequest)
}

::google::protobuf::uint8* ConversationRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ConversationRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 session_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->session_id(), target);
  }

  // required uint32 message_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->message_id(), target);
  }

  // required bytes content = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }

  // required bytes signature = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConversationRequest)
  return target;
}

size_t ConversationRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ConversationRequest)
  size_t total_size = 0;

  if (has_content()) {
    // required bytes content = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  if (has_signature()) {
    // required bytes signature = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());
  }

  if (has_session_id()) {
    // required uint32 session_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  if (has_message_id()) {
    // required uint32 message_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->message_id());
  }

  return total_size;
}
size_t ConversationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConversationRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes content = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());

    // required bytes signature = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());

    // required uint32 session_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());

    // required uint32 message_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->message_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConversationRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConversationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ConversationRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConversationRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConversationRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConversationRequest)
    MergeFrom(*source);
  }
}

void ConversationRequest::MergeFrom(const ConversationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConversationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000004u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      message_id_ = from.message_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConversationRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConversationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConversationRequest::CopyFrom(const ConversationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConversationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConversationRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ConversationRequest::Swap(ConversationRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConversationRequest::InternalSwap(ConversationRequest* other) {
  using std::swap;
  content_.Swap(&other->content_);
  signature_.Swap(&other->signature_);
  swap(session_id_, other->session_id_);
  swap(message_id_, other->message_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConversationRequest::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConversationRequest

// required uint32 session_id = 2;
bool ConversationRequest::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConversationRequest::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ConversationRequest::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConversationRequest::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
::google::protobuf::uint32 ConversationRequest::session_id() const {
  // @@protoc_insertion_point(field_get:ConversationRequest.session_id)
  return session_id_;
}
void ConversationRequest::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:ConversationRequest.session_id)
}

// required uint32 message_id = 3;
bool ConversationRequest::has_message_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ConversationRequest::set_has_message_id() {
  _has_bits_[0] |= 0x00000008u;
}
void ConversationRequest::clear_has_message_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void ConversationRequest::clear_message_id() {
  message_id_ = 0u;
  clear_has_message_id();
}
::google::protobuf::uint32 ConversationRequest::message_id() const {
  // @@protoc_insertion_point(field_get:ConversationRequest.message_id)
  return message_id_;
}
void ConversationRequest::set_message_id(::google::protobuf::uint32 value) {
  set_has_message_id();
  message_id_ = value;
  // @@protoc_insertion_point(field_set:ConversationRequest.message_id)
}

// required bytes content = 4;
bool ConversationRequest::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConversationRequest::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
void ConversationRequest::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConversationRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& ConversationRequest::content() const {
  // @@protoc_insertion_point(field_get:ConversationRequest.content)
  return content_.GetNoArena();
}
void ConversationRequest::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConversationRequest.content)
}
#if LANG_CXX11
void ConversationRequest::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConversationRequest.content)
}
#endif
void ConversationRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConversationRequest.content)
}
void ConversationRequest::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConversationRequest.content)
}
::std::string* ConversationRequest::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:ConversationRequest.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConversationRequest::release_content() {
  // @@protoc_insertion_point(field_release:ConversationRequest.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConversationRequest::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:ConversationRequest.content)
}

// required bytes signature = 5;
bool ConversationRequest::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConversationRequest::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
void ConversationRequest::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConversationRequest::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
const ::std::string& ConversationRequest::signature() const {
  // @@protoc_insertion_point(field_get:ConversationRequest.signature)
  return signature_.GetNoArena();
}
void ConversationRequest::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConversationRequest.signature)
}
#if LANG_CXX11
void ConversationRequest::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConversationRequest.signature)
}
#endif
void ConversationRequest::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConversationRequest.signature)
}
void ConversationRequest::set_signature(const void* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConversationRequest.signature)
}
::std::string* ConversationRequest::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:ConversationRequest.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConversationRequest::release_signature() {
  // @@protoc_insertion_point(field_release:ConversationRequest.signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConversationRequest::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:ConversationRequest.signature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConversationReply::kSessionIdFieldNumber;
const int ConversationReply::kMessageIdFieldNumber;
const int ConversationReply::kContentFieldNumber;
const int ConversationReply::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConversationReply::ConversationReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConversationReply)
}
ConversationReply::ConversationReply(const ConversationReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  ::memcpy(&session_id_, &from.session_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&message_id_) -
    reinterpret_cast<char*>(&session_id_)) + sizeof(message_id_));
  // @@protoc_insertion_point(copy_constructor:ConversationReply)
}

void ConversationReply::SharedCtor() {
  _cached_size_ = 0;
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&session_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_id_) -
      reinterpret_cast<char*>(&session_id_)) + sizeof(message_id_));
}

ConversationReply::~ConversationReply() {
  // @@protoc_insertion_point(destructor:ConversationReply)
  SharedDtor();
}

void ConversationReply::SharedDtor() {
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConversationReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConversationReply::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConversationReply& ConversationReply::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConversationReply* ConversationReply::New(::google::protobuf::Arena* arena) const {
  ConversationReply* n = new ConversationReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConversationReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ConversationReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!signature_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*signature_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&session_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&message_id_) -
        reinterpret_cast<char*>(&session_id_)) + sizeof(message_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConversationReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConversationReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 session_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_session_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 message_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_message_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes content = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes signature = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConversationReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConversationReply)
  return false;
#undef DO_
}

void ConversationReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConversationReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 session_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->session_id(), output);
  }

  // required uint32 message_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->message_id(), output);
  }

  // required bytes content = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->content(), output);
  }

  // required bytes signature = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->signature(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConversationReply)
}

::google::protobuf::uint8* ConversationReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ConversationReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 session_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->session_id(), target);
  }

  // required uint32 message_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->message_id(), target);
  }

  // required bytes content = 4;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }

  // required bytes signature = 5;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->signature(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConversationReply)
  return target;
}

size_t ConversationReply::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ConversationReply)
  size_t total_size = 0;

  if (has_content()) {
    // required bytes content = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  if (has_signature()) {
    // required bytes signature = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());
  }

  if (has_session_id()) {
    // required uint32 session_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());
  }

  if (has_message_id()) {
    // required uint32 message_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->message_id());
  }

  return total_size;
}
size_t ConversationReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConversationReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes content = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());

    // required bytes signature = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());

    // required uint32 session_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_id());

    // required uint32 message_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->message_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConversationReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConversationReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ConversationReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConversationReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConversationReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConversationReply)
    MergeFrom(*source);
  }
}

void ConversationReply::MergeFrom(const ConversationReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConversationReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000004u) {
      session_id_ = from.session_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      message_id_ = from.message_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConversationReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConversationReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConversationReply::CopyFrom(const ConversationReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConversationReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConversationReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ConversationReply::Swap(ConversationReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConversationReply::InternalSwap(ConversationReply* other) {
  using std::swap;
  content_.Swap(&other->content_);
  signature_.Swap(&other->signature_);
  swap(session_id_, other->session_id_);
  swap(message_id_, other->message_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConversationReply::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConversationReply

// required uint32 session_id = 2;
bool ConversationReply::has_session_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConversationReply::set_has_session_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ConversationReply::clear_has_session_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConversationReply::clear_session_id() {
  session_id_ = 0u;
  clear_has_session_id();
}
::google::protobuf::uint32 ConversationReply::session_id() const {
  // @@protoc_insertion_point(field_get:ConversationReply.session_id)
  return session_id_;
}
void ConversationReply::set_session_id(::google::protobuf::uint32 value) {
  set_has_session_id();
  session_id_ = value;
  // @@protoc_insertion_point(field_set:ConversationReply.session_id)
}

// required uint32 message_id = 3;
bool ConversationReply::has_message_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ConversationReply::set_has_message_id() {
  _has_bits_[0] |= 0x00000008u;
}
void ConversationReply::clear_has_message_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void ConversationReply::clear_message_id() {
  message_id_ = 0u;
  clear_has_message_id();
}
::google::protobuf::uint32 ConversationReply::message_id() const {
  // @@protoc_insertion_point(field_get:ConversationReply.message_id)
  return message_id_;
}
void ConversationReply::set_message_id(::google::protobuf::uint32 value) {
  set_has_message_id();
  message_id_ = value;
  // @@protoc_insertion_point(field_set:ConversationReply.message_id)
}

// required bytes content = 4;
bool ConversationReply::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConversationReply::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
void ConversationReply::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConversationReply::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& ConversationReply::content() const {
  // @@protoc_insertion_point(field_get:ConversationReply.content)
  return content_.GetNoArena();
}
void ConversationReply::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConversationReply.content)
}
#if LANG_CXX11
void ConversationReply::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConversationReply.content)
}
#endif
void ConversationReply::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConversationReply.content)
}
void ConversationReply::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConversationReply.content)
}
::std::string* ConversationReply::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:ConversationReply.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConversationReply::release_content() {
  // @@protoc_insertion_point(field_release:ConversationReply.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConversationReply::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:ConversationReply.content)
}

// required bytes signature = 5;
bool ConversationReply::has_signature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConversationReply::set_has_signature() {
  _has_bits_[0] |= 0x00000002u;
}
void ConversationReply::clear_has_signature() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConversationReply::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
const ::std::string& ConversationReply::signature() const {
  // @@protoc_insertion_point(field_get:ConversationReply.signature)
  return signature_.GetNoArena();
}
void ConversationReply::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConversationReply.signature)
}
#if LANG_CXX11
void ConversationReply::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ConversationReply.signature)
}
#endif
void ConversationReply::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConversationReply.signature)
}
void ConversationReply::set_signature(const void* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConversationReply.signature)
}
::std::string* ConversationReply::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:ConversationReply.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConversationReply::release_signature() {
  // @@protoc_insertion_point(field_release:ConversationReply.signature)
  clear_has_signature();
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConversationReply::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:ConversationReply.signature)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EndRequest::EndRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:EndRequest)
}
EndRequest::EndRequest(const EndRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:EndRequest)
}

void EndRequest::SharedCtor() {
  _cached_size_ = 0;
}

EndRequest::~EndRequest() {
  // @@protoc_insertion_point(destructor:EndRequest)
  SharedDtor();
}

void EndRequest::SharedDtor() {
}

void EndRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndRequest::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EndRequest& EndRequest::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

EndRequest* EndRequest::New(::google::protobuf::Arena* arena) const {
  EndRequest* n = new EndRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EndRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:EndRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EndRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EndRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:EndRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EndRequest)
  return false;
#undef DO_
}

void EndRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EndRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EndRequest)
}

::google::protobuf::uint8* EndRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EndRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EndRequest)
  return target;
}

size_t EndRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EndRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EndRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EndRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EndRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EndRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EndRequest)
    MergeFrom(*source);
  }
}

void EndRequest::MergeFrom(const EndRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EndRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EndRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EndRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndRequest::CopyFrom(const EndRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EndRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndRequest::IsInitialized() const {
  return true;
}

void EndRequest::Swap(EndRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EndRequest::InternalSwap(EndRequest* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EndRequest::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EndRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EndReply::EndReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:EndReply)
}
EndReply::EndReply(const EndReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:EndReply)
}

void EndReply::SharedCtor() {
  _cached_size_ = 0;
}

EndReply::~EndReply() {
  // @@protoc_insertion_point(destructor:EndReply)
  SharedDtor();
}

void EndReply::SharedDtor() {
}

void EndReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EndReply::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EndReply& EndReply::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

EndReply* EndReply::New(::google::protobuf::Arena* arena) const {
  EndReply* n = new EndReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EndReply::Clear() {
// @@protoc_insertion_point(message_clear_start:EndReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EndReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EndReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:EndReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EndReply)
  return false;
#undef DO_
}

void EndReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EndReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:EndReply)
}

::google::protobuf::uint8* EndReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EndReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EndReply)
  return target;
}

size_t EndReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EndReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EndReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EndReply)
  GOOGLE_DCHECK_NE(&from, this);
  const EndReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EndReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EndReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EndReply)
    MergeFrom(*source);
  }
}

void EndReply::MergeFrom(const EndReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EndReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EndReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EndReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndReply::CopyFrom(const EndReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EndReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndReply::IsInitialized() const {
  return true;
}

void EndReply::Swap(EndReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EndReply::InternalSwap(EndReply* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EndReply::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EndReply

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckRequest::CheckRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CheckRequest)
}
CheckRequest::CheckRequest(const CheckRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CheckRequest)
}

void CheckRequest::SharedCtor() {
  _cached_size_ = 0;
}

CheckRequest::~CheckRequest() {
  // @@protoc_insertion_point(destructor:CheckRequest)
  SharedDtor();
}

void CheckRequest::SharedDtor() {
}

void CheckRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckRequest::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckRequest& CheckRequest::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckRequest* CheckRequest::New(::google::protobuf::Arena* arena) const {
  CheckRequest* n = new CheckRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CheckRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CheckRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:CheckRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CheckRequest)
  return false;
#undef DO_
}

void CheckRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CheckRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CheckRequest)
}

::google::protobuf::uint8* CheckRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CheckRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CheckRequest)
  return target;
}

size_t CheckRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CheckRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CheckRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CheckRequest)
    MergeFrom(*source);
  }
}

void CheckRequest::MergeFrom(const CheckRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CheckRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckRequest::CopyFrom(const CheckRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckRequest::IsInitialized() const {
  return true;
}

void CheckRequest::Swap(CheckRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckRequest::InternalSwap(CheckRequest* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckRequest::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckReply::kStateFieldNumber;
const int CheckReply::kDevIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckReply::CheckReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CheckReply)
}
CheckReply::CheckReply(const CheckReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dev_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dev_id()) {
    dev_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dev_id_);
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:CheckReply)
}

void CheckReply::SharedCtor() {
  _cached_size_ = 0;
  dev_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  state_ = 0;
}

CheckReply::~CheckReply() {
  // @@protoc_insertion_point(destructor:CheckReply)
  SharedDtor();
}

void CheckReply::SharedDtor() {
  dev_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CheckReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckReply::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CheckReply& CheckReply::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

CheckReply* CheckReply::New(::google::protobuf::Arena* arena) const {
  CheckReply* n = new CheckReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CheckReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_dev_id()) {
    GOOGLE_DCHECK(!dev_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*dev_id_.UnsafeRawStringPointer())->clear();
  }
  state_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CheckReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CheckReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dev_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dev_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dev_id().data(), static_cast<int>(this->dev_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CheckReply.dev_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CheckReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CheckReply)
  return false;
#undef DO_
}

void CheckReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CheckReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // optional string dev_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dev_id().data(), static_cast<int>(this->dev_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CheckReply.dev_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->dev_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CheckReply)
}

::google::protobuf::uint8* CheckReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CheckReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // optional string dev_id = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dev_id().data(), static_cast<int>(this->dev_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CheckReply.dev_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->dev_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CheckReply)
  return target;
}

size_t CheckReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CheckReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 state = 2;
  if (has_state()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }
  // optional string dev_id = 3;
  if (has_dev_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dev_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CheckReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CheckReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CheckReply)
    MergeFrom(*source);
  }
}

void CheckReply::MergeFrom(const CheckReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CheckReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_dev_id();
      dev_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dev_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      state_ = from.state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CheckReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CheckReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckReply::CopyFrom(const CheckReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CheckReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void CheckReply::Swap(CheckReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckReply::InternalSwap(CheckReply* other) {
  using std::swap;
  dev_id_.Swap(&other->dev_id_);
  swap(state_, other->state_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckReply::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckReply

// required int32 state = 2;
bool CheckReply::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CheckReply::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
void CheckReply::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void CheckReply::clear_state() {
  state_ = 0;
  clear_has_state();
}
::google::protobuf::int32 CheckReply::state() const {
  // @@protoc_insertion_point(field_get:CheckReply.state)
  return state_;
}
void CheckReply::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
  // @@protoc_insertion_point(field_set:CheckReply.state)
}

// optional string dev_id = 3;
bool CheckReply::has_dev_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckReply::set_has_dev_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CheckReply::clear_has_dev_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CheckReply::clear_dev_id() {
  dev_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dev_id();
}
const ::std::string& CheckReply::dev_id() const {
  // @@protoc_insertion_point(field_get:CheckReply.dev_id)
  return dev_id_.GetNoArena();
}
void CheckReply::set_dev_id(const ::std::string& value) {
  set_has_dev_id();
  dev_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CheckReply.dev_id)
}
#if LANG_CXX11
void CheckReply::set_dev_id(::std::string&& value) {
  set_has_dev_id();
  dev_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CheckReply.dev_id)
}
#endif
void CheckReply::set_dev_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dev_id();
  dev_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CheckReply.dev_id)
}
void CheckReply::set_dev_id(const char* value, size_t size) {
  set_has_dev_id();
  dev_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CheckReply.dev_id)
}
::std::string* CheckReply::mutable_dev_id() {
  set_has_dev_id();
  // @@protoc_insertion_point(field_mutable:CheckReply.dev_id)
  return dev_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CheckReply::release_dev_id() {
  // @@protoc_insertion_point(field_release:CheckReply.dev_id)
  clear_has_dev_id();
  return dev_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CheckReply::set_allocated_dev_id(::std::string* dev_id) {
  if (dev_id != NULL) {
    set_has_dev_id();
  } else {
    clear_has_dev_id();
  }
  dev_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dev_id);
  // @@protoc_insertion_point(field_set_allocated:CheckReply.dev_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitRequest::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitRequest::InitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:InitRequest)
}
InitRequest::InitRequest(const InitRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:InitRequest)
}

void InitRequest::SharedCtor() {
  _cached_size_ = 0;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InitRequest::~InitRequest() {
  // @@protoc_insertion_point(destructor:InitRequest)
  SharedDtor();
}

void InitRequest::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitRequest::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InitRequest& InitRequest::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitRequest* InitRequest::New(::google::protobuf::Arena* arena) const {
  InitRequest* n = new InitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:InitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_password()) {
    GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*password_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string password = 2 [(.nanopb) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "InitRequest.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InitRequest)
  return false;
#undef DO_
}

void InitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string password = 2 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InitRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InitRequest)
}

::google::protobuf::uint8* InitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:InitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string password = 2 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "InitRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InitRequest)
  return target;
}

size_t InitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InitRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string password = 2 [(.nanopb) = {
  if (has_password()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const InitRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InitRequest)
    MergeFrom(*source);
  }
}

void InitRequest::MergeFrom(const InitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_password()) {
    set_has_password();
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void InitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitRequest::CopyFrom(const InitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void InitRequest::Swap(InitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitRequest::InternalSwap(InitRequest* other) {
  using std::swap;
  password_.Swap(&other->password_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitRequest::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitRequest

// required string password = 2 [(.nanopb) = {
bool InitRequest::has_password() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InitRequest::set_has_password() {
  _has_bits_[0] |= 0x00000001u;
}
void InitRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000001u;
}
void InitRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& InitRequest::password() const {
  // @@protoc_insertion_point(field_get:InitRequest.password)
  return password_.GetNoArena();
}
void InitRequest::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InitRequest.password)
}
#if LANG_CXX11
void InitRequest::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:InitRequest.password)
}
#endif
void InitRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InitRequest.password)
}
void InitRequest::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InitRequest.password)
}
::std::string* InitRequest::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:InitRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InitRequest::release_password() {
  // @@protoc_insertion_point(field_release:InitRequest.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InitRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:InitRequest.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InitReply::kDevIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InitReply::InitReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:InitReply)
}
InitReply::InitReply(const InitReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dev_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dev_id()) {
    dev_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dev_id_);
  }
  // @@protoc_insertion_point(copy_constructor:InitReply)
}

void InitReply::SharedCtor() {
  _cached_size_ = 0;
  dev_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

InitReply::~InitReply() {
  // @@protoc_insertion_point(destructor:InitReply)
  SharedDtor();
}

void InitReply::SharedDtor() {
  dev_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void InitReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitReply::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const InitReply& InitReply::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

InitReply* InitReply::New(::google::protobuf::Arena* arena) const {
  InitReply* n = new InitReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InitReply::Clear() {
// @@protoc_insertion_point(message_clear_start:InitReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_dev_id()) {
    GOOGLE_DCHECK(!dev_id_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*dev_id_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool InitReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:InitReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes dev_id = 2 [(.nanopb) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dev_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:InitReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:InitReply)
  return false;
#undef DO_
}

void InitReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:InitReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes dev_id = 2 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->dev_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:InitReply)
}

::google::protobuf::uint8* InitReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:InitReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes dev_id = 2 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->dev_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InitReply)
  return target;
}

size_t InitReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InitReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes dev_id = 2 [(.nanopb) = {
  if (has_dev_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->dev_id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InitReply)
  GOOGLE_DCHECK_NE(&from, this);
  const InitReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const InitReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InitReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InitReply)
    MergeFrom(*source);
  }
}

void InitReply::MergeFrom(const InitReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InitReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dev_id()) {
    set_has_dev_id();
    dev_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dev_id_);
  }
}

void InitReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InitReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitReply::CopyFrom(const InitReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void InitReply::Swap(InitReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InitReply::InternalSwap(InitReply* other) {
  using std::swap;
  dev_id_.Swap(&other->dev_id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InitReply::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InitReply

// required bytes dev_id = 2 [(.nanopb) = {
bool InitReply::has_dev_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InitReply::set_has_dev_id() {
  _has_bits_[0] |= 0x00000001u;
}
void InitReply::clear_has_dev_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void InitReply::clear_dev_id() {
  dev_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dev_id();
}
const ::std::string& InitReply::dev_id() const {
  // @@protoc_insertion_point(field_get:InitReply.dev_id)
  return dev_id_.GetNoArena();
}
void InitReply::set_dev_id(const ::std::string& value) {
  set_has_dev_id();
  dev_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:InitReply.dev_id)
}
#if LANG_CXX11
void InitReply::set_dev_id(::std::string&& value) {
  set_has_dev_id();
  dev_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:InitReply.dev_id)
}
#endif
void InitReply::set_dev_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dev_id();
  dev_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:InitReply.dev_id)
}
void InitReply::set_dev_id(const void* value, size_t size) {
  set_has_dev_id();
  dev_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:InitReply.dev_id)
}
::std::string* InitReply::mutable_dev_id() {
  set_has_dev_id();
  // @@protoc_insertion_point(field_mutable:InitReply.dev_id)
  return dev_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* InitReply::release_dev_id() {
  // @@protoc_insertion_point(field_release:InitReply.dev_id)
  clear_has_dev_id();
  return dev_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void InitReply::set_allocated_dev_id(::std::string* dev_id) {
  if (dev_id != NULL) {
    set_has_dev_id();
  } else {
    clear_has_dev_id();
  }
  dev_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dev_id);
  // @@protoc_insertion_point(field_set_allocated:InitReply.dev_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PingRequest::PingRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PingRequest)
}
PingRequest::PingRequest(const PingRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:PingRequest)
}

void PingRequest::SharedCtor() {
  _cached_size_ = 0;
}

PingRequest::~PingRequest() {
  // @@protoc_insertion_point(destructor:PingRequest)
  SharedDtor();
}

void PingRequest::SharedDtor() {
}

void PingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingRequest::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PingRequest& PingRequest::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

PingRequest* PingRequest::New(::google::protobuf::Arena* arena) const {
  PingRequest* n = new PingRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:PingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PingRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:PingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PingRequest)
  return false;
#undef DO_
}

void PingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PingRequest)
}

::google::protobuf::uint8* PingRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PingRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PingRequest)
  return target;
}

size_t PingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PingRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PingRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PingRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PingRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PingRequest)
    MergeFrom(*source);
  }
}

void PingRequest::MergeFrom(const PingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PingRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingRequest::CopyFrom(const PingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingRequest::IsInitialized() const {
  return true;
}

void PingRequest::Swap(PingRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PingRequest::InternalSwap(PingRequest* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PingRequest::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PingRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PingReply::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PingReply::PingReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:PingReply)
}
PingReply::PingReply(const PingReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:PingReply)
}

void PingReply::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
}

PingReply::~PingReply() {
  // @@protoc_insertion_point(destructor:PingReply)
  SharedDtor();
}

void PingReply::SharedDtor() {
}

void PingReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingReply::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PingReply& PingReply::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

PingReply* PingReply::New(::google::protobuf::Arena* arena) const {
  PingReply* n = new PingReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PingReply::Clear() {
// @@protoc_insertion_point(message_clear_start:PingReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  timestamp_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PingReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:PingReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:PingReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:PingReply)
  return false;
#undef DO_
}

void PingReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:PingReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:PingReply)
}

::google::protobuf::uint8* PingReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:PingReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PingReply)
  return target;
}

size_t PingReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PingReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int64 timestamp = 2;
  if (has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:PingReply)
  GOOGLE_DCHECK_NE(&from, this);
  const PingReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PingReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:PingReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:PingReply)
    MergeFrom(*source);
  }
}

void PingReply::MergeFrom(const PingReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PingReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_timestamp()) {
    set_timestamp(from.timestamp());
  }
}

void PingReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:PingReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingReply::CopyFrom(const PingReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PingReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void PingReply::Swap(PingReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PingReply::InternalSwap(PingReply* other) {
  using std::swap;
  swap(timestamp_, other->timestamp_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PingReply::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PingReply

// required int64 timestamp = 2;
bool PingReply::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PingReply::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void PingReply::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void PingReply::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
::google::protobuf::int64 PingReply::timestamp() const {
  // @@protoc_insertion_point(field_get:PingReply.timestamp)
  return timestamp_;
}
void PingReply::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:PingReply.timestamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddCoinRequest::kTypeFieldNumber;
const int AddCoinRequest::kIdxFieldNumber;
const int AddCoinRequest::kSymbolFieldNumber;
const int AddCoinRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddCoinRequest::AddCoinRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AddCoinRequest)
}
AddCoinRequest::AddCoinRequest(const AddCoinRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_symbol()) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&idx_) -
    reinterpret_cast<char*>(&type_)) + sizeof(idx_));
  // @@protoc_insertion_point(copy_constructor:AddCoinRequest)
}

void AddCoinRequest::SharedCtor() {
  _cached_size_ = 0;
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) -
      reinterpret_cast<char*>(&type_)) + sizeof(idx_));
}

AddCoinRequest::~AddCoinRequest() {
  // @@protoc_insertion_point(destructor:AddCoinRequest)
  SharedDtor();
}

void AddCoinRequest::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AddCoinRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddCoinRequest::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddCoinRequest& AddCoinRequest::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddCoinRequest* AddCoinRequest::New(::google::protobuf::Arena* arena) const {
  AddCoinRequest* n = new AddCoinRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddCoinRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AddCoinRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!symbol_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*symbol_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&idx_) -
        reinterpret_cast<char*>(&type_)) + sizeof(idx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddCoinRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AddCoinRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 idx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string symbol = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AddCoinRequest.symbol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AddCoinRequest.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AddCoinRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AddCoinRequest)
  return false;
#undef DO_
}

void AddCoinRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AddCoinRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 idx = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->idx(), output);
  }

  // required string symbol = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AddCoinRequest.symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->symbol(), output);
  }

  // required string name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AddCoinRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AddCoinRequest)
}

::google::protobuf::uint8* AddCoinRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AddCoinRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 idx = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->idx(), target);
  }

  // required string symbol = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AddCoinRequest.symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->symbol(), target);
  }

  // required string name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AddCoinRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AddCoinRequest)
  return target;
}

size_t AddCoinRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AddCoinRequest)
  size_t total_size = 0;

  if (has_symbol()) {
    // required string symbol = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  if (has_name()) {
    // required string name = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_type()) {
    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_idx()) {
    // required uint32 idx = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idx());
  }

  return total_size;
}
size_t AddCoinRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AddCoinRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string symbol = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());

    // required string name = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 idx = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idx());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddCoinRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AddCoinRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddCoinRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddCoinRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AddCoinRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AddCoinRequest)
    MergeFrom(*source);
  }
}

void AddCoinRequest::MergeFrom(const AddCoinRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AddCoinRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_symbol();
      symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      idx_ = from.idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddCoinRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AddCoinRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCoinRequest::CopyFrom(const AddCoinRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AddCoinRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCoinRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void AddCoinRequest::Swap(AddCoinRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddCoinRequest::InternalSwap(AddCoinRequest* other) {
  using std::swap;
  symbol_.Swap(&other->symbol_);
  name_.Swap(&other->name_);
  swap(type_, other->type_);
  swap(idx_, other->idx_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddCoinRequest::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddCoinRequest

// required uint32 type = 2;
bool AddCoinRequest::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AddCoinRequest::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void AddCoinRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void AddCoinRequest::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 AddCoinRequest::type() const {
  // @@protoc_insertion_point(field_get:AddCoinRequest.type)
  return type_;
}
void AddCoinRequest::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:AddCoinRequest.type)
}

// required uint32 idx = 3;
bool AddCoinRequest::has_idx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AddCoinRequest::set_has_idx() {
  _has_bits_[0] |= 0x00000008u;
}
void AddCoinRequest::clear_has_idx() {
  _has_bits_[0] &= ~0x00000008u;
}
void AddCoinRequest::clear_idx() {
  idx_ = 0u;
  clear_has_idx();
}
::google::protobuf::uint32 AddCoinRequest::idx() const {
  // @@protoc_insertion_point(field_get:AddCoinRequest.idx)
  return idx_;
}
void AddCoinRequest::set_idx(::google::protobuf::uint32 value) {
  set_has_idx();
  idx_ = value;
  // @@protoc_insertion_point(field_set:AddCoinRequest.idx)
}

// required string symbol = 4;
bool AddCoinRequest::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AddCoinRequest::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
void AddCoinRequest::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
void AddCoinRequest::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_symbol();
}
const ::std::string& AddCoinRequest::symbol() const {
  // @@protoc_insertion_point(field_get:AddCoinRequest.symbol)
  return symbol_.GetNoArena();
}
void AddCoinRequest::set_symbol(const ::std::string& value) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AddCoinRequest.symbol)
}
#if LANG_CXX11
void AddCoinRequest::set_symbol(::std::string&& value) {
  set_has_symbol();
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AddCoinRequest.symbol)
}
#endif
void AddCoinRequest::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AddCoinRequest.symbol)
}
void AddCoinRequest::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AddCoinRequest.symbol)
}
::std::string* AddCoinRequest::mutable_symbol() {
  set_has_symbol();
  // @@protoc_insertion_point(field_mutable:AddCoinRequest.symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddCoinRequest::release_symbol() {
  // @@protoc_insertion_point(field_release:AddCoinRequest.symbol)
  clear_has_symbol();
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddCoinRequest::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:AddCoinRequest.symbol)
}

// required string name = 5;
bool AddCoinRequest::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AddCoinRequest::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void AddCoinRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void AddCoinRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& AddCoinRequest::name() const {
  // @@protoc_insertion_point(field_get:AddCoinRequest.name)
  return name_.GetNoArena();
}
void AddCoinRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AddCoinRequest.name)
}
#if LANG_CXX11
void AddCoinRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AddCoinRequest.name)
}
#endif
void AddCoinRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AddCoinRequest.name)
}
void AddCoinRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AddCoinRequest.name)
}
::std::string* AddCoinRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:AddCoinRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddCoinRequest::release_name() {
  // @@protoc_insertion_point(field_release:AddCoinRequest.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddCoinRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AddCoinRequest.name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddCoinReply::AddCoinReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AddCoinReply)
}
AddCoinReply::AddCoinReply(const AddCoinReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AddCoinReply)
}

void AddCoinReply::SharedCtor() {
  _cached_size_ = 0;
}

AddCoinReply::~AddCoinReply() {
  // @@protoc_insertion_point(destructor:AddCoinReply)
  SharedDtor();
}

void AddCoinReply::SharedDtor() {
}

void AddCoinReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddCoinReply::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddCoinReply& AddCoinReply::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddCoinReply* AddCoinReply::New(::google::protobuf::Arena* arena) const {
  AddCoinReply* n = new AddCoinReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddCoinReply::Clear() {
// @@protoc_insertion_point(message_clear_start:AddCoinReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddCoinReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AddCoinReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:AddCoinReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AddCoinReply)
  return false;
#undef DO_
}

void AddCoinReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AddCoinReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AddCoinReply)
}

::google::protobuf::uint8* AddCoinReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AddCoinReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AddCoinReply)
  return target;
}

size_t AddCoinReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AddCoinReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddCoinReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AddCoinReply)
  GOOGLE_DCHECK_NE(&from, this);
  const AddCoinReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddCoinReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AddCoinReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AddCoinReply)
    MergeFrom(*source);
  }
}

void AddCoinReply::MergeFrom(const AddCoinReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AddCoinReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AddCoinReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AddCoinReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCoinReply::CopyFrom(const AddCoinReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AddCoinReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCoinReply::IsInitialized() const {
  return true;
}

void AddCoinReply::Swap(AddCoinReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddCoinReply::InternalSwap(AddCoinReply* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddCoinReply::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddCoinReply

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateAddressRequest::kPasswordFieldNumber;
const int CreateAddressRequest::kTypeFieldNumber;
const int CreateAddressRequest::kIdxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateAddressRequest::CreateAddressRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateAddressRequest)
}
CreateAddressRequest::CreateAddressRequest(const CreateAddressRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&idx_) -
    reinterpret_cast<char*>(&type_)) + sizeof(idx_));
  // @@protoc_insertion_point(copy_constructor:CreateAddressRequest)
}

void CreateAddressRequest::SharedCtor() {
  _cached_size_ = 0;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) -
      reinterpret_cast<char*>(&type_)) + sizeof(idx_));
}

CreateAddressRequest::~CreateAddressRequest() {
  // @@protoc_insertion_point(destructor:CreateAddressRequest)
  SharedDtor();
}

void CreateAddressRequest::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateAddressRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateAddressRequest::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateAddressRequest& CreateAddressRequest::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateAddressRequest* CreateAddressRequest::New(::google::protobuf::Arena* arena) const {
  CreateAddressRequest* n = new CreateAddressRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateAddressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateAddressRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_password()) {
    GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*password_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&idx_) -
        reinterpret_cast<char*>(&type_)) + sizeof(idx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CreateAddressRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateAddressRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string password = 1 [(.nanopb) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CreateAddressRequest.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 idx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateAddressRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateAddressRequest)
  return false;
#undef DO_
}

void CreateAddressRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateAddressRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string password = 1 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CreateAddressRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->password(), output);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 idx = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->idx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateAddressRequest)
}

::google::protobuf::uint8* CreateAddressRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateAddressRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string password = 1 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CreateAddressRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->password(), target);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 idx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->idx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateAddressRequest)
  return target;
}

size_t CreateAddressRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CreateAddressRequest)
  size_t total_size = 0;

  if (has_password()) {
    // required string password = 1 [(.nanopb) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  if (has_type()) {
    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  return total_size;
}
size_t CreateAddressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateAddressRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string password = 1 [(.nanopb) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());

    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 idx = 3;
  if (has_idx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idx());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateAddressRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateAddressRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateAddressRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateAddressRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateAddressRequest)
    MergeFrom(*source);
  }
}

void CreateAddressRequest::MergeFrom(const CreateAddressRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      idx_ = from.idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreateAddressRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAddressRequest::CopyFrom(const CreateAddressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAddressRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CreateAddressRequest::Swap(CreateAddressRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateAddressRequest::InternalSwap(CreateAddressRequest* other) {
  using std::swap;
  password_.Swap(&other->password_);
  swap(type_, other->type_);
  swap(idx_, other->idx_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateAddressRequest::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateAddressRequest

// required string password = 1 [(.nanopb) = {
bool CreateAddressRequest::has_password() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CreateAddressRequest::set_has_password() {
  _has_bits_[0] |= 0x00000001u;
}
void CreateAddressRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000001u;
}
void CreateAddressRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& CreateAddressRequest::password() const {
  // @@protoc_insertion_point(field_get:CreateAddressRequest.password)
  return password_.GetNoArena();
}
void CreateAddressRequest::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateAddressRequest.password)
}
#if LANG_CXX11
void CreateAddressRequest::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateAddressRequest.password)
}
#endif
void CreateAddressRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateAddressRequest.password)
}
void CreateAddressRequest::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateAddressRequest.password)
}
::std::string* CreateAddressRequest::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:CreateAddressRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateAddressRequest::release_password() {
  // @@protoc_insertion_point(field_release:CreateAddressRequest.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateAddressRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:CreateAddressRequest.password)
}

// required uint32 type = 2;
bool CreateAddressRequest::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CreateAddressRequest::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CreateAddressRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CreateAddressRequest::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 CreateAddressRequest::type() const {
  // @@protoc_insertion_point(field_get:CreateAddressRequest.type)
  return type_;
}
void CreateAddressRequest::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CreateAddressRequest.type)
}

// optional uint32 idx = 3;
bool CreateAddressRequest::has_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CreateAddressRequest::set_has_idx() {
  _has_bits_[0] |= 0x00000004u;
}
void CreateAddressRequest::clear_has_idx() {
  _has_bits_[0] &= ~0x00000004u;
}
void CreateAddressRequest::clear_idx() {
  idx_ = 0u;
  clear_has_idx();
}
::google::protobuf::uint32 CreateAddressRequest::idx() const {
  // @@protoc_insertion_point(field_get:CreateAddressRequest.idx)
  return idx_;
}
void CreateAddressRequest::set_idx(::google::protobuf::uint32 value) {
  set_has_idx();
  idx_ = value;
  // @@protoc_insertion_point(field_set:CreateAddressRequest.idx)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateAddressReply::kTypeFieldNumber;
const int CreateAddressReply::kIdxFieldNumber;
const int CreateAddressReply::kAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateAddressReply::CreateAddressReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateAddressReply)
}
CreateAddressReply::CreateAddressReply(const CreateAddressReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&idx_) -
    reinterpret_cast<char*>(&type_)) + sizeof(idx_));
  // @@protoc_insertion_point(copy_constructor:CreateAddressReply)
}

void CreateAddressReply::SharedCtor() {
  _cached_size_ = 0;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) -
      reinterpret_cast<char*>(&type_)) + sizeof(idx_));
}

CreateAddressReply::~CreateAddressReply() {
  // @@protoc_insertion_point(destructor:CreateAddressReply)
  SharedDtor();
}

void CreateAddressReply::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateAddressReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateAddressReply::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateAddressReply& CreateAddressReply::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateAddressReply* CreateAddressReply::New(::google::protobuf::Arena* arena) const {
  CreateAddressReply* n = new CreateAddressReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateAddressReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateAddressReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_address()) {
    GOOGLE_DCHECK(!address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*address_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&idx_) -
        reinterpret_cast<char*>(&type_)) + sizeof(idx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CreateAddressReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateAddressReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 idx = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string address = 3 [(.nanopb) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->address().data(), static_cast<int>(this->address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CreateAddressReply.address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateAddressReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateAddressReply)
  return false;
#undef DO_
}

void CreateAddressReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateAddressReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 idx = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->idx(), output);
  }

  // required string address = 3 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CreateAddressReply.address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateAddressReply)
}

::google::protobuf::uint8* CreateAddressReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateAddressReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 idx = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->idx(), target);
  }

  // required string address = 3 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->address().data(), static_cast<int>(this->address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CreateAddressReply.address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateAddressReply)
  return target;
}

size_t CreateAddressReply::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CreateAddressReply)
  size_t total_size = 0;

  if (has_address()) {
    // required string address = 3 [(.nanopb) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());
  }

  if (has_type()) {
    // required uint32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_idx()) {
    // required uint32 idx = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idx());
  }

  return total_size;
}
size_t CreateAddressReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateAddressReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string address = 3 [(.nanopb) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->address());

    // required uint32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 idx = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idx());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateAddressReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateAddressReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateAddressReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateAddressReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateAddressReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateAddressReply)
    MergeFrom(*source);
  }
}

void CreateAddressReply::MergeFrom(const CreateAddressReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateAddressReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      idx_ = from.idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreateAddressReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateAddressReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateAddressReply::CopyFrom(const CreateAddressReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateAddressReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateAddressReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void CreateAddressReply::Swap(CreateAddressReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateAddressReply::InternalSwap(CreateAddressReply* other) {
  using std::swap;
  address_.Swap(&other->address_);
  swap(type_, other->type_);
  swap(idx_, other->idx_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateAddressReply::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateAddressReply

// required uint32 type = 1;
bool CreateAddressReply::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CreateAddressReply::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CreateAddressReply::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CreateAddressReply::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 CreateAddressReply::type() const {
  // @@protoc_insertion_point(field_get:CreateAddressReply.type)
  return type_;
}
void CreateAddressReply::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CreateAddressReply.type)
}

// required uint32 idx = 2;
bool CreateAddressReply::has_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CreateAddressReply::set_has_idx() {
  _has_bits_[0] |= 0x00000004u;
}
void CreateAddressReply::clear_has_idx() {
  _has_bits_[0] &= ~0x00000004u;
}
void CreateAddressReply::clear_idx() {
  idx_ = 0u;
  clear_has_idx();
}
::google::protobuf::uint32 CreateAddressReply::idx() const {
  // @@protoc_insertion_point(field_get:CreateAddressReply.idx)
  return idx_;
}
void CreateAddressReply::set_idx(::google::protobuf::uint32 value) {
  set_has_idx();
  idx_ = value;
  // @@protoc_insertion_point(field_set:CreateAddressReply.idx)
}

// required string address = 3 [(.nanopb) = {
bool CreateAddressReply::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CreateAddressReply::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
void CreateAddressReply::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
void CreateAddressReply::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
const ::std::string& CreateAddressReply::address() const {
  // @@protoc_insertion_point(field_get:CreateAddressReply.address)
  return address_.GetNoArena();
}
void CreateAddressReply::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateAddressReply.address)
}
#if LANG_CXX11
void CreateAddressReply::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateAddressReply.address)
}
#endif
void CreateAddressReply::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateAddressReply.address)
}
void CreateAddressReply::set_address(const char* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateAddressReply.address)
}
::std::string* CreateAddressReply::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:CreateAddressReply.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateAddressReply::release_address() {
  // @@protoc_insertion_point(field_release:CreateAddressReply.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateAddressReply::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:CreateAddressReply.address)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateSecretRequest::kPasswordFieldNumber;
const int CreateSecretRequest::kTypeFieldNumber;
const int CreateSecretRequest::kSiteFieldNumber;
const int CreateSecretRequest::kAccountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateSecretRequest::CreateSecretRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateSecretRequest)
}
CreateSecretRequest::CreateSecretRequest(const CreateSecretRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_) -
    reinterpret_cast<char*>(&type_)) + sizeof(account_));
  // @@protoc_insertion_point(copy_constructor:CreateSecretRequest)
}

void CreateSecretRequest::SharedCtor() {
  _cached_size_ = 0;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_) -
      reinterpret_cast<char*>(&type_)) + sizeof(account_));
}

CreateSecretRequest::~CreateSecretRequest() {
  // @@protoc_insertion_point(destructor:CreateSecretRequest)
  SharedDtor();
}

void CreateSecretRequest::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateSecretRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateSecretRequest::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateSecretRequest& CreateSecretRequest::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateSecretRequest* CreateSecretRequest::New(::google::protobuf::Arena* arena) const {
  CreateSecretRequest* n = new CreateSecretRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateSecretRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateSecretRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_password()) {
    GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*password_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 14u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&account_) -
        reinterpret_cast<char*>(&type_)) + sizeof(account_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CreateSecretRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateSecretRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string password = 1 [(.nanopb) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CreateSecretRequest.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 site = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_site();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 account = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_account();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateSecretRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateSecretRequest)
  return false;
#undef DO_
}

void CreateSecretRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateSecretRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string password = 1 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CreateSecretRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->password(), output);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 site = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->site(), output);
  }

  // required uint32 account = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->account(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateSecretRequest)
}

::google::protobuf::uint8* CreateSecretRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateSecretRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string password = 1 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CreateSecretRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->password(), target);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 site = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->site(), target);
  }

  // required uint32 account = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->account(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateSecretRequest)
  return target;
}

size_t CreateSecretRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CreateSecretRequest)
  size_t total_size = 0;

  if (has_password()) {
    // required string password = 1 [(.nanopb) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  if (has_type()) {
    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_site()) {
    // required uint32 site = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->site());
  }

  if (has_account()) {
    // required uint32 account = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account());
  }

  return total_size;
}
size_t CreateSecretRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateSecretRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string password = 1 [(.nanopb) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());

    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 site = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->site());

    // required uint32 account = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSecretRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateSecretRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSecretRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateSecretRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateSecretRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateSecretRequest)
    MergeFrom(*source);
  }
}

void CreateSecretRequest::MergeFrom(const CreateSecretRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateSecretRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      site_ = from.site_;
    }
    if (cached_has_bits & 0x00000008u) {
      account_ = from.account_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreateSecretRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateSecretRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSecretRequest::CopyFrom(const CreateSecretRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateSecretRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSecretRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void CreateSecretRequest::Swap(CreateSecretRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateSecretRequest::InternalSwap(CreateSecretRequest* other) {
  using std::swap;
  password_.Swap(&other->password_);
  swap(type_, other->type_);
  swap(site_, other->site_);
  swap(account_, other->account_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateSecretRequest::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateSecretRequest

// required string password = 1 [(.nanopb) = {
bool CreateSecretRequest::has_password() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CreateSecretRequest::set_has_password() {
  _has_bits_[0] |= 0x00000001u;
}
void CreateSecretRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000001u;
}
void CreateSecretRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& CreateSecretRequest::password() const {
  // @@protoc_insertion_point(field_get:CreateSecretRequest.password)
  return password_.GetNoArena();
}
void CreateSecretRequest::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateSecretRequest.password)
}
#if LANG_CXX11
void CreateSecretRequest::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateSecretRequest.password)
}
#endif
void CreateSecretRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateSecretRequest.password)
}
void CreateSecretRequest::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateSecretRequest.password)
}
::std::string* CreateSecretRequest::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:CreateSecretRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateSecretRequest::release_password() {
  // @@protoc_insertion_point(field_release:CreateSecretRequest.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateSecretRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:CreateSecretRequest.password)
}

// required uint32 type = 2;
bool CreateSecretRequest::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CreateSecretRequest::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CreateSecretRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CreateSecretRequest::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 CreateSecretRequest::type() const {
  // @@protoc_insertion_point(field_get:CreateSecretRequest.type)
  return type_;
}
void CreateSecretRequest::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CreateSecretRequest.type)
}

// required uint32 site = 3;
bool CreateSecretRequest::has_site() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CreateSecretRequest::set_has_site() {
  _has_bits_[0] |= 0x00000004u;
}
void CreateSecretRequest::clear_has_site() {
  _has_bits_[0] &= ~0x00000004u;
}
void CreateSecretRequest::clear_site() {
  site_ = 0u;
  clear_has_site();
}
::google::protobuf::uint32 CreateSecretRequest::site() const {
  // @@protoc_insertion_point(field_get:CreateSecretRequest.site)
  return site_;
}
void CreateSecretRequest::set_site(::google::protobuf::uint32 value) {
  set_has_site();
  site_ = value;
  // @@protoc_insertion_point(field_set:CreateSecretRequest.site)
}

// required uint32 account = 4;
bool CreateSecretRequest::has_account() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CreateSecretRequest::set_has_account() {
  _has_bits_[0] |= 0x00000008u;
}
void CreateSecretRequest::clear_has_account() {
  _has_bits_[0] &= ~0x00000008u;
}
void CreateSecretRequest::clear_account() {
  account_ = 0u;
  clear_has_account();
}
::google::protobuf::uint32 CreateSecretRequest::account() const {
  // @@protoc_insertion_point(field_get:CreateSecretRequest.account)
  return account_;
}
void CreateSecretRequest::set_account(::google::protobuf::uint32 value) {
  set_has_account();
  account_ = value;
  // @@protoc_insertion_point(field_set:CreateSecretRequest.account)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateSecretReply::kTypeFieldNumber;
const int CreateSecretReply::kSiteFieldNumber;
const int CreateSecretReply::kAccountFieldNumber;
const int CreateSecretReply::kIndexFieldNumber;
const int CreateSecretReply::kSecretFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateSecretReply::CreateSecretReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CreateSecretReply)
}
CreateSecretReply::CreateSecretReply(const CreateSecretReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secret()) {
    secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&type_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:CreateSecretReply)
}

void CreateSecretReply::SharedCtor() {
  _cached_size_ = 0;
  secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&type_)) + sizeof(index_));
}

CreateSecretReply::~CreateSecretReply() {
  // @@protoc_insertion_point(destructor:CreateSecretReply)
  SharedDtor();
}

void CreateSecretReply::SharedDtor() {
  secret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateSecretReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateSecretReply::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateSecretReply& CreateSecretReply::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateSecretReply* CreateSecretReply::New(::google::protobuf::Arena* arena) const {
  CreateSecretReply* n = new CreateSecretReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateSecretReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CreateSecretReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_secret()) {
    GOOGLE_DCHECK(!secret_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*secret_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 30u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&index_) -
        reinterpret_cast<char*>(&type_)) + sizeof(index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CreateSecretReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CreateSecretReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 site = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_site();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_account();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes secret = 5 [(.nanopb) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CreateSecretReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CreateSecretReply)
  return false;
#undef DO_
}

void CreateSecretReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CreateSecretReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 site = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->site(), output);
  }

  // required uint32 account = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->account(), output);
  }

  // required uint32 index = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->index(), output);
  }

  // required bytes secret = 5 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->secret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CreateSecretReply)
}

::google::protobuf::uint8* CreateSecretReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CreateSecretReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 site = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->site(), target);
  }

  // required uint32 account = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->account(), target);
  }

  // required uint32 index = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->index(), target);
  }

  // required bytes secret = 5 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->secret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CreateSecretReply)
  return target;
}

size_t CreateSecretReply::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CreateSecretReply)
  size_t total_size = 0;

  if (has_secret()) {
    // required bytes secret = 5 [(.nanopb) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->secret());
  }

  if (has_type()) {
    // required uint32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_site()) {
    // required uint32 site = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->site());
  }

  if (has_account()) {
    // required uint32 account = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account());
  }

  if (has_index()) {
    // required uint32 index = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  return total_size;
}
size_t CreateSecretReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CreateSecretReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes secret = 5 [(.nanopb) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->secret());

    // required uint32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 site = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->site());

    // required uint32 account = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account());

    // required uint32 index = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSecretReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CreateSecretReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSecretReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateSecretReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CreateSecretReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CreateSecretReply)
    MergeFrom(*source);
  }
}

void CreateSecretReply::MergeFrom(const CreateSecretReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CreateSecretReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_secret();
      secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      site_ = from.site_;
    }
    if (cached_has_bits & 0x00000008u) {
      account_ = from.account_;
    }
    if (cached_has_bits & 0x00000010u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CreateSecretReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CreateSecretReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSecretReply::CopyFrom(const CreateSecretReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CreateSecretReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSecretReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void CreateSecretReply::Swap(CreateSecretReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateSecretReply::InternalSwap(CreateSecretReply* other) {
  using std::swap;
  secret_.Swap(&other->secret_);
  swap(type_, other->type_);
  swap(site_, other->site_);
  swap(account_, other->account_);
  swap(index_, other->index_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateSecretReply::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateSecretReply

// required uint32 type = 1;
bool CreateSecretReply::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CreateSecretReply::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CreateSecretReply::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CreateSecretReply::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 CreateSecretReply::type() const {
  // @@protoc_insertion_point(field_get:CreateSecretReply.type)
  return type_;
}
void CreateSecretReply::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:CreateSecretReply.type)
}

// required uint32 site = 2;
bool CreateSecretReply::has_site() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CreateSecretReply::set_has_site() {
  _has_bits_[0] |= 0x00000004u;
}
void CreateSecretReply::clear_has_site() {
  _has_bits_[0] &= ~0x00000004u;
}
void CreateSecretReply::clear_site() {
  site_ = 0u;
  clear_has_site();
}
::google::protobuf::uint32 CreateSecretReply::site() const {
  // @@protoc_insertion_point(field_get:CreateSecretReply.site)
  return site_;
}
void CreateSecretReply::set_site(::google::protobuf::uint32 value) {
  set_has_site();
  site_ = value;
  // @@protoc_insertion_point(field_set:CreateSecretReply.site)
}

// required uint32 account = 3;
bool CreateSecretReply::has_account() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CreateSecretReply::set_has_account() {
  _has_bits_[0] |= 0x00000008u;
}
void CreateSecretReply::clear_has_account() {
  _has_bits_[0] &= ~0x00000008u;
}
void CreateSecretReply::clear_account() {
  account_ = 0u;
  clear_has_account();
}
::google::protobuf::uint32 CreateSecretReply::account() const {
  // @@protoc_insertion_point(field_get:CreateSecretReply.account)
  return account_;
}
void CreateSecretReply::set_account(::google::protobuf::uint32 value) {
  set_has_account();
  account_ = value;
  // @@protoc_insertion_point(field_set:CreateSecretReply.account)
}

// required uint32 index = 4;
bool CreateSecretReply::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CreateSecretReply::set_has_index() {
  _has_bits_[0] |= 0x00000010u;
}
void CreateSecretReply::clear_has_index() {
  _has_bits_[0] &= ~0x00000010u;
}
void CreateSecretReply::clear_index() {
  index_ = 0u;
  clear_has_index();
}
::google::protobuf::uint32 CreateSecretReply::index() const {
  // @@protoc_insertion_point(field_get:CreateSecretReply.index)
  return index_;
}
void CreateSecretReply::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:CreateSecretReply.index)
}

// required bytes secret = 5 [(.nanopb) = {
bool CreateSecretReply::has_secret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CreateSecretReply::set_has_secret() {
  _has_bits_[0] |= 0x00000001u;
}
void CreateSecretReply::clear_has_secret() {
  _has_bits_[0] &= ~0x00000001u;
}
void CreateSecretReply::clear_secret() {
  secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_secret();
}
const ::std::string& CreateSecretReply::secret() const {
  // @@protoc_insertion_point(field_get:CreateSecretReply.secret)
  return secret_.GetNoArena();
}
void CreateSecretReply::set_secret(const ::std::string& value) {
  set_has_secret();
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CreateSecretReply.secret)
}
#if LANG_CXX11
void CreateSecretReply::set_secret(::std::string&& value) {
  set_has_secret();
  secret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:CreateSecretReply.secret)
}
#endif
void CreateSecretReply::set_secret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_secret();
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CreateSecretReply.secret)
}
void CreateSecretReply::set_secret(const void* value, size_t size) {
  set_has_secret();
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CreateSecretReply.secret)
}
::std::string* CreateSecretReply::mutable_secret() {
  set_has_secret();
  // @@protoc_insertion_point(field_mutable:CreateSecretReply.secret)
  return secret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateSecretReply::release_secret() {
  // @@protoc_insertion_point(field_release:CreateSecretReply.secret)
  clear_has_secret();
  return secret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateSecretReply::set_allocated_secret(::std::string* secret) {
  if (secret != NULL) {
    set_has_secret();
  } else {
    clear_has_secret();
  }
  secret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:CreateSecretReply.secret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddSecretRequest::kPasswordFieldNumber;
const int AddSecretRequest::kTypeFieldNumber;
const int AddSecretRequest::kSiteFieldNumber;
const int AddSecretRequest::kAccountFieldNumber;
const int AddSecretRequest::kSecretFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddSecretRequest::AddSecretRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AddSecretRequest)
}
AddSecretRequest::AddSecretRequest(const AddSecretRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secret()) {
    secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&account_) -
    reinterpret_cast<char*>(&type_)) + sizeof(account_));
  // @@protoc_insertion_point(copy_constructor:AddSecretRequest)
}

void AddSecretRequest::SharedCtor() {
  _cached_size_ = 0;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&account_) -
      reinterpret_cast<char*>(&type_)) + sizeof(account_));
}

AddSecretRequest::~AddSecretRequest() {
  // @@protoc_insertion_point(destructor:AddSecretRequest)
  SharedDtor();
}

void AddSecretRequest::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AddSecretRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddSecretRequest::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddSecretRequest& AddSecretRequest::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddSecretRequest* AddSecretRequest::New(::google::protobuf::Arena* arena) const {
  AddSecretRequest* n = new AddSecretRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddSecretRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:AddSecretRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!secret_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*secret_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&account_) -
        reinterpret_cast<char*>(&type_)) + sizeof(account_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddSecretRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AddSecretRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string password = 1 [(.nanopb) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "AddSecretRequest.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 site = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_site();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 account = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_account();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes secret = 5 [(.nanopb) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AddSecretRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AddSecretRequest)
  return false;
#undef DO_
}

void AddSecretRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AddSecretRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string password = 1 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AddSecretRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->password(), output);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 site = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->site(), output);
  }

  // required uint32 account = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->account(), output);
  }

  // required bytes secret = 5 [(.nanopb) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->secret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AddSecretRequest)
}

::google::protobuf::uint8* AddSecretRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AddSecretRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string password = 1 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "AddSecretRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->password(), target);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 site = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->site(), target);
  }

  // required uint32 account = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->account(), target);
  }

  // required bytes secret = 5 [(.nanopb) = {
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->secret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AddSecretRequest)
  return target;
}

size_t AddSecretRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AddSecretRequest)
  size_t total_size = 0;

  if (has_password()) {
    // required string password = 1 [(.nanopb) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  if (has_secret()) {
    // required bytes secret = 5 [(.nanopb) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->secret());
  }

  if (has_type()) {
    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_site()) {
    // required uint32 site = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->site());
  }

  if (has_account()) {
    // required uint32 account = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account());
  }

  return total_size;
}
size_t AddSecretRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AddSecretRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string password = 1 [(.nanopb) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());

    // required bytes secret = 5 [(.nanopb) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->secret());

    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 site = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->site());

    // required uint32 account = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddSecretRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AddSecretRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddSecretRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddSecretRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AddSecretRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AddSecretRequest)
    MergeFrom(*source);
  }
}

void AddSecretRequest::MergeFrom(const AddSecretRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AddSecretRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_secret();
      secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_);
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      site_ = from.site_;
    }
    if (cached_has_bits & 0x00000010u) {
      account_ = from.account_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddSecretRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AddSecretRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddSecretRequest::CopyFrom(const AddSecretRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AddSecretRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddSecretRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void AddSecretRequest::Swap(AddSecretRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddSecretRequest::InternalSwap(AddSecretRequest* other) {
  using std::swap;
  password_.Swap(&other->password_);
  secret_.Swap(&other->secret_);
  swap(type_, other->type_);
  swap(site_, other->site_);
  swap(account_, other->account_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddSecretRequest::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddSecretRequest

// required string password = 1 [(.nanopb) = {
bool AddSecretRequest::has_password() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AddSecretRequest::set_has_password() {
  _has_bits_[0] |= 0x00000001u;
}
void AddSecretRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000001u;
}
void AddSecretRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& AddSecretRequest::password() const {
  // @@protoc_insertion_point(field_get:AddSecretRequest.password)
  return password_.GetNoArena();
}
void AddSecretRequest::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AddSecretRequest.password)
}
#if LANG_CXX11
void AddSecretRequest::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AddSecretRequest.password)
}
#endif
void AddSecretRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AddSecretRequest.password)
}
void AddSecretRequest::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AddSecretRequest.password)
}
::std::string* AddSecretRequest::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:AddSecretRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddSecretRequest::release_password() {
  // @@protoc_insertion_point(field_release:AddSecretRequest.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddSecretRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:AddSecretRequest.password)
}

// required uint32 type = 2;
bool AddSecretRequest::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AddSecretRequest::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void AddSecretRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void AddSecretRequest::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 AddSecretRequest::type() const {
  // @@protoc_insertion_point(field_get:AddSecretRequest.type)
  return type_;
}
void AddSecretRequest::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:AddSecretRequest.type)
}

// required uint32 site = 3;
bool AddSecretRequest::has_site() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AddSecretRequest::set_has_site() {
  _has_bits_[0] |= 0x00000008u;
}
void AddSecretRequest::clear_has_site() {
  _has_bits_[0] &= ~0x00000008u;
}
void AddSecretRequest::clear_site() {
  site_ = 0u;
  clear_has_site();
}
::google::protobuf::uint32 AddSecretRequest::site() const {
  // @@protoc_insertion_point(field_get:AddSecretRequest.site)
  return site_;
}
void AddSecretRequest::set_site(::google::protobuf::uint32 value) {
  set_has_site();
  site_ = value;
  // @@protoc_insertion_point(field_set:AddSecretRequest.site)
}

// required uint32 account = 4;
bool AddSecretRequest::has_account() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AddSecretRequest::set_has_account() {
  _has_bits_[0] |= 0x00000010u;
}
void AddSecretRequest::clear_has_account() {
  _has_bits_[0] &= ~0x00000010u;
}
void AddSecretRequest::clear_account() {
  account_ = 0u;
  clear_has_account();
}
::google::protobuf::uint32 AddSecretRequest::account() const {
  // @@protoc_insertion_point(field_get:AddSecretRequest.account)
  return account_;
}
void AddSecretRequest::set_account(::google::protobuf::uint32 value) {
  set_has_account();
  account_ = value;
  // @@protoc_insertion_point(field_set:AddSecretRequest.account)
}

// required bytes secret = 5 [(.nanopb) = {
bool AddSecretRequest::has_secret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AddSecretRequest::set_has_secret() {
  _has_bits_[0] |= 0x00000002u;
}
void AddSecretRequest::clear_has_secret() {
  _has_bits_[0] &= ~0x00000002u;
}
void AddSecretRequest::clear_secret() {
  secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_secret();
}
const ::std::string& AddSecretRequest::secret() const {
  // @@protoc_insertion_point(field_get:AddSecretRequest.secret)
  return secret_.GetNoArena();
}
void AddSecretRequest::set_secret(const ::std::string& value) {
  set_has_secret();
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AddSecretRequest.secret)
}
#if LANG_CXX11
void AddSecretRequest::set_secret(::std::string&& value) {
  set_has_secret();
  secret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AddSecretRequest.secret)
}
#endif
void AddSecretRequest::set_secret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_secret();
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AddSecretRequest.secret)
}
void AddSecretRequest::set_secret(const void* value, size_t size) {
  set_has_secret();
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AddSecretRequest.secret)
}
::std::string* AddSecretRequest::mutable_secret() {
  set_has_secret();
  // @@protoc_insertion_point(field_mutable:AddSecretRequest.secret)
  return secret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddSecretRequest::release_secret() {
  // @@protoc_insertion_point(field_release:AddSecretRequest.secret)
  clear_has_secret();
  return secret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddSecretRequest::set_allocated_secret(::std::string* secret) {
  if (secret != NULL) {
    set_has_secret();
  } else {
    clear_has_secret();
  }
  secret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:AddSecretRequest.secret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddSecretReply::kTypeFieldNumber;
const int AddSecretReply::kSiteFieldNumber;
const int AddSecretReply::kAccountFieldNumber;
const int AddSecretReply::kIdxFieldNumber;
const int AddSecretReply::kSecretFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddSecretReply::AddSecretReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:AddSecretReply)
}
AddSecretReply::AddSecretReply(const AddSecretReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_secret()) {
    secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&idx_) -
    reinterpret_cast<char*>(&type_)) + sizeof(idx_));
  // @@protoc_insertion_point(copy_constructor:AddSecretReply)
}

void AddSecretReply::SharedCtor() {
  _cached_size_ = 0;
  secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) -
      reinterpret_cast<char*>(&type_)) + sizeof(idx_));
}

AddSecretReply::~AddSecretReply() {
  // @@protoc_insertion_point(destructor:AddSecretReply)
  SharedDtor();
}

void AddSecretReply::SharedDtor() {
  secret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AddSecretReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddSecretReply::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddSecretReply& AddSecretReply::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

AddSecretReply* AddSecretReply::New(::google::protobuf::Arena* arena) const {
  AddSecretReply* n = new AddSecretReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddSecretReply::Clear() {
// @@protoc_insertion_point(message_clear_start:AddSecretReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_secret()) {
    GOOGLE_DCHECK(!secret_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*secret_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 30u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&idx_) -
        reinterpret_cast<char*>(&type_)) + sizeof(idx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddSecretReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AddSecretReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 site = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_site();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_account();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 idx = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes secret = 5 [(.nanopb) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AddSecretReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AddSecretReply)
  return false;
#undef DO_
}

void AddSecretReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AddSecretReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 site = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->site(), output);
  }

  // required uint32 account = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->account(), output);
  }

  // required uint32 idx = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->idx(), output);
  }

  // required bytes secret = 5 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->secret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:AddSecretReply)
}

::google::protobuf::uint8* AddSecretReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AddSecretReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 site = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->site(), target);
  }

  // required uint32 account = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->account(), target);
  }

  // required uint32 idx = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->idx(), target);
  }

  // required bytes secret = 5 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->secret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AddSecretReply)
  return target;
}

size_t AddSecretReply::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:AddSecretReply)
  size_t total_size = 0;

  if (has_secret()) {
    // required bytes secret = 5 [(.nanopb) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->secret());
  }

  if (has_type()) {
    // required uint32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_site()) {
    // required uint32 site = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->site());
  }

  if (has_account()) {
    // required uint32 account = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account());
  }

  if (has_idx()) {
    // required uint32 idx = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idx());
  }

  return total_size;
}
size_t AddSecretReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AddSecretReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes secret = 5 [(.nanopb) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->secret());

    // required uint32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 site = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->site());

    // required uint32 account = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account());

    // required uint32 idx = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idx());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddSecretReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AddSecretReply)
  GOOGLE_DCHECK_NE(&from, this);
  const AddSecretReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddSecretReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AddSecretReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AddSecretReply)
    MergeFrom(*source);
  }
}

void AddSecretReply::MergeFrom(const AddSecretReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AddSecretReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_secret();
      secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      site_ = from.site_;
    }
    if (cached_has_bits & 0x00000008u) {
      account_ = from.account_;
    }
    if (cached_has_bits & 0x00000010u) {
      idx_ = from.idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AddSecretReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AddSecretReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddSecretReply::CopyFrom(const AddSecretReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AddSecretReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddSecretReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void AddSecretReply::Swap(AddSecretReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddSecretReply::InternalSwap(AddSecretReply* other) {
  using std::swap;
  secret_.Swap(&other->secret_);
  swap(type_, other->type_);
  swap(site_, other->site_);
  swap(account_, other->account_);
  swap(idx_, other->idx_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddSecretReply::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddSecretReply

// required uint32 type = 1;
bool AddSecretReply::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AddSecretReply::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void AddSecretReply::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void AddSecretReply::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 AddSecretReply::type() const {
  // @@protoc_insertion_point(field_get:AddSecretReply.type)
  return type_;
}
void AddSecretReply::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:AddSecretReply.type)
}

// required uint32 site = 2;
bool AddSecretReply::has_site() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AddSecretReply::set_has_site() {
  _has_bits_[0] |= 0x00000004u;
}
void AddSecretReply::clear_has_site() {
  _has_bits_[0] &= ~0x00000004u;
}
void AddSecretReply::clear_site() {
  site_ = 0u;
  clear_has_site();
}
::google::protobuf::uint32 AddSecretReply::site() const {
  // @@protoc_insertion_point(field_get:AddSecretReply.site)
  return site_;
}
void AddSecretReply::set_site(::google::protobuf::uint32 value) {
  set_has_site();
  site_ = value;
  // @@protoc_insertion_point(field_set:AddSecretReply.site)
}

// required uint32 account = 3;
bool AddSecretReply::has_account() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AddSecretReply::set_has_account() {
  _has_bits_[0] |= 0x00000008u;
}
void AddSecretReply::clear_has_account() {
  _has_bits_[0] &= ~0x00000008u;
}
void AddSecretReply::clear_account() {
  account_ = 0u;
  clear_has_account();
}
::google::protobuf::uint32 AddSecretReply::account() const {
  // @@protoc_insertion_point(field_get:AddSecretReply.account)
  return account_;
}
void AddSecretReply::set_account(::google::protobuf::uint32 value) {
  set_has_account();
  account_ = value;
  // @@protoc_insertion_point(field_set:AddSecretReply.account)
}

// required uint32 idx = 4;
bool AddSecretReply::has_idx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AddSecretReply::set_has_idx() {
  _has_bits_[0] |= 0x00000010u;
}
void AddSecretReply::clear_has_idx() {
  _has_bits_[0] &= ~0x00000010u;
}
void AddSecretReply::clear_idx() {
  idx_ = 0u;
  clear_has_idx();
}
::google::protobuf::uint32 AddSecretReply::idx() const {
  // @@protoc_insertion_point(field_get:AddSecretReply.idx)
  return idx_;
}
void AddSecretReply::set_idx(::google::protobuf::uint32 value) {
  set_has_idx();
  idx_ = value;
  // @@protoc_insertion_point(field_set:AddSecretReply.idx)
}

// required bytes secret = 5 [(.nanopb) = {
bool AddSecretReply::has_secret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AddSecretReply::set_has_secret() {
  _has_bits_[0] |= 0x00000001u;
}
void AddSecretReply::clear_has_secret() {
  _has_bits_[0] &= ~0x00000001u;
}
void AddSecretReply::clear_secret() {
  secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_secret();
}
const ::std::string& AddSecretReply::secret() const {
  // @@protoc_insertion_point(field_get:AddSecretReply.secret)
  return secret_.GetNoArena();
}
void AddSecretReply::set_secret(const ::std::string& value) {
  set_has_secret();
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:AddSecretReply.secret)
}
#if LANG_CXX11
void AddSecretReply::set_secret(::std::string&& value) {
  set_has_secret();
  secret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AddSecretReply.secret)
}
#endif
void AddSecretReply::set_secret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_secret();
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AddSecretReply.secret)
}
void AddSecretReply::set_secret(const void* value, size_t size) {
  set_has_secret();
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AddSecretReply.secret)
}
::std::string* AddSecretReply::mutable_secret() {
  set_has_secret();
  // @@protoc_insertion_point(field_mutable:AddSecretReply.secret)
  return secret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AddSecretReply::release_secret() {
  // @@protoc_insertion_point(field_release:AddSecretReply.secret)
  clear_has_secret();
  return secret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AddSecretReply::set_allocated_secret(::std::string* secret) {
  if (secret != NULL) {
    set_has_secret();
  } else {
    clear_has_secret();
  }
  secret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:AddSecretReply.secret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignTxRequest::kPasswordFieldNumber;
const int SignTxRequest::kTypeFieldNumber;
const int SignTxRequest::kIdxFieldNumber;
const int SignTxRequest::kAmountFieldNumber;
const int SignTxRequest::kDestFieldNumber;
const int SignTxRequest::kTxHashFieldNumber;
const int SignTxRequest::kTxIdxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignTxRequest::SignTxRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SignTxRequest)
}
SignTxRequest::SignTxRequest(const SignTxRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  dest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dest()) {
    dest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_);
  }
  tx_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tx_hash()) {
    tx_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_hash_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&tx_idx_) -
    reinterpret_cast<char*>(&type_)) + sizeof(tx_idx_));
  // @@protoc_insertion_point(copy_constructor:SignTxRequest)
}

void SignTxRequest::SharedCtor() {
  _cached_size_ = 0;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tx_hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tx_idx_) -
      reinterpret_cast<char*>(&type_)) + sizeof(tx_idx_));
}

SignTxRequest::~SignTxRequest() {
  // @@protoc_insertion_point(destructor:SignTxRequest)
  SharedDtor();
}

void SignTxRequest::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dest_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tx_hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SignTxRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignTxRequest::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignTxRequest& SignTxRequest::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

SignTxRequest* SignTxRequest::New(::google::protobuf::Arena* arena) const {
  SignTxRequest* n = new SignTxRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignTxRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SignTxRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!dest_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*dest_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!tx_hash_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*tx_hash_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 120u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tx_idx_) -
        reinterpret_cast<char*>(&type_)) + sizeof(tx_idx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SignTxRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SignTxRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string password = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SignTxRequest.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 idx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint64 amount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_amount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &amount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string dest = 5 [(.nanopb) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dest().data(), static_cast<int>(this->dest().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SignTxRequest.dest");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes tx_hash = 6 [(.nanopb) = {
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tx_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 tx_idx = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_tx_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tx_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SignTxRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SignTxRequest)
  return false;
#undef DO_
}

void SignTxRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SignTxRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SignTxRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->password(), output);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 idx = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->idx(), output);
  }

  // required uint64 amount = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->amount(), output);
  }

  // required string dest = 5 [(.nanopb) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest().data(), static_cast<int>(this->dest().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SignTxRequest.dest");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->dest(), output);
  }

  // required bytes tx_hash = 6 [(.nanopb) = {
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->tx_hash(), output);
  }

  // required uint32 tx_idx = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tx_idx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SignTxRequest)
}

::google::protobuf::uint8* SignTxRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SignTxRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SignTxRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->password(), target);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 idx = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->idx(), target);
  }

  // required uint64 amount = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->amount(), target);
  }

  // required string dest = 5 [(.nanopb) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest().data(), static_cast<int>(this->dest().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SignTxRequest.dest");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->dest(), target);
  }

  // required bytes tx_hash = 6 [(.nanopb) = {
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->tx_hash(), target);
  }

  // required uint32 tx_idx = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tx_idx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SignTxRequest)
  return target;
}

size_t SignTxRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SignTxRequest)
  size_t total_size = 0;

  if (has_password()) {
    // required string password = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  if (has_dest()) {
    // required string dest = 5 [(.nanopb) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dest());
  }

  if (has_tx_hash()) {
    // required bytes tx_hash = 6 [(.nanopb) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tx_hash());
  }

  if (has_type()) {
    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_idx()) {
    // required uint32 idx = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idx());
  }

  if (has_amount()) {
    // required uint64 amount = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->amount());
  }

  if (has_tx_idx()) {
    // required uint32 tx_idx = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tx_idx());
  }

  return total_size;
}
size_t SignTxRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SignTxRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string password = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());

    // required string dest = 5 [(.nanopb) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dest());

    // required bytes tx_hash = 6 [(.nanopb) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tx_hash());

    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 idx = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idx());

    // required uint64 amount = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->amount());

    // required uint32 tx_idx = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tx_idx());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignTxRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SignTxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SignTxRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignTxRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SignTxRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SignTxRequest)
    MergeFrom(*source);
  }
}

void SignTxRequest::MergeFrom(const SignTxRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SignTxRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_dest();
      dest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dest_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_tx_hash();
      tx_hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tx_hash_);
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      idx_ = from.idx_;
    }
    if (cached_has_bits & 0x00000020u) {
      amount_ = from.amount_;
    }
    if (cached_has_bits & 0x00000040u) {
      tx_idx_ = from.tx_idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SignTxRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SignTxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignTxRequest::CopyFrom(const SignTxRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SignTxRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignTxRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  return true;
}

void SignTxRequest::Swap(SignTxRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignTxRequest::InternalSwap(SignTxRequest* other) {
  using std::swap;
  password_.Swap(&other->password_);
  dest_.Swap(&other->dest_);
  tx_hash_.Swap(&other->tx_hash_);
  swap(type_, other->type_);
  swap(idx_, other->idx_);
  swap(amount_, other->amount_);
  swap(tx_idx_, other->tx_idx_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignTxRequest::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignTxRequest

// required string password = 1;
bool SignTxRequest::has_password() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SignTxRequest::set_has_password() {
  _has_bits_[0] |= 0x00000001u;
}
void SignTxRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000001u;
}
void SignTxRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& SignTxRequest::password() const {
  // @@protoc_insertion_point(field_get:SignTxRequest.password)
  return password_.GetNoArena();
}
void SignTxRequest::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignTxRequest.password)
}
#if LANG_CXX11
void SignTxRequest::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignTxRequest.password)
}
#endif
void SignTxRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignTxRequest.password)
}
void SignTxRequest::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignTxRequest.password)
}
::std::string* SignTxRequest::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:SignTxRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignTxRequest::release_password() {
  // @@protoc_insertion_point(field_release:SignTxRequest.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignTxRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:SignTxRequest.password)
}

// required uint32 type = 2;
bool SignTxRequest::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SignTxRequest::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void SignTxRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void SignTxRequest::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 SignTxRequest::type() const {
  // @@protoc_insertion_point(field_get:SignTxRequest.type)
  return type_;
}
void SignTxRequest::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:SignTxRequest.type)
}

// required uint32 idx = 3;
bool SignTxRequest::has_idx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SignTxRequest::set_has_idx() {
  _has_bits_[0] |= 0x00000010u;
}
void SignTxRequest::clear_has_idx() {
  _has_bits_[0] &= ~0x00000010u;
}
void SignTxRequest::clear_idx() {
  idx_ = 0u;
  clear_has_idx();
}
::google::protobuf::uint32 SignTxRequest::idx() const {
  // @@protoc_insertion_point(field_get:SignTxRequest.idx)
  return idx_;
}
void SignTxRequest::set_idx(::google::protobuf::uint32 value) {
  set_has_idx();
  idx_ = value;
  // @@protoc_insertion_point(field_set:SignTxRequest.idx)
}

// required uint64 amount = 4;
bool SignTxRequest::has_amount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SignTxRequest::set_has_amount() {
  _has_bits_[0] |= 0x00000020u;
}
void SignTxRequest::clear_has_amount() {
  _has_bits_[0] &= ~0x00000020u;
}
void SignTxRequest::clear_amount() {
  amount_ = GOOGLE_ULONGLONG(0);
  clear_has_amount();
}
::google::protobuf::uint64 SignTxRequest::amount() const {
  // @@protoc_insertion_point(field_get:SignTxRequest.amount)
  return amount_;
}
void SignTxRequest::set_amount(::google::protobuf::uint64 value) {
  set_has_amount();
  amount_ = value;
  // @@protoc_insertion_point(field_set:SignTxRequest.amount)
}

// required string dest = 5 [(.nanopb) = {
bool SignTxRequest::has_dest() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SignTxRequest::set_has_dest() {
  _has_bits_[0] |= 0x00000002u;
}
void SignTxRequest::clear_has_dest() {
  _has_bits_[0] &= ~0x00000002u;
}
void SignTxRequest::clear_dest() {
  dest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dest();
}
const ::std::string& SignTxRequest::dest() const {
  // @@protoc_insertion_point(field_get:SignTxRequest.dest)
  return dest_.GetNoArena();
}
void SignTxRequest::set_dest(const ::std::string& value) {
  set_has_dest();
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignTxRequest.dest)
}
#if LANG_CXX11
void SignTxRequest::set_dest(::std::string&& value) {
  set_has_dest();
  dest_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignTxRequest.dest)
}
#endif
void SignTxRequest::set_dest(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_dest();
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignTxRequest.dest)
}
void SignTxRequest::set_dest(const char* value, size_t size) {
  set_has_dest();
  dest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignTxRequest.dest)
}
::std::string* SignTxRequest::mutable_dest() {
  set_has_dest();
  // @@protoc_insertion_point(field_mutable:SignTxRequest.dest)
  return dest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignTxRequest::release_dest() {
  // @@protoc_insertion_point(field_release:SignTxRequest.dest)
  clear_has_dest();
  return dest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignTxRequest::set_allocated_dest(::std::string* dest) {
  if (dest != NULL) {
    set_has_dest();
  } else {
    clear_has_dest();
  }
  dest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dest);
  // @@protoc_insertion_point(field_set_allocated:SignTxRequest.dest)
}

// required bytes tx_hash = 6 [(.nanopb) = {
bool SignTxRequest::has_tx_hash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SignTxRequest::set_has_tx_hash() {
  _has_bits_[0] |= 0x00000004u;
}
void SignTxRequest::clear_has_tx_hash() {
  _has_bits_[0] &= ~0x00000004u;
}
void SignTxRequest::clear_tx_hash() {
  tx_hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tx_hash();
}
const ::std::string& SignTxRequest::tx_hash() const {
  // @@protoc_insertion_point(field_get:SignTxRequest.tx_hash)
  return tx_hash_.GetNoArena();
}
void SignTxRequest::set_tx_hash(const ::std::string& value) {
  set_has_tx_hash();
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignTxRequest.tx_hash)
}
#if LANG_CXX11
void SignTxRequest::set_tx_hash(::std::string&& value) {
  set_has_tx_hash();
  tx_hash_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignTxRequest.tx_hash)
}
#endif
void SignTxRequest::set_tx_hash(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tx_hash();
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignTxRequest.tx_hash)
}
void SignTxRequest::set_tx_hash(const void* value, size_t size) {
  set_has_tx_hash();
  tx_hash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignTxRequest.tx_hash)
}
::std::string* SignTxRequest::mutable_tx_hash() {
  set_has_tx_hash();
  // @@protoc_insertion_point(field_mutable:SignTxRequest.tx_hash)
  return tx_hash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignTxRequest::release_tx_hash() {
  // @@protoc_insertion_point(field_release:SignTxRequest.tx_hash)
  clear_has_tx_hash();
  return tx_hash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignTxRequest::set_allocated_tx_hash(::std::string* tx_hash) {
  if (tx_hash != NULL) {
    set_has_tx_hash();
  } else {
    clear_has_tx_hash();
  }
  tx_hash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tx_hash);
  // @@protoc_insertion_point(field_set_allocated:SignTxRequest.tx_hash)
}

// required uint32 tx_idx = 7;
bool SignTxRequest::has_tx_idx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SignTxRequest::set_has_tx_idx() {
  _has_bits_[0] |= 0x00000040u;
}
void SignTxRequest::clear_has_tx_idx() {
  _has_bits_[0] &= ~0x00000040u;
}
void SignTxRequest::clear_tx_idx() {
  tx_idx_ = 0u;
  clear_has_tx_idx();
}
::google::protobuf::uint32 SignTxRequest::tx_idx() const {
  // @@protoc_insertion_point(field_get:SignTxRequest.tx_idx)
  return tx_idx_;
}
void SignTxRequest::set_tx_idx(::google::protobuf::uint32 value) {
  set_has_tx_idx();
  tx_idx_ = value;
  // @@protoc_insertion_point(field_set:SignTxRequest.tx_idx)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignTxReply::kSignedTxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignTxReply::SignTxReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SignTxReply)
}
SignTxReply::SignTxReply(const SignTxReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signedtx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signedtx()) {
    signedtx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signedtx_);
  }
  // @@protoc_insertion_point(copy_constructor:SignTxReply)
}

void SignTxReply::SharedCtor() {
  _cached_size_ = 0;
  signedtx_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SignTxReply::~SignTxReply() {
  // @@protoc_insertion_point(destructor:SignTxReply)
  SharedDtor();
}

void SignTxReply::SharedDtor() {
  signedtx_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SignTxReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignTxReply::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignTxReply& SignTxReply::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

SignTxReply* SignTxReply::New(::google::protobuf::Arena* arena) const {
  SignTxReply* n = new SignTxReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignTxReply::Clear() {
// @@protoc_insertion_point(message_clear_start:SignTxReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_signedtx()) {
    GOOGLE_DCHECK(!signedtx_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*signedtx_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SignTxReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SignTxReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes signedTx = 2 [(.nanopb) = {
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signedtx()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SignTxReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SignTxReply)
  return false;
#undef DO_
}

void SignTxReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SignTxReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes signedTx = 2 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->signedtx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SignTxReply)
}

::google::protobuf::uint8* SignTxReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SignTxReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes signedTx = 2 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->signedtx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SignTxReply)
  return target;
}

size_t SignTxReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SignTxReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes signedTx = 2 [(.nanopb) = {
  if (has_signedtx()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signedtx());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignTxReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SignTxReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SignTxReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignTxReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SignTxReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SignTxReply)
    MergeFrom(*source);
  }
}

void SignTxReply::MergeFrom(const SignTxReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SignTxReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_signedtx()) {
    set_has_signedtx();
    signedtx_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signedtx_);
  }
}

void SignTxReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SignTxReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignTxReply::CopyFrom(const SignTxReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SignTxReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignTxReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SignTxReply::Swap(SignTxReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignTxReply::InternalSwap(SignTxReply* other) {
  using std::swap;
  signedtx_.Swap(&other->signedtx_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignTxReply::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignTxReply

// required bytes signedTx = 2 [(.nanopb) = {
bool SignTxReply::has_signedtx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SignTxReply::set_has_signedtx() {
  _has_bits_[0] |= 0x00000001u;
}
void SignTxReply::clear_has_signedtx() {
  _has_bits_[0] &= ~0x00000001u;
}
void SignTxReply::clear_signedtx() {
  signedtx_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signedtx();
}
const ::std::string& SignTxReply::signedtx() const {
  // @@protoc_insertion_point(field_get:SignTxReply.signedTx)
  return signedtx_.GetNoArena();
}
void SignTxReply::set_signedtx(const ::std::string& value) {
  set_has_signedtx();
  signedtx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignTxReply.signedTx)
}
#if LANG_CXX11
void SignTxReply::set_signedtx(::std::string&& value) {
  set_has_signedtx();
  signedtx_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignTxReply.signedTx)
}
#endif
void SignTxReply::set_signedtx(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signedtx();
  signedtx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignTxReply.signedTx)
}
void SignTxReply::set_signedtx(const void* value, size_t size) {
  set_has_signedtx();
  signedtx_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignTxReply.signedTx)
}
::std::string* SignTxReply::mutable_signedtx() {
  set_has_signedtx();
  // @@protoc_insertion_point(field_mutable:SignTxReply.signedTx)
  return signedtx_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignTxReply::release_signedtx() {
  // @@protoc_insertion_point(field_release:SignTxReply.signedTx)
  clear_has_signedtx();
  return signedtx_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignTxReply::set_allocated_signedtx(::std::string* signedtx) {
  if (signedtx != NULL) {
    set_has_signedtx();
  } else {
    clear_has_signedtx();
  }
  signedtx_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signedtx);
  // @@protoc_insertion_point(field_set_allocated:SignTxReply.signedTx)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignMsgRequest::kPasswordFieldNumber;
const int SignMsgRequest::kTypeFieldNumber;
const int SignMsgRequest::kIdxFieldNumber;
const int SignMsgRequest::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignMsgRequest::SignMsgRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SignMsgRequest)
}
SignMsgRequest::SignMsgRequest(const SignMsgRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&idx_) -
    reinterpret_cast<char*>(&type_)) + sizeof(idx_));
  // @@protoc_insertion_point(copy_constructor:SignMsgRequest)
}

void SignMsgRequest::SharedCtor() {
  _cached_size_ = 0;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) -
      reinterpret_cast<char*>(&type_)) + sizeof(idx_));
}

SignMsgRequest::~SignMsgRequest() {
  // @@protoc_insertion_point(destructor:SignMsgRequest)
  SharedDtor();
}

void SignMsgRequest::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SignMsgRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignMsgRequest::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignMsgRequest& SignMsgRequest::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

SignMsgRequest* SignMsgRequest::New(::google::protobuf::Arena* arena) const {
  SignMsgRequest* n = new SignMsgRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SignMsgRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*password_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!message_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*message_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&idx_) -
        reinterpret_cast<char*>(&type_)) + sizeof(idx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SignMsgRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SignMsgRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string password = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "SignMsgRequest.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 idx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes message = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SignMsgRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SignMsgRequest)
  return false;
#undef DO_
}

void SignMsgRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SignMsgRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SignMsgRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->password(), output);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 idx = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->idx(), output);
  }

  // required bytes message = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SignMsgRequest)
}

::google::protobuf::uint8* SignMsgRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SignMsgRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "SignMsgRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->password(), target);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 idx = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->idx(), target);
  }

  // required bytes message = 4;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SignMsgRequest)
  return target;
}

size_t SignMsgRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SignMsgRequest)
  size_t total_size = 0;

  if (has_password()) {
    // required string password = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  if (has_message()) {
    // required bytes message = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->message());
  }

  if (has_type()) {
    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_idx()) {
    // required uint32 idx = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idx());
  }

  return total_size;
}
size_t SignMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SignMsgRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string password = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());

    // required bytes message = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->message());

    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 idx = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idx());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignMsgRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SignMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SignMsgRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignMsgRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SignMsgRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SignMsgRequest)
    MergeFrom(*source);
  }
}

void SignMsgRequest::MergeFrom(const SignMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SignMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      idx_ = from.idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SignMsgRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SignMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignMsgRequest::CopyFrom(const SignMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SignMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignMsgRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void SignMsgRequest::Swap(SignMsgRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignMsgRequest::InternalSwap(SignMsgRequest* other) {
  using std::swap;
  password_.Swap(&other->password_);
  message_.Swap(&other->message_);
  swap(type_, other->type_);
  swap(idx_, other->idx_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignMsgRequest::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignMsgRequest

// required string password = 1;
bool SignMsgRequest::has_password() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SignMsgRequest::set_has_password() {
  _has_bits_[0] |= 0x00000001u;
}
void SignMsgRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000001u;
}
void SignMsgRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& SignMsgRequest::password() const {
  // @@protoc_insertion_point(field_get:SignMsgRequest.password)
  return password_.GetNoArena();
}
void SignMsgRequest::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignMsgRequest.password)
}
#if LANG_CXX11
void SignMsgRequest::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignMsgRequest.password)
}
#endif
void SignMsgRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignMsgRequest.password)
}
void SignMsgRequest::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignMsgRequest.password)
}
::std::string* SignMsgRequest::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:SignMsgRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignMsgRequest::release_password() {
  // @@protoc_insertion_point(field_release:SignMsgRequest.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignMsgRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:SignMsgRequest.password)
}

// required uint32 type = 2;
bool SignMsgRequest::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SignMsgRequest::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void SignMsgRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void SignMsgRequest::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 SignMsgRequest::type() const {
  // @@protoc_insertion_point(field_get:SignMsgRequest.type)
  return type_;
}
void SignMsgRequest::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:SignMsgRequest.type)
}

// required uint32 idx = 3;
bool SignMsgRequest::has_idx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SignMsgRequest::set_has_idx() {
  _has_bits_[0] |= 0x00000008u;
}
void SignMsgRequest::clear_has_idx() {
  _has_bits_[0] &= ~0x00000008u;
}
void SignMsgRequest::clear_idx() {
  idx_ = 0u;
  clear_has_idx();
}
::google::protobuf::uint32 SignMsgRequest::idx() const {
  // @@protoc_insertion_point(field_get:SignMsgRequest.idx)
  return idx_;
}
void SignMsgRequest::set_idx(::google::protobuf::uint32 value) {
  set_has_idx();
  idx_ = value;
  // @@protoc_insertion_point(field_set:SignMsgRequest.idx)
}

// required bytes message = 4;
bool SignMsgRequest::has_message() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SignMsgRequest::set_has_message() {
  _has_bits_[0] |= 0x00000002u;
}
void SignMsgRequest::clear_has_message() {
  _has_bits_[0] &= ~0x00000002u;
}
void SignMsgRequest::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
const ::std::string& SignMsgRequest::message() const {
  // @@protoc_insertion_point(field_get:SignMsgRequest.message)
  return message_.GetNoArena();
}
void SignMsgRequest::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignMsgRequest.message)
}
#if LANG_CXX11
void SignMsgRequest::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignMsgRequest.message)
}
#endif
void SignMsgRequest::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignMsgRequest.message)
}
void SignMsgRequest::set_message(const void* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignMsgRequest.message)
}
::std::string* SignMsgRequest::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:SignMsgRequest.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignMsgRequest::release_message() {
  // @@protoc_insertion_point(field_release:SignMsgRequest.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignMsgRequest::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:SignMsgRequest.message)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignMsgReply::kSignedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignMsgReply::SignMsgReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SignMsgReply)
}
SignMsgReply::SignMsgReply(const SignMsgReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signed__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signed_()) {
    signed__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signed__);
  }
  // @@protoc_insertion_point(copy_constructor:SignMsgReply)
}

void SignMsgReply::SharedCtor() {
  _cached_size_ = 0;
  signed__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SignMsgReply::~SignMsgReply() {
  // @@protoc_insertion_point(destructor:SignMsgReply)
  SharedDtor();
}

void SignMsgReply::SharedDtor() {
  signed__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SignMsgReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignMsgReply::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignMsgReply& SignMsgReply::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

SignMsgReply* SignMsgReply::New(::google::protobuf::Arena* arena) const {
  SignMsgReply* n = new SignMsgReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SignMsgReply::Clear() {
// @@protoc_insertion_point(message_clear_start:SignMsgReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_signed_()) {
    GOOGLE_DCHECK(!signed__.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*signed__.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SignMsgReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SignMsgReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes signed = 1 [(.nanopb) = {
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signed_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SignMsgReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SignMsgReply)
  return false;
#undef DO_
}

void SignMsgReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SignMsgReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes signed = 1 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signed_(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SignMsgReply)
}

::google::protobuf::uint8* SignMsgReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SignMsgReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes signed = 1 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->signed_(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SignMsgReply)
  return target;
}

size_t SignMsgReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SignMsgReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bytes signed = 1 [(.nanopb) = {
  if (has_signed_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signed_());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignMsgReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SignMsgReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SignMsgReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignMsgReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SignMsgReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SignMsgReply)
    MergeFrom(*source);
  }
}

void SignMsgReply::MergeFrom(const SignMsgReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SignMsgReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_signed_()) {
    set_has_signed_();
    signed__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signed__);
  }
}

void SignMsgReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SignMsgReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignMsgReply::CopyFrom(const SignMsgReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SignMsgReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignMsgReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void SignMsgReply::Swap(SignMsgReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignMsgReply::InternalSwap(SignMsgReply* other) {
  using std::swap;
  signed__.Swap(&other->signed__);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignMsgReply::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SignMsgReply

// required bytes signed = 1 [(.nanopb) = {
bool SignMsgReply::has_signed_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SignMsgReply::set_has_signed_() {
  _has_bits_[0] |= 0x00000001u;
}
void SignMsgReply::clear_has_signed_() {
  _has_bits_[0] &= ~0x00000001u;
}
void SignMsgReply::clear_signed_() {
  signed__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signed_();
}
const ::std::string& SignMsgReply::signed_() const {
  // @@protoc_insertion_point(field_get:SignMsgReply.signed)
  return signed__.GetNoArena();
}
void SignMsgReply::set_signed_(const ::std::string& value) {
  set_has_signed_();
  signed__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SignMsgReply.signed)
}
#if LANG_CXX11
void SignMsgReply::set_signed_(::std::string&& value) {
  set_has_signed_();
  signed__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SignMsgReply.signed)
}
#endif
void SignMsgReply::set_signed_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signed_();
  signed__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SignMsgReply.signed)
}
void SignMsgReply::set_signed_(const void* value, size_t size) {
  set_has_signed_();
  signed__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SignMsgReply.signed)
}
::std::string* SignMsgReply::mutable_signed_() {
  set_has_signed_();
  // @@protoc_insertion_point(field_mutable:SignMsgReply.signed)
  return signed__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SignMsgReply::release_signed_() {
  // @@protoc_insertion_point(field_release:SignMsgReply.signed)
  clear_has_signed_();
  return signed__.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SignMsgReply::set_allocated_signed_(::std::string* signed_) {
  if (signed_ != NULL) {
    set_has_signed_();
  } else {
    clear_has_signed_();
  }
  signed__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signed_);
  // @@protoc_insertion_point(field_set_allocated:SignMsgReply.signed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListCoinRequest::ListCoinRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ListCoinRequest)
}
ListCoinRequest::ListCoinRequest(const ListCoinRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ListCoinRequest)
}

void ListCoinRequest::SharedCtor() {
  _cached_size_ = 0;
}

ListCoinRequest::~ListCoinRequest() {
  // @@protoc_insertion_point(destructor:ListCoinRequest)
  SharedDtor();
}

void ListCoinRequest::SharedDtor() {
}

void ListCoinRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListCoinRequest::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListCoinRequest& ListCoinRequest::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListCoinRequest* ListCoinRequest::New(::google::protobuf::Arena* arena) const {
  ListCoinRequest* n = new ListCoinRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListCoinRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ListCoinRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ListCoinRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ListCoinRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ListCoinRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ListCoinRequest)
  return false;
#undef DO_
}

void ListCoinRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ListCoinRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ListCoinRequest)
}

::google::protobuf::uint8* ListCoinRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ListCoinRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ListCoinRequest)
  return target;
}

size_t ListCoinRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ListCoinRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListCoinRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ListCoinRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCoinRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListCoinRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ListCoinRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ListCoinRequest)
    MergeFrom(*source);
  }
}

void ListCoinRequest::MergeFrom(const ListCoinRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ListCoinRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ListCoinRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ListCoinRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCoinRequest::CopyFrom(const ListCoinRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ListCoinRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCoinRequest::IsInitialized() const {
  return true;
}

void ListCoinRequest::Swap(ListCoinRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListCoinRequest::InternalSwap(ListCoinRequest* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListCoinRequest::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListCoinRequest

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListCoinReply::kMaxFieldNumber;
const int ListCoinReply::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListCoinReply::ListCoinReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ListCoinReply)
}
ListCoinReply::ListCoinReply(const ListCoinReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      type_(from.type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_ = from.max_;
  // @@protoc_insertion_point(copy_constructor:ListCoinReply)
}

void ListCoinReply::SharedCtor() {
  _cached_size_ = 0;
  max_ = 0u;
}

ListCoinReply::~ListCoinReply() {
  // @@protoc_insertion_point(destructor:ListCoinReply)
  SharedDtor();
}

void ListCoinReply::SharedDtor() {
}

void ListCoinReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListCoinReply::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListCoinReply& ListCoinReply::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListCoinReply* ListCoinReply::New(::google::protobuf::Arena* arena) const {
  ListCoinReply* n = new ListCoinReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListCoinReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ListCoinReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.Clear();
  max_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ListCoinReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ListCoinReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 type = 3 [(.nanopb) = {
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_type())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_type())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ListCoinReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ListCoinReply)
  return false;
#undef DO_
}

void ListCoinReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ListCoinReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 max = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->max(), output);
  }

  // repeated uint32 type = 3 [(.nanopb) = {
  for (int i = 0, n = this->type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->type(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ListCoinReply)
}

::google::protobuf::uint8* ListCoinReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ListCoinReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 max = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->max(), target);
  }

  // repeated uint32 type = 3 [(.nanopb) = {
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->type_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ListCoinReply)
  return target;
}

size_t ListCoinReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ListCoinReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 max = 2;
  if (has_max()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->max());
  }
  // repeated uint32 type = 3 [(.nanopb) = {
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->type_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->type_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListCoinReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ListCoinReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ListCoinReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListCoinReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ListCoinReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ListCoinReply)
    MergeFrom(*source);
  }
}

void ListCoinReply::MergeFrom(const ListCoinReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ListCoinReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  type_.MergeFrom(from.type_);
  if (from.has_max()) {
    set_max(from.max());
  }
}

void ListCoinReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ListCoinReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListCoinReply::CopyFrom(const ListCoinReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ListCoinReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCoinReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ListCoinReply::Swap(ListCoinReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListCoinReply::InternalSwap(ListCoinReply* other) {
  using std::swap;
  type_.InternalSwap(&other->type_);
  swap(max_, other->max_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListCoinReply::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListCoinReply

// required uint32 max = 2;
bool ListCoinReply::has_max() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ListCoinReply::set_has_max() {
  _has_bits_[0] |= 0x00000001u;
}
void ListCoinReply::clear_has_max() {
  _has_bits_[0] &= ~0x00000001u;
}
void ListCoinReply::clear_max() {
  max_ = 0u;
  clear_has_max();
}
::google::protobuf::uint32 ListCoinReply::max() const {
  // @@protoc_insertion_point(field_get:ListCoinReply.max)
  return max_;
}
void ListCoinReply::set_max(::google::protobuf::uint32 value) {
  set_has_max();
  max_ = value;
  // @@protoc_insertion_point(field_set:ListCoinReply.max)
}

// repeated uint32 type = 3 [(.nanopb) = {
int ListCoinReply::type_size() const {
  return type_.size();
}
void ListCoinReply::clear_type() {
  type_.Clear();
}
::google::protobuf::uint32 ListCoinReply::type(int index) const {
  // @@protoc_insertion_point(field_get:ListCoinReply.type)
  return type_.Get(index);
}
void ListCoinReply::set_type(int index, ::google::protobuf::uint32 value) {
  type_.Set(index, value);
  // @@protoc_insertion_point(field_set:ListCoinReply.type)
}
void ListCoinReply::add_type(::google::protobuf::uint32 value) {
  type_.Add(value);
  // @@protoc_insertion_point(field_add:ListCoinReply.type)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ListCoinReply::type() const {
  // @@protoc_insertion_point(field_list:ListCoinReply.type)
  return type_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ListCoinReply::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:ListCoinReply.type)
  return &type_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAddressRequest::kPasswordFieldNumber;
const int GetAddressRequest::kTypeFieldNumber;
const int GetAddressRequest::kIdxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAddressRequest::GetAddressRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetAddressRequest)
}
GetAddressRequest::GetAddressRequest(const GetAddressRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&idx_) -
    reinterpret_cast<char*>(&type_)) + sizeof(idx_));
  // @@protoc_insertion_point(copy_constructor:GetAddressRequest)
}

void GetAddressRequest::SharedCtor() {
  _cached_size_ = 0;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) -
      reinterpret_cast<char*>(&type_)) + sizeof(idx_));
}

GetAddressRequest::~GetAddressRequest() {
  // @@protoc_insertion_point(destructor:GetAddressRequest)
  SharedDtor();
}

void GetAddressRequest::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetAddressRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAddressRequest::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetAddressRequest& GetAddressRequest::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetAddressRequest* GetAddressRequest::New(::google::protobuf::Arena* arena) const {
  GetAddressRequest* n = new GetAddressRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetAddressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GetAddressRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_password()) {
    GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*password_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&idx_) -
        reinterpret_cast<char*>(&type_)) + sizeof(idx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetAddressRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetAddressRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string password = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "GetAddressRequest.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 idx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetAddressRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetAddressRequest)
  return false;
#undef DO_
}

void GetAddressRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetAddressRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GetAddressRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->password(), output);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 idx = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->idx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetAddressRequest)
}

::google::protobuf::uint8* GetAddressRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GetAddressRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "GetAddressRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->password(), target);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 idx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->idx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetAddressRequest)
  return target;
}

size_t GetAddressRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:GetAddressRequest)
  size_t total_size = 0;

  if (has_password()) {
    // required string password = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  if (has_type()) {
    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_idx()) {
    // required uint32 idx = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idx());
  }

  return total_size;
}
size_t GetAddressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetAddressRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string password = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());

    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 idx = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idx());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAddressRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAddressRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetAddressRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetAddressRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetAddressRequest)
    MergeFrom(*source);
  }
}

void GetAddressRequest::MergeFrom(const GetAddressRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      idx_ = from.idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GetAddressRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAddressRequest::CopyFrom(const GetAddressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAddressRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void GetAddressRequest::Swap(GetAddressRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAddressRequest::InternalSwap(GetAddressRequest* other) {
  using std::swap;
  password_.Swap(&other->password_);
  swap(type_, other->type_);
  swap(idx_, other->idx_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetAddressRequest::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetAddressRequest

// required string password = 1;
bool GetAddressRequest::has_password() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetAddressRequest::set_has_password() {
  _has_bits_[0] |= 0x00000001u;
}
void GetAddressRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetAddressRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& GetAddressRequest::password() const {
  // @@protoc_insertion_point(field_get:GetAddressRequest.password)
  return password_.GetNoArena();
}
void GetAddressRequest::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:GetAddressRequest.password)
}
#if LANG_CXX11
void GetAddressRequest::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetAddressRequest.password)
}
#endif
void GetAddressRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetAddressRequest.password)
}
void GetAddressRequest::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetAddressRequest.password)
}
::std::string* GetAddressRequest::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:GetAddressRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* GetAddressRequest::release_password() {
  // @@protoc_insertion_point(field_release:GetAddressRequest.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void GetAddressRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:GetAddressRequest.password)
}

// required uint32 type = 2;
bool GetAddressRequest::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GetAddressRequest::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void GetAddressRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void GetAddressRequest::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 GetAddressRequest::type() const {
  // @@protoc_insertion_point(field_get:GetAddressRequest.type)
  return type_;
}
void GetAddressRequest::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:GetAddressRequest.type)
}

// required uint32 idx = 3;
bool GetAddressRequest::has_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GetAddressRequest::set_has_idx() {
  _has_bits_[0] |= 0x00000004u;
}
void GetAddressRequest::clear_has_idx() {
  _has_bits_[0] &= ~0x00000004u;
}
void GetAddressRequest::clear_idx() {
  idx_ = 0u;
  clear_has_idx();
}
::google::protobuf::uint32 GetAddressRequest::idx() const {
  // @@protoc_insertion_point(field_get:GetAddressRequest.idx)
  return idx_;
}
void GetAddressRequest::set_idx(::google::protobuf::uint32 value) {
  set_has_idx();
  idx_ = value;
  // @@protoc_insertion_point(field_set:GetAddressRequest.idx)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetAddressReply::kAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetAddressReply::GetAddressReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetAddressReply)
}
GetAddressReply::GetAddressReply(const GetAddressReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_addr()) {
    addr_ = new ::Address(*from.addr_);
  } else {
    addr_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:GetAddressReply)
}

void GetAddressReply::SharedCtor() {
  _cached_size_ = 0;
  addr_ = NULL;
}

GetAddressReply::~GetAddressReply() {
  // @@protoc_insertion_point(destructor:GetAddressReply)
  SharedDtor();
}

void GetAddressReply::SharedDtor() {
  if (this != internal_default_instance()) delete addr_;
}

void GetAddressReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAddressReply::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetAddressReply& GetAddressReply::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

GetAddressReply* GetAddressReply::New(::google::protobuf::Arena* arena) const {
  GetAddressReply* n = new GetAddressReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetAddressReply::Clear() {
// @@protoc_insertion_point(message_clear_start:GetAddressReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_addr()) {
    GOOGLE_DCHECK(addr_ != NULL);
    addr_->::Address::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetAddressReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetAddressReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Address addr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetAddressReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetAddressReply)
  return false;
#undef DO_
}

void GetAddressReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetAddressReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Address addr = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->addr_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:GetAddressReply)
}

::google::protobuf::uint8* GetAddressReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GetAddressReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Address addr = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->addr_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetAddressReply)
  return target;
}

size_t GetAddressReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetAddressReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .Address addr = 1;
  if (has_addr()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->addr_);
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAddressReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetAddressReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetAddressReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetAddressReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetAddressReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetAddressReply)
    MergeFrom(*source);
  }
}

void GetAddressReply::MergeFrom(const GetAddressReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetAddressReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_addr()) {
    mutable_addr()->::Address::MergeFrom(from.addr());
  }
}

void GetAddressReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetAddressReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAddressReply::CopyFrom(const GetAddressReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetAddressReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAddressReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_addr()) {
    if (!this->addr_->IsInitialized()) return false;
  }
  return true;
}

void GetAddressReply::Swap(GetAddressReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetAddressReply::InternalSwap(GetAddressReply* other) {
  using std::swap;
  swap(addr_, other->addr_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetAddressReply::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GetAddressReply

// required .Address addr = 1;
bool GetAddressReply::has_addr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GetAddressReply::set_has_addr() {
  _has_bits_[0] |= 0x00000001u;
}
void GetAddressReply::clear_has_addr() {
  _has_bits_[0] &= ~0x00000001u;
}
void GetAddressReply::clear_addr() {
  if (addr_ != NULL) addr_->::Address::Clear();
  clear_has_addr();
}
const ::Address& GetAddressReply::addr() const {
  const ::Address* p = addr_;
  // @@protoc_insertion_point(field_get:GetAddressReply.addr)
  return p != NULL ? *p : *reinterpret_cast<const ::Address*>(
      &::_Address_default_instance_);
}
::Address* GetAddressReply::mutable_addr() {
  set_has_addr();
  if (addr_ == NULL) {
    addr_ = new ::Address;
  }
  // @@protoc_insertion_point(field_mutable:GetAddressReply.addr)
  return addr_;
}
::Address* GetAddressReply::release_addr() {
  // @@protoc_insertion_point(field_release:GetAddressReply.addr)
  clear_has_addr();
  ::Address* temp = addr_;
  addr_ = NULL;
  return temp;
}
void GetAddressReply::set_allocated_addr(::Address* addr) {
  delete addr_;
  addr_ = addr;
  if (addr) {
    set_has_addr();
  } else {
    clear_has_addr();
  }
  // @@protoc_insertion_point(field_set_allocated:GetAddressReply.addr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListAddressRequest::kPasswordFieldNumber;
const int ListAddressRequest::kTypeFieldNumber;
const int ListAddressRequest::kOffsetFieldNumber;
const int ListAddressRequest::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListAddressRequest::ListAddressRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ListAddressRequest)
}
ListAddressRequest::ListAddressRequest(const ListAddressRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&type_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:ListAddressRequest)
}

void ListAddressRequest::SharedCtor() {
  _cached_size_ = 0;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&type_)) + sizeof(limit_));
}

ListAddressRequest::~ListAddressRequest() {
  // @@protoc_insertion_point(destructor:ListAddressRequest)
  SharedDtor();
}

void ListAddressRequest::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListAddressRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListAddressRequest::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListAddressRequest& ListAddressRequest::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListAddressRequest* ListAddressRequest::New(::google::protobuf::Arena* arena) const {
  ListAddressRequest* n = new ListAddressRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListAddressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ListAddressRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_password()) {
    GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*password_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 14u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&limit_) -
        reinterpret_cast<char*>(&type_)) + sizeof(limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ListAddressRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ListAddressRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string password = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ListAddressRequest.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 limit = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ListAddressRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ListAddressRequest)
  return false;
#undef DO_
}

void ListAddressRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ListAddressRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ListAddressRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->password(), output);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 offset = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->offset(), output);
  }

  // required uint32 limit = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ListAddressRequest)
}

::google::protobuf::uint8* ListAddressRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ListAddressRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ListAddressRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->password(), target);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 offset = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->offset(), target);
  }

  // required uint32 limit = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ListAddressRequest)
  return target;
}

size_t ListAddressRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ListAddressRequest)
  size_t total_size = 0;

  if (has_password()) {
    // required string password = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  if (has_type()) {
    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_offset()) {
    // required uint32 offset = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());
  }

  if (has_limit()) {
    // required uint32 limit = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit());
  }

  return total_size;
}
size_t ListAddressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ListAddressRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string password = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());

    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 offset = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());

    // required uint32 limit = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListAddressRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ListAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAddressRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListAddressRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ListAddressRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ListAddressRequest)
    MergeFrom(*source);
  }
}

void ListAddressRequest::MergeFrom(const ListAddressRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ListAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000008u) {
      limit_ = from.limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ListAddressRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ListAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAddressRequest::CopyFrom(const ListAddressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ListAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAddressRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void ListAddressRequest::Swap(ListAddressRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListAddressRequest::InternalSwap(ListAddressRequest* other) {
  using std::swap;
  password_.Swap(&other->password_);
  swap(type_, other->type_);
  swap(offset_, other->offset_);
  swap(limit_, other->limit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListAddressRequest::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListAddressRequest

// required string password = 1;
bool ListAddressRequest::has_password() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ListAddressRequest::set_has_password() {
  _has_bits_[0] |= 0x00000001u;
}
void ListAddressRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000001u;
}
void ListAddressRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& ListAddressRequest::password() const {
  // @@protoc_insertion_point(field_get:ListAddressRequest.password)
  return password_.GetNoArena();
}
void ListAddressRequest::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ListAddressRequest.password)
}
#if LANG_CXX11
void ListAddressRequest::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ListAddressRequest.password)
}
#endif
void ListAddressRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ListAddressRequest.password)
}
void ListAddressRequest::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ListAddressRequest.password)
}
::std::string* ListAddressRequest::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:ListAddressRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListAddressRequest::release_password() {
  // @@protoc_insertion_point(field_release:ListAddressRequest.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListAddressRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:ListAddressRequest.password)
}

// required uint32 type = 2;
bool ListAddressRequest::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ListAddressRequest::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void ListAddressRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void ListAddressRequest::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 ListAddressRequest::type() const {
  // @@protoc_insertion_point(field_get:ListAddressRequest.type)
  return type_;
}
void ListAddressRequest::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ListAddressRequest.type)
}

// required uint32 offset = 3;
bool ListAddressRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ListAddressRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
void ListAddressRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
void ListAddressRequest::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
::google::protobuf::uint32 ListAddressRequest::offset() const {
  // @@protoc_insertion_point(field_get:ListAddressRequest.offset)
  return offset_;
}
void ListAddressRequest::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:ListAddressRequest.offset)
}

// required uint32 limit = 4;
bool ListAddressRequest::has_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ListAddressRequest::set_has_limit() {
  _has_bits_[0] |= 0x00000008u;
}
void ListAddressRequest::clear_has_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
void ListAddressRequest::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
::google::protobuf::uint32 ListAddressRequest::limit() const {
  // @@protoc_insertion_point(field_get:ListAddressRequest.limit)
  return limit_;
}
void ListAddressRequest::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:ListAddressRequest.limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Address::kTypeFieldNumber;
const int Address::kIdxFieldNumber;
const int Address::kNameFieldNumber;
const int Address::kSAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Address::Address()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Address)
}
Address::Address(const Address& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  s_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_s_addr()) {
    s_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_addr_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&idx_) -
    reinterpret_cast<char*>(&type_)) + sizeof(idx_));
  // @@protoc_insertion_point(copy_constructor:Address)
}

void Address::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_addr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) -
      reinterpret_cast<char*>(&type_)) + sizeof(idx_));
}

Address::~Address() {
  // @@protoc_insertion_point(destructor:Address)
  SharedDtor();
}

void Address::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_addr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Address::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Address::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Address& Address::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

Address* Address::New(::google::protobuf::Arena* arena) const {
  Address* n = new Address;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Address::Clear() {
// @@protoc_insertion_point(message_clear_start:Address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!s_addr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*s_addr_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&idx_) -
        reinterpret_cast<char*>(&type_)) + sizeof(idx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Address)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 idx = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Address.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string s_addr = 4 [(.nanopb) = {
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_s_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->s_addr().data(), static_cast<int>(this->s_addr().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Address.s_addr");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Address)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Address)
  return false;
#undef DO_
}

void Address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 idx = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->idx(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Address.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // required string s_addr = 4 [(.nanopb) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s_addr().data(), static_cast<int>(this->s_addr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Address.s_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->s_addr(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Address)
}

::google::protobuf::uint8* Address::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Address)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 idx = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->idx(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Address.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required string s_addr = 4 [(.nanopb) = {
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->s_addr().data(), static_cast<int>(this->s_addr().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Address.s_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->s_addr(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Address)
  return target;
}

size_t Address::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Address)
  size_t total_size = 0;

  if (has_s_addr()) {
    // required string s_addr = 4 [(.nanopb) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->s_addr());
  }

  if (has_type()) {
    // required uint32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_idx()) {
    // required uint32 idx = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idx());
  }

  return total_size;
}
size_t Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Address)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required string s_addr = 4 [(.nanopb) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->s_addr());

    // required uint32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 idx = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idx());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string name = 3;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Address::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Address)
  GOOGLE_DCHECK_NE(&from, this);
  const Address* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Address>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Address)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Address)
    MergeFrom(*source);
  }
}

void Address::MergeFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Address)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_s_addr();
      s_addr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_addr_);
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      idx_ = from.idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Address::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Address::CopyFrom(const Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Address::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  return true;
}

void Address::Swap(Address* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Address::InternalSwap(Address* other) {
  using std::swap;
  name_.Swap(&other->name_);
  s_addr_.Swap(&other->s_addr_);
  swap(type_, other->type_);
  swap(idx_, other->idx_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Address::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Address

// required uint32 type = 1;
bool Address::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Address::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void Address::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void Address::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 Address::type() const {
  // @@protoc_insertion_point(field_get:Address.type)
  return type_;
}
void Address::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Address.type)
}

// required uint32 idx = 2;
bool Address::has_idx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Address::set_has_idx() {
  _has_bits_[0] |= 0x00000008u;
}
void Address::clear_has_idx() {
  _has_bits_[0] &= ~0x00000008u;
}
void Address::clear_idx() {
  idx_ = 0u;
  clear_has_idx();
}
::google::protobuf::uint32 Address::idx() const {
  // @@protoc_insertion_point(field_get:Address.idx)
  return idx_;
}
void Address::set_idx(::google::protobuf::uint32 value) {
  set_has_idx();
  idx_ = value;
  // @@protoc_insertion_point(field_set:Address.idx)
}

// optional string name = 3;
bool Address::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Address::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Address::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Address::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& Address::name() const {
  // @@protoc_insertion_point(field_get:Address.name)
  return name_.GetNoArena();
}
void Address::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Address.name)
}
#if LANG_CXX11
void Address::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Address.name)
}
#endif
void Address::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Address.name)
}
void Address::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Address.name)
}
::std::string* Address::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:Address.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Address::release_name() {
  // @@protoc_insertion_point(field_release:Address.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Address::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Address.name)
}

// required string s_addr = 4 [(.nanopb) = {
bool Address::has_s_addr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Address::set_has_s_addr() {
  _has_bits_[0] |= 0x00000002u;
}
void Address::clear_has_s_addr() {
  _has_bits_[0] &= ~0x00000002u;
}
void Address::clear_s_addr() {
  s_addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_s_addr();
}
const ::std::string& Address::s_addr() const {
  // @@protoc_insertion_point(field_get:Address.s_addr)
  return s_addr_.GetNoArena();
}
void Address::set_s_addr(const ::std::string& value) {
  set_has_s_addr();
  s_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Address.s_addr)
}
#if LANG_CXX11
void Address::set_s_addr(::std::string&& value) {
  set_has_s_addr();
  s_addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Address.s_addr)
}
#endif
void Address::set_s_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_s_addr();
  s_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Address.s_addr)
}
void Address::set_s_addr(const char* value, size_t size) {
  set_has_s_addr();
  s_addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Address.s_addr)
}
::std::string* Address::mutable_s_addr() {
  set_has_s_addr();
  // @@protoc_insertion_point(field_mutable:Address.s_addr)
  return s_addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Address::release_s_addr() {
  // @@protoc_insertion_point(field_release:Address.s_addr)
  clear_has_s_addr();
  return s_addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Address::set_allocated_s_addr(::std::string* s_addr) {
  if (s_addr != NULL) {
    set_has_s_addr();
  } else {
    clear_has_s_addr();
  }
  s_addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), s_addr);
  // @@protoc_insertion_point(field_set_allocated:Address.s_addr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListAddressReply::kTotalRecordsFieldNumber;
const int ListAddressReply::kTotalPagesFieldNumber;
const int ListAddressReply::kLimitFieldNumber;
const int ListAddressReply::kOffsetFieldNumber;
const int ListAddressReply::kAddrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListAddressReply::ListAddressReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ListAddressReply)
}
ListAddressReply::ListAddressReply(const ListAddressReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      addr_(from.addr_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_records_, &from.total_records_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&total_records_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:ListAddressReply)
}

void ListAddressReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&total_records_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&total_records_)) + sizeof(offset_));
}

ListAddressReply::~ListAddressReply() {
  // @@protoc_insertion_point(destructor:ListAddressReply)
  SharedDtor();
}

void ListAddressReply::SharedDtor() {
}

void ListAddressReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListAddressReply::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListAddressReply& ListAddressReply::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListAddressReply* ListAddressReply::New(::google::protobuf::Arena* arena) const {
  ListAddressReply* n = new ListAddressReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListAddressReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ListAddressReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addr_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&total_records_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&offset_) -
        reinterpret_cast<char*>(&total_records_)) + sizeof(offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ListAddressReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ListAddressReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 total_records = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_total_records();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_records_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 total_pages = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_total_pages();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_pages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 offset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Address addr = 5 [(.nanopb) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ListAddressReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ListAddressReply)
  return false;
#undef DO_
}

void ListAddressReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ListAddressReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 total_records = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->total_records(), output);
  }

  // required uint32 total_pages = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_pages(), output);
  }

  // required uint32 limit = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->limit(), output);
  }

  // required uint32 offset = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->offset(), output);
  }

  // repeated .Address addr = 5 [(.nanopb) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addr_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->addr(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ListAddressReply)
}

::google::protobuf::uint8* ListAddressReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ListAddressReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 total_records = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->total_records(), target);
  }

  // required uint32 total_pages = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_pages(), target);
  }

  // required uint32 limit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->limit(), target);
  }

  // required uint32 offset = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->offset(), target);
  }

  // repeated .Address addr = 5 [(.nanopb) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addr_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->addr(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ListAddressReply)
  return target;
}

size_t ListAddressReply::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ListAddressReply)
  size_t total_size = 0;

  if (has_total_records()) {
    // required uint32 total_records = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_records());
  }

  if (has_total_pages()) {
    // required uint32 total_pages = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_pages());
  }

  if (has_limit()) {
    // required uint32 limit = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit());
  }

  if (has_offset()) {
    // required uint32 offset = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());
  }

  return total_size;
}
size_t ListAddressReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ListAddressReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 total_records = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_records());

    // required uint32 total_pages = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_pages());

    // required uint32 limit = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit());

    // required uint32 offset = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .Address addr = 5 [(.nanopb) = {
  {
    unsigned int count = static_cast<unsigned int>(this->addr_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->addr(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListAddressReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ListAddressReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ListAddressReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListAddressReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ListAddressReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ListAddressReply)
    MergeFrom(*source);
  }
}

void ListAddressReply::MergeFrom(const ListAddressReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ListAddressReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addr_.MergeFrom(from.addr_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      total_records_ = from.total_records_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_pages_ = from.total_pages_;
    }
    if (cached_has_bits & 0x00000004u) {
      limit_ = from.limit_;
    }
    if (cached_has_bits & 0x00000008u) {
      offset_ = from.offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ListAddressReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ListAddressReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListAddressReply::CopyFrom(const ListAddressReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ListAddressReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListAddressReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->addr())) return false;
  return true;
}

void ListAddressReply::Swap(ListAddressReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListAddressReply::InternalSwap(ListAddressReply* other) {
  using std::swap;
  addr_.InternalSwap(&other->addr_);
  swap(total_records_, other->total_records_);
  swap(total_pages_, other->total_pages_);
  swap(limit_, other->limit_);
  swap(offset_, other->offset_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListAddressReply::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListAddressReply

// required uint32 total_records = 1;
bool ListAddressReply::has_total_records() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ListAddressReply::set_has_total_records() {
  _has_bits_[0] |= 0x00000001u;
}
void ListAddressReply::clear_has_total_records() {
  _has_bits_[0] &= ~0x00000001u;
}
void ListAddressReply::clear_total_records() {
  total_records_ = 0u;
  clear_has_total_records();
}
::google::protobuf::uint32 ListAddressReply::total_records() const {
  // @@protoc_insertion_point(field_get:ListAddressReply.total_records)
  return total_records_;
}
void ListAddressReply::set_total_records(::google::protobuf::uint32 value) {
  set_has_total_records();
  total_records_ = value;
  // @@protoc_insertion_point(field_set:ListAddressReply.total_records)
}

// required uint32 total_pages = 2;
bool ListAddressReply::has_total_pages() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ListAddressReply::set_has_total_pages() {
  _has_bits_[0] |= 0x00000002u;
}
void ListAddressReply::clear_has_total_pages() {
  _has_bits_[0] &= ~0x00000002u;
}
void ListAddressReply::clear_total_pages() {
  total_pages_ = 0u;
  clear_has_total_pages();
}
::google::protobuf::uint32 ListAddressReply::total_pages() const {
  // @@protoc_insertion_point(field_get:ListAddressReply.total_pages)
  return total_pages_;
}
void ListAddressReply::set_total_pages(::google::protobuf::uint32 value) {
  set_has_total_pages();
  total_pages_ = value;
  // @@protoc_insertion_point(field_set:ListAddressReply.total_pages)
}

// required uint32 limit = 3;
bool ListAddressReply::has_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ListAddressReply::set_has_limit() {
  _has_bits_[0] |= 0x00000004u;
}
void ListAddressReply::clear_has_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
void ListAddressReply::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
::google::protobuf::uint32 ListAddressReply::limit() const {
  // @@protoc_insertion_point(field_get:ListAddressReply.limit)
  return limit_;
}
void ListAddressReply::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:ListAddressReply.limit)
}

// required uint32 offset = 4;
bool ListAddressReply::has_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ListAddressReply::set_has_offset() {
  _has_bits_[0] |= 0x00000008u;
}
void ListAddressReply::clear_has_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
void ListAddressReply::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
::google::protobuf::uint32 ListAddressReply::offset() const {
  // @@protoc_insertion_point(field_get:ListAddressReply.offset)
  return offset_;
}
void ListAddressReply::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:ListAddressReply.offset)
}

// repeated .Address addr = 5 [(.nanopb) = {
int ListAddressReply::addr_size() const {
  return addr_.size();
}
void ListAddressReply::clear_addr() {
  addr_.Clear();
}
const ::Address& ListAddressReply::addr(int index) const {
  // @@protoc_insertion_point(field_get:ListAddressReply.addr)
  return addr_.Get(index);
}
::Address* ListAddressReply::mutable_addr(int index) {
  // @@protoc_insertion_point(field_mutable:ListAddressReply.addr)
  return addr_.Mutable(index);
}
::Address* ListAddressReply::add_addr() {
  // @@protoc_insertion_point(field_add:ListAddressReply.addr)
  return addr_.Add();
}
::google::protobuf::RepeatedPtrField< ::Address >*
ListAddressReply::mutable_addr() {
  // @@protoc_insertion_point(field_mutable_list:ListAddressReply.addr)
  return &addr_;
}
const ::google::protobuf::RepeatedPtrField< ::Address >&
ListAddressReply::addr() const {
  // @@protoc_insertion_point(field_list:ListAddressReply.addr)
  return addr_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListSecretRequest::kPasswordFieldNumber;
const int ListSecretRequest::kTypeFieldNumber;
const int ListSecretRequest::kSiteFieldNumber;
const int ListSecretRequest::kAccountFieldNumber;
const int ListSecretRequest::kOffsetFieldNumber;
const int ListSecretRequest::kLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListSecretRequest::ListSecretRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ListSecretRequest)
}
ListSecretRequest::ListSecretRequest(const ListSecretRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&limit_) -
    reinterpret_cast<char*>(&type_)) + sizeof(limit_));
  // @@protoc_insertion_point(copy_constructor:ListSecretRequest)
}

void ListSecretRequest::SharedCtor() {
  _cached_size_ = 0;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&type_)) + sizeof(limit_));
}

ListSecretRequest::~ListSecretRequest() {
  // @@protoc_insertion_point(destructor:ListSecretRequest)
  SharedDtor();
}

void ListSecretRequest::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListSecretRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListSecretRequest::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListSecretRequest& ListSecretRequest::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListSecretRequest* ListSecretRequest::New(::google::protobuf::Arena* arena) const {
  ListSecretRequest* n = new ListSecretRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListSecretRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ListSecretRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_password()) {
    GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*password_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 62u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&limit_) -
        reinterpret_cast<char*>(&type_)) + sizeof(limit_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ListSecretRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ListSecretRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string password = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ListSecretRequest.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 site = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_site();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_account();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 offset = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 limit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ListSecretRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ListSecretRequest)
  return false;
#undef DO_
}

void ListSecretRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ListSecretRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ListSecretRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->password(), output);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 site = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->site(), output);
  }

  // optional uint32 account = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->account(), output);
  }

  // required uint32 offset = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->offset(), output);
  }

  // required uint32 limit = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ListSecretRequest)
}

::google::protobuf::uint8* ListSecretRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ListSecretRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ListSecretRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->password(), target);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 site = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->site(), target);
  }

  // optional uint32 account = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->account(), target);
  }

  // required uint32 offset = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->offset(), target);
  }

  // required uint32 limit = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ListSecretRequest)
  return target;
}

size_t ListSecretRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ListSecretRequest)
  size_t total_size = 0;

  if (has_password()) {
    // required string password = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  if (has_type()) {
    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_offset()) {
    // required uint32 offset = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());
  }

  if (has_limit()) {
    // required uint32 limit = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit());
  }

  return total_size;
}
size_t ListSecretRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ListSecretRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000033) ^ 0x00000033) == 0) {  // All required fields are present.
    // required string password = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());

    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 offset = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());

    // required uint32 limit = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 12u) {
    // optional uint32 site = 3;
    if (has_site()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->site());
    }

    // optional uint32 account = 4;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListSecretRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ListSecretRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListSecretRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListSecretRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ListSecretRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ListSecretRequest)
    MergeFrom(*source);
  }
}

void ListSecretRequest::MergeFrom(const ListSecretRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ListSecretRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      site_ = from.site_;
    }
    if (cached_has_bits & 0x00000008u) {
      account_ = from.account_;
    }
    if (cached_has_bits & 0x00000010u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000020u) {
      limit_ = from.limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ListSecretRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ListSecretRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSecretRequest::CopyFrom(const ListSecretRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ListSecretRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSecretRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000033) != 0x00000033) return false;
  return true;
}

void ListSecretRequest::Swap(ListSecretRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListSecretRequest::InternalSwap(ListSecretRequest* other) {
  using std::swap;
  password_.Swap(&other->password_);
  swap(type_, other->type_);
  swap(site_, other->site_);
  swap(account_, other->account_);
  swap(offset_, other->offset_);
  swap(limit_, other->limit_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListSecretRequest::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListSecretRequest

// required string password = 1;
bool ListSecretRequest::has_password() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ListSecretRequest::set_has_password() {
  _has_bits_[0] |= 0x00000001u;
}
void ListSecretRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000001u;
}
void ListSecretRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& ListSecretRequest::password() const {
  // @@protoc_insertion_point(field_get:ListSecretRequest.password)
  return password_.GetNoArena();
}
void ListSecretRequest::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ListSecretRequest.password)
}
#if LANG_CXX11
void ListSecretRequest::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ListSecretRequest.password)
}
#endif
void ListSecretRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ListSecretRequest.password)
}
void ListSecretRequest::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ListSecretRequest.password)
}
::std::string* ListSecretRequest::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:ListSecretRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ListSecretRequest::release_password() {
  // @@protoc_insertion_point(field_release:ListSecretRequest.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ListSecretRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:ListSecretRequest.password)
}

// required uint32 type = 2;
bool ListSecretRequest::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ListSecretRequest::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void ListSecretRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void ListSecretRequest::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 ListSecretRequest::type() const {
  // @@protoc_insertion_point(field_get:ListSecretRequest.type)
  return type_;
}
void ListSecretRequest::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:ListSecretRequest.type)
}

// optional uint32 site = 3;
bool ListSecretRequest::has_site() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ListSecretRequest::set_has_site() {
  _has_bits_[0] |= 0x00000004u;
}
void ListSecretRequest::clear_has_site() {
  _has_bits_[0] &= ~0x00000004u;
}
void ListSecretRequest::clear_site() {
  site_ = 0u;
  clear_has_site();
}
::google::protobuf::uint32 ListSecretRequest::site() const {
  // @@protoc_insertion_point(field_get:ListSecretRequest.site)
  return site_;
}
void ListSecretRequest::set_site(::google::protobuf::uint32 value) {
  set_has_site();
  site_ = value;
  // @@protoc_insertion_point(field_set:ListSecretRequest.site)
}

// optional uint32 account = 4;
bool ListSecretRequest::has_account() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ListSecretRequest::set_has_account() {
  _has_bits_[0] |= 0x00000008u;
}
void ListSecretRequest::clear_has_account() {
  _has_bits_[0] &= ~0x00000008u;
}
void ListSecretRequest::clear_account() {
  account_ = 0u;
  clear_has_account();
}
::google::protobuf::uint32 ListSecretRequest::account() const {
  // @@protoc_insertion_point(field_get:ListSecretRequest.account)
  return account_;
}
void ListSecretRequest::set_account(::google::protobuf::uint32 value) {
  set_has_account();
  account_ = value;
  // @@protoc_insertion_point(field_set:ListSecretRequest.account)
}

// required uint32 offset = 5;
bool ListSecretRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ListSecretRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000010u;
}
void ListSecretRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000010u;
}
void ListSecretRequest::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
::google::protobuf::uint32 ListSecretRequest::offset() const {
  // @@protoc_insertion_point(field_get:ListSecretRequest.offset)
  return offset_;
}
void ListSecretRequest::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:ListSecretRequest.offset)
}

// required uint32 limit = 6;
bool ListSecretRequest::has_limit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ListSecretRequest::set_has_limit() {
  _has_bits_[0] |= 0x00000020u;
}
void ListSecretRequest::clear_has_limit() {
  _has_bits_[0] &= ~0x00000020u;
}
void ListSecretRequest::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
::google::protobuf::uint32 ListSecretRequest::limit() const {
  // @@protoc_insertion_point(field_get:ListSecretRequest.limit)
  return limit_;
}
void ListSecretRequest::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:ListSecretRequest.limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Secret::kTypeFieldNumber;
const int Secret::kSiteFieldNumber;
const int Secret::kAccountFieldNumber;
const int Secret::kIdxFieldNumber;
const int Secret::kSSecretFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Secret::Secret()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Secret)
}
Secret::Secret(const Secret& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  s_secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_s_secret()) {
    s_secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_secret_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&idx_) -
    reinterpret_cast<char*>(&type_)) + sizeof(idx_));
  // @@protoc_insertion_point(copy_constructor:Secret)
}

void Secret::SharedCtor() {
  _cached_size_ = 0;
  s_secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) -
      reinterpret_cast<char*>(&type_)) + sizeof(idx_));
}

Secret::~Secret() {
  // @@protoc_insertion_point(destructor:Secret)
  SharedDtor();
}

void Secret::SharedDtor() {
  s_secret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Secret::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Secret::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Secret& Secret::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

Secret* Secret::New(::google::protobuf::Arena* arena) const {
  Secret* n = new Secret;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Secret::Clear() {
// @@protoc_insertion_point(message_clear_start:Secret)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_s_secret()) {
    GOOGLE_DCHECK(!s_secret_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*s_secret_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 30u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&idx_) -
        reinterpret_cast<char*>(&type_)) + sizeof(idx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Secret::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Secret)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 site = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_site();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &site_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_account();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 idx = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes s_secret = 5 [(.nanopb) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_s_secret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Secret)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Secret)
  return false;
#undef DO_
}

void Secret::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Secret)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // required uint32 site = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->site(), output);
  }

  // required uint32 account = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->account(), output);
  }

  // required uint32 idx = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->idx(), output);
  }

  // required bytes s_secret = 5 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->s_secret(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Secret)
}

::google::protobuf::uint8* Secret::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Secret)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // required uint32 site = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->site(), target);
  }

  // required uint32 account = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->account(), target);
  }

  // required uint32 idx = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->idx(), target);
  }

  // required bytes s_secret = 5 [(.nanopb) = {
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->s_secret(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Secret)
  return target;
}

size_t Secret::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Secret)
  size_t total_size = 0;

  if (has_s_secret()) {
    // required bytes s_secret = 5 [(.nanopb) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->s_secret());
  }

  if (has_type()) {
    // required uint32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_site()) {
    // required uint32 site = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->site());
  }

  if (has_account()) {
    // required uint32 account = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account());
  }

  if (has_idx()) {
    // required uint32 idx = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idx());
  }

  return total_size;
}
size_t Secret::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Secret)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required bytes s_secret = 5 [(.nanopb) = {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->s_secret());

    // required uint32 type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 site = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->site());

    // required uint32 account = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account());

    // required uint32 idx = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idx());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Secret::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Secret)
  GOOGLE_DCHECK_NE(&from, this);
  const Secret* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Secret>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Secret)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Secret)
    MergeFrom(*source);
  }
}

void Secret::MergeFrom(const Secret& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Secret)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_s_secret();
      s_secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_secret_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      site_ = from.site_;
    }
    if (cached_has_bits & 0x00000008u) {
      account_ = from.account_;
    }
    if (cached_has_bits & 0x00000010u) {
      idx_ = from.idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Secret::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Secret)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Secret::CopyFrom(const Secret& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Secret)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Secret::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  return true;
}

void Secret::Swap(Secret* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Secret::InternalSwap(Secret* other) {
  using std::swap;
  s_secret_.Swap(&other->s_secret_);
  swap(type_, other->type_);
  swap(site_, other->site_);
  swap(account_, other->account_);
  swap(idx_, other->idx_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Secret::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Secret

// required uint32 type = 1;
bool Secret::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Secret::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void Secret::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void Secret::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 Secret::type() const {
  // @@protoc_insertion_point(field_get:Secret.type)
  return type_;
}
void Secret::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Secret.type)
}

// required uint32 site = 2;
bool Secret::has_site() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Secret::set_has_site() {
  _has_bits_[0] |= 0x00000004u;
}
void Secret::clear_has_site() {
  _has_bits_[0] &= ~0x00000004u;
}
void Secret::clear_site() {
  site_ = 0u;
  clear_has_site();
}
::google::protobuf::uint32 Secret::site() const {
  // @@protoc_insertion_point(field_get:Secret.site)
  return site_;
}
void Secret::set_site(::google::protobuf::uint32 value) {
  set_has_site();
  site_ = value;
  // @@protoc_insertion_point(field_set:Secret.site)
}

// required uint32 account = 3;
bool Secret::has_account() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Secret::set_has_account() {
  _has_bits_[0] |= 0x00000008u;
}
void Secret::clear_has_account() {
  _has_bits_[0] &= ~0x00000008u;
}
void Secret::clear_account() {
  account_ = 0u;
  clear_has_account();
}
::google::protobuf::uint32 Secret::account() const {
  // @@protoc_insertion_point(field_get:Secret.account)
  return account_;
}
void Secret::set_account(::google::protobuf::uint32 value) {
  set_has_account();
  account_ = value;
  // @@protoc_insertion_point(field_set:Secret.account)
}

// required uint32 idx = 4;
bool Secret::has_idx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Secret::set_has_idx() {
  _has_bits_[0] |= 0x00000010u;
}
void Secret::clear_has_idx() {
  _has_bits_[0] &= ~0x00000010u;
}
void Secret::clear_idx() {
  idx_ = 0u;
  clear_has_idx();
}
::google::protobuf::uint32 Secret::idx() const {
  // @@protoc_insertion_point(field_get:Secret.idx)
  return idx_;
}
void Secret::set_idx(::google::protobuf::uint32 value) {
  set_has_idx();
  idx_ = value;
  // @@protoc_insertion_point(field_set:Secret.idx)
}

// required bytes s_secret = 5 [(.nanopb) = {
bool Secret::has_s_secret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Secret::set_has_s_secret() {
  _has_bits_[0] |= 0x00000001u;
}
void Secret::clear_has_s_secret() {
  _has_bits_[0] &= ~0x00000001u;
}
void Secret::clear_s_secret() {
  s_secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_s_secret();
}
const ::std::string& Secret::s_secret() const {
  // @@protoc_insertion_point(field_get:Secret.s_secret)
  return s_secret_.GetNoArena();
}
void Secret::set_s_secret(const ::std::string& value) {
  set_has_s_secret();
  s_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Secret.s_secret)
}
#if LANG_CXX11
void Secret::set_s_secret(::std::string&& value) {
  set_has_s_secret();
  s_secret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Secret.s_secret)
}
#endif
void Secret::set_s_secret(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_s_secret();
  s_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Secret.s_secret)
}
void Secret::set_s_secret(const void* value, size_t size) {
  set_has_s_secret();
  s_secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Secret.s_secret)
}
::std::string* Secret::mutable_s_secret() {
  set_has_s_secret();
  // @@protoc_insertion_point(field_mutable:Secret.s_secret)
  return s_secret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Secret::release_s_secret() {
  // @@protoc_insertion_point(field_release:Secret.s_secret)
  clear_has_s_secret();
  return s_secret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Secret::set_allocated_s_secret(::std::string* s_secret) {
  if (s_secret != NULL) {
    set_has_s_secret();
  } else {
    clear_has_s_secret();
  }
  s_secret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), s_secret);
  // @@protoc_insertion_point(field_set_allocated:Secret.s_secret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListSecretReply::kTotalRecordsFieldNumber;
const int ListSecretReply::kTotalPagesFieldNumber;
const int ListSecretReply::kLimitFieldNumber;
const int ListSecretReply::kOffsetFieldNumber;
const int ListSecretReply::kSecretFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListSecretReply::ListSecretReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ListSecretReply)
}
ListSecretReply::ListSecretReply(const ListSecretReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      secret_(from.secret_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&total_records_, &from.total_records_,
    static_cast<size_t>(reinterpret_cast<char*>(&offset_) -
    reinterpret_cast<char*>(&total_records_)) + sizeof(offset_));
  // @@protoc_insertion_point(copy_constructor:ListSecretReply)
}

void ListSecretReply::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&total_records_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&offset_) -
      reinterpret_cast<char*>(&total_records_)) + sizeof(offset_));
}

ListSecretReply::~ListSecretReply() {
  // @@protoc_insertion_point(destructor:ListSecretReply)
  SharedDtor();
}

void ListSecretReply::SharedDtor() {
}

void ListSecretReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListSecretReply::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListSecretReply& ListSecretReply::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

ListSecretReply* ListSecretReply::New(::google::protobuf::Arena* arena) const {
  ListSecretReply* n = new ListSecretReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ListSecretReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ListSecretReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  secret_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&total_records_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&offset_) -
        reinterpret_cast<char*>(&total_records_)) + sizeof(offset_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ListSecretReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ListSecretReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 total_records = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_total_records();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_records_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 total_pages = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_total_pages();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_pages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 limit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 offset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Secret secret = 5 [(.nanopb) = {
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_secret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ListSecretReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ListSecretReply)
  return false;
#undef DO_
}

void ListSecretReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ListSecretReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 total_records = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->total_records(), output);
  }

  // required uint32 total_pages = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_pages(), output);
  }

  // required uint32 limit = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->limit(), output);
  }

  // required uint32 offset = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->offset(), output);
  }

  // repeated .Secret secret = 5 [(.nanopb) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->secret_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->secret(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ListSecretReply)
}

::google::protobuf::uint8* ListSecretReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ListSecretReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 total_records = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->total_records(), target);
  }

  // required uint32 total_pages = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_pages(), target);
  }

  // required uint32 limit = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->limit(), target);
  }

  // required uint32 offset = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->offset(), target);
  }

  // repeated .Secret secret = 5 [(.nanopb) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->secret_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->secret(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ListSecretReply)
  return target;
}

size_t ListSecretReply::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ListSecretReply)
  size_t total_size = 0;

  if (has_total_records()) {
    // required uint32 total_records = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_records());
  }

  if (has_total_pages()) {
    // required uint32 total_pages = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_pages());
  }

  if (has_limit()) {
    // required uint32 limit = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit());
  }

  if (has_offset()) {
    // required uint32 offset = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());
  }

  return total_size;
}
size_t ListSecretReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ListSecretReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 total_records = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_records());

    // required uint32 total_pages = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->total_pages());

    // required uint32 limit = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->limit());

    // required uint32 offset = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->offset());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .Secret secret = 5 [(.nanopb) = {
  {
    unsigned int count = static_cast<unsigned int>(this->secret_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->secret(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListSecretReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ListSecretReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ListSecretReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListSecretReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ListSecretReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ListSecretReply)
    MergeFrom(*source);
  }
}

void ListSecretReply::MergeFrom(const ListSecretReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ListSecretReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  secret_.MergeFrom(from.secret_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      total_records_ = from.total_records_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_pages_ = from.total_pages_;
    }
    if (cached_has_bits & 0x00000004u) {
      limit_ = from.limit_;
    }
    if (cached_has_bits & 0x00000008u) {
      offset_ = from.offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ListSecretReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ListSecretReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSecretReply::CopyFrom(const ListSecretReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ListSecretReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSecretReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->secret())) return false;
  return true;
}

void ListSecretReply::Swap(ListSecretReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ListSecretReply::InternalSwap(ListSecretReply* other) {
  using std::swap;
  secret_.InternalSwap(&other->secret_);
  swap(total_records_, other->total_records_);
  swap(total_pages_, other->total_pages_);
  swap(limit_, other->limit_);
  swap(offset_, other->offset_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListSecretReply::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ListSecretReply

// required uint32 total_records = 1;
bool ListSecretReply::has_total_records() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ListSecretReply::set_has_total_records() {
  _has_bits_[0] |= 0x00000001u;
}
void ListSecretReply::clear_has_total_records() {
  _has_bits_[0] &= ~0x00000001u;
}
void ListSecretReply::clear_total_records() {
  total_records_ = 0u;
  clear_has_total_records();
}
::google::protobuf::uint32 ListSecretReply::total_records() const {
  // @@protoc_insertion_point(field_get:ListSecretReply.total_records)
  return total_records_;
}
void ListSecretReply::set_total_records(::google::protobuf::uint32 value) {
  set_has_total_records();
  total_records_ = value;
  // @@protoc_insertion_point(field_set:ListSecretReply.total_records)
}

// required uint32 total_pages = 2;
bool ListSecretReply::has_total_pages() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ListSecretReply::set_has_total_pages() {
  _has_bits_[0] |= 0x00000002u;
}
void ListSecretReply::clear_has_total_pages() {
  _has_bits_[0] &= ~0x00000002u;
}
void ListSecretReply::clear_total_pages() {
  total_pages_ = 0u;
  clear_has_total_pages();
}
::google::protobuf::uint32 ListSecretReply::total_pages() const {
  // @@protoc_insertion_point(field_get:ListSecretReply.total_pages)
  return total_pages_;
}
void ListSecretReply::set_total_pages(::google::protobuf::uint32 value) {
  set_has_total_pages();
  total_pages_ = value;
  // @@protoc_insertion_point(field_set:ListSecretReply.total_pages)
}

// required uint32 limit = 3;
bool ListSecretReply::has_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ListSecretReply::set_has_limit() {
  _has_bits_[0] |= 0x00000004u;
}
void ListSecretReply::clear_has_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
void ListSecretReply::clear_limit() {
  limit_ = 0u;
  clear_has_limit();
}
::google::protobuf::uint32 ListSecretReply::limit() const {
  // @@protoc_insertion_point(field_get:ListSecretReply.limit)
  return limit_;
}
void ListSecretReply::set_limit(::google::protobuf::uint32 value) {
  set_has_limit();
  limit_ = value;
  // @@protoc_insertion_point(field_set:ListSecretReply.limit)
}

// required uint32 offset = 4;
bool ListSecretReply::has_offset() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ListSecretReply::set_has_offset() {
  _has_bits_[0] |= 0x00000008u;
}
void ListSecretReply::clear_has_offset() {
  _has_bits_[0] &= ~0x00000008u;
}
void ListSecretReply::clear_offset() {
  offset_ = 0u;
  clear_has_offset();
}
::google::protobuf::uint32 ListSecretReply::offset() const {
  // @@protoc_insertion_point(field_get:ListSecretReply.offset)
  return offset_;
}
void ListSecretReply::set_offset(::google::protobuf::uint32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:ListSecretReply.offset)
}

// repeated .Secret secret = 5 [(.nanopb) = {
int ListSecretReply::secret_size() const {
  return secret_.size();
}
void ListSecretReply::clear_secret() {
  secret_.Clear();
}
const ::Secret& ListSecretReply::secret(int index) const {
  // @@protoc_insertion_point(field_get:ListSecretReply.secret)
  return secret_.Get(index);
}
::Secret* ListSecretReply::mutable_secret(int index) {
  // @@protoc_insertion_point(field_mutable:ListSecretReply.secret)
  return secret_.Mutable(index);
}
::Secret* ListSecretReply::add_secret() {
  // @@protoc_insertion_point(field_add:ListSecretReply.secret)
  return secret_.Add();
}
::google::protobuf::RepeatedPtrField< ::Secret >*
ListSecretReply::mutable_secret() {
  // @@protoc_insertion_point(field_mutable_list:ListSecretReply.secret)
  return &secret_;
}
const ::google::protobuf::RepeatedPtrField< ::Secret >&
ListSecretReply::secret() const {
  // @@protoc_insertion_point(field_list:ListSecretReply.secret)
  return secret_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoveCoinRequest::kPasswordFieldNumber;
const int RemoveCoinRequest::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoveCoinRequest::RemoveCoinRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:RemoveCoinRequest)
}
RemoveCoinRequest::RemoveCoinRequest(const RemoveCoinRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:RemoveCoinRequest)
}

void RemoveCoinRequest::SharedCtor() {
  _cached_size_ = 0;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0u;
}

RemoveCoinRequest::~RemoveCoinRequest() {
  // @@protoc_insertion_point(destructor:RemoveCoinRequest)
  SharedDtor();
}

void RemoveCoinRequest::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RemoveCoinRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveCoinRequest::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RemoveCoinRequest& RemoveCoinRequest::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

RemoveCoinRequest* RemoveCoinRequest::New(::google::protobuf::Arena* arena) const {
  RemoveCoinRequest* n = new RemoveCoinRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemoveCoinRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoveCoinRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_password()) {
    GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*password_.UnsafeRawStringPointer())->clear();
  }
  type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RemoveCoinRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RemoveCoinRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string password = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "RemoveCoinRequest.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RemoveCoinRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RemoveCoinRequest)
  return false;
#undef DO_
}

void RemoveCoinRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RemoveCoinRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RemoveCoinRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->password(), output);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RemoveCoinRequest)
}

::google::protobuf::uint8* RemoveCoinRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RemoveCoinRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "RemoveCoinRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->password(), target);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoveCoinRequest)
  return target;
}

size_t RemoveCoinRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RemoveCoinRequest)
  size_t total_size = 0;

  if (has_password()) {
    // required string password = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  if (has_type()) {
    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  return total_size;
}
size_t RemoveCoinRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoveCoinRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string password = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());

    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveCoinRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RemoveCoinRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveCoinRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemoveCoinRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RemoveCoinRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RemoveCoinRequest)
    MergeFrom(*source);
  }
}

void RemoveCoinRequest::MergeFrom(const RemoveCoinRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemoveCoinRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RemoveCoinRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RemoveCoinRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveCoinRequest::CopyFrom(const RemoveCoinRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoveCoinRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveCoinRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void RemoveCoinRequest::Swap(RemoveCoinRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoveCoinRequest::InternalSwap(RemoveCoinRequest* other) {
  using std::swap;
  password_.Swap(&other->password_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemoveCoinRequest::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemoveCoinRequest

// required string password = 1;
bool RemoveCoinRequest::has_password() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RemoveCoinRequest::set_has_password() {
  _has_bits_[0] |= 0x00000001u;
}
void RemoveCoinRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000001u;
}
void RemoveCoinRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& RemoveCoinRequest::password() const {
  // @@protoc_insertion_point(field_get:RemoveCoinRequest.password)
  return password_.GetNoArena();
}
void RemoveCoinRequest::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:RemoveCoinRequest.password)
}
#if LANG_CXX11
void RemoveCoinRequest::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RemoveCoinRequest.password)
}
#endif
void RemoveCoinRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RemoveCoinRequest.password)
}
void RemoveCoinRequest::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RemoveCoinRequest.password)
}
::std::string* RemoveCoinRequest::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:RemoveCoinRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RemoveCoinRequest::release_password() {
  // @@protoc_insertion_point(field_release:RemoveCoinRequest.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemoveCoinRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:RemoveCoinRequest.password)
}

// required uint32 type = 2;
bool RemoveCoinRequest::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RemoveCoinRequest::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void RemoveCoinRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void RemoveCoinRequest::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 RemoveCoinRequest::type() const {
  // @@protoc_insertion_point(field_get:RemoveCoinRequest.type)
  return type_;
}
void RemoveCoinRequest::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:RemoveCoinRequest.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoveCoinReply::RemoveCoinReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:RemoveCoinReply)
}
RemoveCoinReply::RemoveCoinReply(const RemoveCoinReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RemoveCoinReply)
}

void RemoveCoinReply::SharedCtor() {
  _cached_size_ = 0;
}

RemoveCoinReply::~RemoveCoinReply() {
  // @@protoc_insertion_point(destructor:RemoveCoinReply)
  SharedDtor();
}

void RemoveCoinReply::SharedDtor() {
}

void RemoveCoinReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemoveCoinReply::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RemoveCoinReply& RemoveCoinReply::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

RemoveCoinReply* RemoveCoinReply::New(::google::protobuf::Arena* arena) const {
  RemoveCoinReply* n = new RemoveCoinReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemoveCoinReply::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoveCoinReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RemoveCoinReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RemoveCoinReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:RemoveCoinReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RemoveCoinReply)
  return false;
#undef DO_
}

void RemoveCoinReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RemoveCoinReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RemoveCoinReply)
}

::google::protobuf::uint8* RemoveCoinReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RemoveCoinReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoveCoinReply)
  return target;
}

size_t RemoveCoinReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoveCoinReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveCoinReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RemoveCoinReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoveCoinReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RemoveCoinReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RemoveCoinReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RemoveCoinReply)
    MergeFrom(*source);
  }
}

void RemoveCoinReply::MergeFrom(const RemoveCoinReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemoveCoinReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void RemoveCoinReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RemoveCoinReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveCoinReply::CopyFrom(const RemoveCoinReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoveCoinReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveCoinReply::IsInitialized() const {
  return true;
}

void RemoveCoinReply::Swap(RemoveCoinReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoveCoinReply::InternalSwap(RemoveCoinReply* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RemoveCoinReply::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemoveCoinReply

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteSecretRequest::kPasswordFieldNumber;
const int DeleteSecretRequest::kTypeFieldNumber;
const int DeleteSecretRequest::kIdxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteSecretRequest::DeleteSecretRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeleteSecretRequest)
}
DeleteSecretRequest::DeleteSecretRequest(const DeleteSecretRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&idx_) -
    reinterpret_cast<char*>(&type_)) + sizeof(idx_));
  // @@protoc_insertion_point(copy_constructor:DeleteSecretRequest)
}

void DeleteSecretRequest::SharedCtor() {
  _cached_size_ = 0;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) -
      reinterpret_cast<char*>(&type_)) + sizeof(idx_));
}

DeleteSecretRequest::~DeleteSecretRequest() {
  // @@protoc_insertion_point(destructor:DeleteSecretRequest)
  SharedDtor();
}

void DeleteSecretRequest::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteSecretRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteSecretRequest::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteSecretRequest& DeleteSecretRequest::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeleteSecretRequest* DeleteSecretRequest::New(::google::protobuf::Arena* arena) const {
  DeleteSecretRequest* n = new DeleteSecretRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteSecretRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DeleteSecretRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_password()) {
    GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*password_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&idx_) -
        reinterpret_cast<char*>(&type_)) + sizeof(idx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeleteSecretRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeleteSecretRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string password = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DeleteSecretRequest.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 idx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeleteSecretRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeleteSecretRequest)
  return false;
#undef DO_
}

void DeleteSecretRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeleteSecretRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeleteSecretRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->password(), output);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 idx = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->idx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeleteSecretRequest)
}

::google::protobuf::uint8* DeleteSecretRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DeleteSecretRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeleteSecretRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->password(), target);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 idx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->idx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeleteSecretRequest)
  return target;
}

size_t DeleteSecretRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DeleteSecretRequest)
  size_t total_size = 0;

  if (has_password()) {
    // required string password = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  if (has_type()) {
    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_idx()) {
    // required uint32 idx = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idx());
  }

  return total_size;
}
size_t DeleteSecretRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeleteSecretRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string password = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());

    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 idx = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idx());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteSecretRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeleteSecretRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteSecretRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteSecretRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeleteSecretRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeleteSecretRequest)
    MergeFrom(*source);
  }
}

void DeleteSecretRequest::MergeFrom(const DeleteSecretRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeleteSecretRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      idx_ = from.idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeleteSecretRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeleteSecretRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSecretRequest::CopyFrom(const DeleteSecretRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeleteSecretRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSecretRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void DeleteSecretRequest::Swap(DeleteSecretRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteSecretRequest::InternalSwap(DeleteSecretRequest* other) {
  using std::swap;
  password_.Swap(&other->password_);
  swap(type_, other->type_);
  swap(idx_, other->idx_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteSecretRequest::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteSecretRequest

// required string password = 1;
bool DeleteSecretRequest::has_password() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeleteSecretRequest::set_has_password() {
  _has_bits_[0] |= 0x00000001u;
}
void DeleteSecretRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeleteSecretRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& DeleteSecretRequest::password() const {
  // @@protoc_insertion_point(field_get:DeleteSecretRequest.password)
  return password_.GetNoArena();
}
void DeleteSecretRequest::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeleteSecretRequest.password)
}
#if LANG_CXX11
void DeleteSecretRequest::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeleteSecretRequest.password)
}
#endif
void DeleteSecretRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeleteSecretRequest.password)
}
void DeleteSecretRequest::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeleteSecretRequest.password)
}
::std::string* DeleteSecretRequest::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:DeleteSecretRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteSecretRequest::release_password() {
  // @@protoc_insertion_point(field_release:DeleteSecretRequest.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteSecretRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:DeleteSecretRequest.password)
}

// required uint32 type = 2;
bool DeleteSecretRequest::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeleteSecretRequest::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void DeleteSecretRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeleteSecretRequest::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 DeleteSecretRequest::type() const {
  // @@protoc_insertion_point(field_get:DeleteSecretRequest.type)
  return type_;
}
void DeleteSecretRequest::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:DeleteSecretRequest.type)
}

// required uint32 idx = 3;
bool DeleteSecretRequest::has_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeleteSecretRequest::set_has_idx() {
  _has_bits_[0] |= 0x00000004u;
}
void DeleteSecretRequest::clear_has_idx() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeleteSecretRequest::clear_idx() {
  idx_ = 0u;
  clear_has_idx();
}
::google::protobuf::uint32 DeleteSecretRequest::idx() const {
  // @@protoc_insertion_point(field_get:DeleteSecretRequest.idx)
  return idx_;
}
void DeleteSecretRequest::set_idx(::google::protobuf::uint32 value) {
  set_has_idx();
  idx_ = value;
  // @@protoc_insertion_point(field_set:DeleteSecretRequest.idx)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteSecretReply::DeleteSecretReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeleteSecretReply)
}
DeleteSecretReply::DeleteSecretReply(const DeleteSecretReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DeleteSecretReply)
}

void DeleteSecretReply::SharedCtor() {
  _cached_size_ = 0;
}

DeleteSecretReply::~DeleteSecretReply() {
  // @@protoc_insertion_point(destructor:DeleteSecretReply)
  SharedDtor();
}

void DeleteSecretReply::SharedDtor() {
}

void DeleteSecretReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteSecretReply::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteSecretReply& DeleteSecretReply::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeleteSecretReply* DeleteSecretReply::New(::google::protobuf::Arena* arena) const {
  DeleteSecretReply* n = new DeleteSecretReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteSecretReply::Clear() {
// @@protoc_insertion_point(message_clear_start:DeleteSecretReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeleteSecretReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeleteSecretReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:DeleteSecretReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeleteSecretReply)
  return false;
#undef DO_
}

void DeleteSecretReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeleteSecretReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeleteSecretReply)
}

::google::protobuf::uint8* DeleteSecretReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DeleteSecretReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeleteSecretReply)
  return target;
}

size_t DeleteSecretReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeleteSecretReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteSecretReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeleteSecretReply)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteSecretReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteSecretReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeleteSecretReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeleteSecretReply)
    MergeFrom(*source);
  }
}

void DeleteSecretReply::MergeFrom(const DeleteSecretReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeleteSecretReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteSecretReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeleteSecretReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSecretReply::CopyFrom(const DeleteSecretReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeleteSecretReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSecretReply::IsInitialized() const {
  return true;
}

void DeleteSecretReply::Swap(DeleteSecretReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteSecretReply::InternalSwap(DeleteSecretReply* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteSecretReply::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteSecretReply

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteAddressRequest::kPasswordFieldNumber;
const int DeleteAddressRequest::kTypeFieldNumber;
const int DeleteAddressRequest::kIdxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteAddressRequest::DeleteAddressRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeleteAddressRequest)
}
DeleteAddressRequest::DeleteAddressRequest(const DeleteAddressRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&idx_) -
    reinterpret_cast<char*>(&type_)) + sizeof(idx_));
  // @@protoc_insertion_point(copy_constructor:DeleteAddressRequest)
}

void DeleteAddressRequest::SharedCtor() {
  _cached_size_ = 0;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idx_) -
      reinterpret_cast<char*>(&type_)) + sizeof(idx_));
}

DeleteAddressRequest::~DeleteAddressRequest() {
  // @@protoc_insertion_point(destructor:DeleteAddressRequest)
  SharedDtor();
}

void DeleteAddressRequest::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteAddressRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteAddressRequest::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteAddressRequest& DeleteAddressRequest::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeleteAddressRequest* DeleteAddressRequest::New(::google::protobuf::Arena* arena) const {
  DeleteAddressRequest* n = new DeleteAddressRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteAddressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DeleteAddressRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_password()) {
    GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*password_.UnsafeRawStringPointer())->clear();
  }
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 6u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&idx_) -
        reinterpret_cast<char*>(&type_)) + sizeof(idx_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeleteAddressRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeleteAddressRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string password = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DeleteAddressRequest.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 idx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_idx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeleteAddressRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeleteAddressRequest)
  return false;
#undef DO_
}

void DeleteAddressRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeleteAddressRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeleteAddressRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->password(), output);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // required uint32 idx = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->idx(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeleteAddressRequest)
}

::google::protobuf::uint8* DeleteAddressRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DeleteAddressRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeleteAddressRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->password(), target);
  }

  // required uint32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // required uint32 idx = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->idx(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeleteAddressRequest)
  return target;
}

size_t DeleteAddressRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DeleteAddressRequest)
  size_t total_size = 0;

  if (has_password()) {
    // required string password = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }

  if (has_type()) {
    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  if (has_idx()) {
    // required uint32 idx = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idx());
  }

  return total_size;
}
size_t DeleteAddressRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeleteAddressRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string password = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());

    // required uint32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());

    // required uint32 idx = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->idx());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteAddressRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeleteAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteAddressRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteAddressRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeleteAddressRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeleteAddressRequest)
    MergeFrom(*source);
  }
}

void DeleteAddressRequest::MergeFrom(const DeleteAddressRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeleteAddressRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_password();
      password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      idx_ = from.idx_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeleteAddressRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeleteAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteAddressRequest::CopyFrom(const DeleteAddressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeleteAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAddressRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void DeleteAddressRequest::Swap(DeleteAddressRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteAddressRequest::InternalSwap(DeleteAddressRequest* other) {
  using std::swap;
  password_.Swap(&other->password_);
  swap(type_, other->type_);
  swap(idx_, other->idx_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteAddressRequest::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteAddressRequest

// required string password = 1;
bool DeleteAddressRequest::has_password() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeleteAddressRequest::set_has_password() {
  _has_bits_[0] |= 0x00000001u;
}
void DeleteAddressRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeleteAddressRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& DeleteAddressRequest::password() const {
  // @@protoc_insertion_point(field_get:DeleteAddressRequest.password)
  return password_.GetNoArena();
}
void DeleteAddressRequest::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeleteAddressRequest.password)
}
#if LANG_CXX11
void DeleteAddressRequest::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DeleteAddressRequest.password)
}
#endif
void DeleteAddressRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeleteAddressRequest.password)
}
void DeleteAddressRequest::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeleteAddressRequest.password)
}
::std::string* DeleteAddressRequest::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:DeleteAddressRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DeleteAddressRequest::release_password() {
  // @@protoc_insertion_point(field_release:DeleteAddressRequest.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DeleteAddressRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:DeleteAddressRequest.password)
}

// required uint32 type = 2;
bool DeleteAddressRequest::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeleteAddressRequest::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void DeleteAddressRequest::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeleteAddressRequest::clear_type() {
  type_ = 0u;
  clear_has_type();
}
::google::protobuf::uint32 DeleteAddressRequest::type() const {
  // @@protoc_insertion_point(field_get:DeleteAddressRequest.type)
  return type_;
}
void DeleteAddressRequest::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:DeleteAddressRequest.type)
}

// required uint32 idx = 3;
bool DeleteAddressRequest::has_idx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeleteAddressRequest::set_has_idx() {
  _has_bits_[0] |= 0x00000004u;
}
void DeleteAddressRequest::clear_has_idx() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeleteAddressRequest::clear_idx() {
  idx_ = 0u;
  clear_has_idx();
}
::google::protobuf::uint32 DeleteAddressRequest::idx() const {
  // @@protoc_insertion_point(field_get:DeleteAddressRequest.idx)
  return idx_;
}
void DeleteAddressRequest::set_idx(::google::protobuf::uint32 value) {
  set_has_idx();
  idx_ = value;
  // @@protoc_insertion_point(field_set:DeleteAddressRequest.idx)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteAddressReply::DeleteAddressReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeleteAddressReply)
}
DeleteAddressReply::DeleteAddressReply(const DeleteAddressReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DeleteAddressReply)
}

void DeleteAddressReply::SharedCtor() {
  _cached_size_ = 0;
}

DeleteAddressReply::~DeleteAddressReply() {
  // @@protoc_insertion_point(destructor:DeleteAddressReply)
  SharedDtor();
}

void DeleteAddressReply::SharedDtor() {
}

void DeleteAddressReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteAddressReply::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteAddressReply& DeleteAddressReply::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

DeleteAddressReply* DeleteAddressReply::New(::google::protobuf::Arena* arena) const {
  DeleteAddressReply* n = new DeleteAddressReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteAddressReply::Clear() {
// @@protoc_insertion_point(message_clear_start:DeleteAddressReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeleteAddressReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeleteAddressReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:DeleteAddressReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeleteAddressReply)
  return false;
#undef DO_
}

void DeleteAddressReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeleteAddressReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeleteAddressReply)
}

::google::protobuf::uint8* DeleteAddressReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DeleteAddressReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeleteAddressReply)
  return target;
}

size_t DeleteAddressReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DeleteAddressReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteAddressReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DeleteAddressReply)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteAddressReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteAddressReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DeleteAddressReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DeleteAddressReply)
    MergeFrom(*source);
  }
}

void DeleteAddressReply::MergeFrom(const DeleteAddressReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DeleteAddressReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DeleteAddressReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DeleteAddressReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteAddressReply::CopyFrom(const DeleteAddressReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DeleteAddressReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteAddressReply::IsInitialized() const {
  return true;
}

void DeleteAddressReply::Swap(DeleteAddressReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteAddressReply::InternalSwap(DeleteAddressReply* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteAddressReply::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeleteAddressReply

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResetRequest::kPasswordFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetRequest::ResetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ResetRequest)
}
ResetRequest::ResetRequest(const ResetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_password()) {
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
  // @@protoc_insertion_point(copy_constructor:ResetRequest)
}

void ResetRequest::SharedCtor() {
  _cached_size_ = 0;
  password_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ResetRequest::~ResetRequest() {
  // @@protoc_insertion_point(destructor:ResetRequest)
  SharedDtor();
}

void ResetRequest::SharedDtor() {
  password_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ResetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetRequest::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResetRequest& ResetRequest::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResetRequest* ResetRequest::New(::google::protobuf::Arena* arena) const {
  ResetRequest* n = new ResetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ResetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (has_password()) {
    GOOGLE_DCHECK(!password_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*password_.UnsafeRawStringPointer())->clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ResetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string password = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), static_cast<int>(this->password().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ResetRequest.password");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ResetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ResetRequest)
  return false;
#undef DO_
}

void ResetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ResetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ResetRequest.password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->password(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ResetRequest)
}

::google::protobuf::uint8* ResetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ResetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string password = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), static_cast<int>(this->password().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ResetRequest.password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->password(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResetRequest)
  return target;
}

size_t ResetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResetRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string password = 1;
  if (has_password()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->password());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ResetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ResetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ResetRequest)
    MergeFrom(*source);
  }
}

void ResetRequest::MergeFrom(const ResetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_password()) {
    set_has_password();
    password_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.password_);
  }
}

void ResetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ResetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetRequest::CopyFrom(const ResetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ResetRequest::Swap(ResetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResetRequest::InternalSwap(ResetRequest* other) {
  using std::swap;
  password_.Swap(&other->password_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResetRequest::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResetRequest

// required string password = 1;
bool ResetRequest::has_password() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ResetRequest::set_has_password() {
  _has_bits_[0] |= 0x00000001u;
}
void ResetRequest::clear_has_password() {
  _has_bits_[0] &= ~0x00000001u;
}
void ResetRequest::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_password();
}
const ::std::string& ResetRequest::password() const {
  // @@protoc_insertion_point(field_get:ResetRequest.password)
  return password_.GetNoArena();
}
void ResetRequest::set_password(const ::std::string& value) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ResetRequest.password)
}
#if LANG_CXX11
void ResetRequest::set_password(::std::string&& value) {
  set_has_password();
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ResetRequest.password)
}
#endif
void ResetRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ResetRequest.password)
}
void ResetRequest::set_password(const char* value, size_t size) {
  set_has_password();
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ResetRequest.password)
}
::std::string* ResetRequest::mutable_password() {
  set_has_password();
  // @@protoc_insertion_point(field_mutable:ResetRequest.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ResetRequest::release_password() {
  // @@protoc_insertion_point(field_release:ResetRequest.password)
  clear_has_password();
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ResetRequest::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    set_has_password();
  } else {
    clear_has_password();
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:ResetRequest.password)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetReply::ResetReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ResetReply)
}
ResetReply::ResetReply(const ResetReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ResetReply)
}

void ResetReply::SharedCtor() {
  _cached_size_ = 0;
}

ResetReply::~ResetReply() {
  // @@protoc_insertion_point(destructor:ResetReply)
  SharedDtor();
}

void ResetReply::SharedDtor() {
}

void ResetReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResetReply::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResetReply& ResetReply::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResetReply* ResetReply::New(::google::protobuf::Arena* arena) const {
  ResetReply* n = new ResetReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResetReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ResetReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ResetReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ResetReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ResetReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ResetReply)
  return false;
#undef DO_
}

void ResetReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ResetReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ResetReply)
}

::google::protobuf::uint8* ResetReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ResetReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ResetReply)
  return target;
}

size_t ResetReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ResetReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ResetReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ResetReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResetReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ResetReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ResetReply)
    MergeFrom(*source);
  }
}

void ResetReply::MergeFrom(const ResetReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ResetReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ResetReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ResetReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResetReply::CopyFrom(const ResetReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ResetReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetReply::IsInitialized() const {
  return true;
}

void ResetReply::Swap(ResetReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResetReply::InternalSwap(ResetReply* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResetReply::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResetReply

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DispMsgRequest::kTitleFieldNumber;
const int DispMsgRequest::kContentFieldNumber;
const int DispMsgRequest::kIconFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DispMsgRequest::DispMsgRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DispMsgRequest)
}
DispMsgRequest::DispMsgRequest(const DispMsgRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_content()) {
    content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
  }
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_icon()) {
    icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
  }
  // @@protoc_insertion_point(copy_constructor:DispMsgRequest)
}

void DispMsgRequest::SharedCtor() {
  _cached_size_ = 0;
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DispMsgRequest::~DispMsgRequest() {
  // @@protoc_insertion_point(destructor:DispMsgRequest)
  SharedDtor();
}

void DispMsgRequest::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DispMsgRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DispMsgRequest::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DispMsgRequest& DispMsgRequest::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

DispMsgRequest* DispMsgRequest::New(::google::protobuf::Arena* arena) const {
  DispMsgRequest* n = new DispMsgRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DispMsgRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DispMsgRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!title_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*title_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!content_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*content_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!icon_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*icon_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DispMsgRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DispMsgRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes title = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_title()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes content = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes icon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_icon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DispMsgRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DispMsgRequest)
  return false;
#undef DO_
}

void DispMsgRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DispMsgRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes title = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->title(), output);
  }

  // required bytes content = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->content(), output);
  }

  // required bytes icon = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->icon(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DispMsgRequest)
}

::google::protobuf::uint8* DispMsgRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DispMsgRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes title = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->title(), target);
  }

  // required bytes content = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }

  // required bytes icon = 3;
  if (cached_has_bits & 0x00000004u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->icon(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DispMsgRequest)
  return target;
}

size_t DispMsgRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DispMsgRequest)
  size_t total_size = 0;

  if (has_title()) {
    // required bytes title = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->title());
  }

  if (has_content()) {
    // required bytes content = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());
  }

  if (has_icon()) {
    // required bytes icon = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->icon());
  }

  return total_size;
}
size_t DispMsgRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DispMsgRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes title = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->title());

    // required bytes content = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->content());

    // required bytes icon = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->icon());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DispMsgRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DispMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DispMsgRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DispMsgRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DispMsgRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DispMsgRequest)
    MergeFrom(*source);
  }
}

void DispMsgRequest::MergeFrom(const DispMsgRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DispMsgRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_title();
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_content();
      content_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.content_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_icon();
      icon_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.icon_);
    }
  }
}

void DispMsgRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DispMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DispMsgRequest::CopyFrom(const DispMsgRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DispMsgRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DispMsgRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void DispMsgRequest::Swap(DispMsgRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DispMsgRequest::InternalSwap(DispMsgRequest* other) {
  using std::swap;
  title_.Swap(&other->title_);
  content_.Swap(&other->content_);
  icon_.Swap(&other->icon_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DispMsgRequest::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DispMsgRequest

// required bytes title = 1;
bool DispMsgRequest::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DispMsgRequest::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
void DispMsgRequest::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
void DispMsgRequest::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_title();
}
const ::std::string& DispMsgRequest::title() const {
  // @@protoc_insertion_point(field_get:DispMsgRequest.title)
  return title_.GetNoArena();
}
void DispMsgRequest::set_title(const ::std::string& value) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DispMsgRequest.title)
}
#if LANG_CXX11
void DispMsgRequest::set_title(::std::string&& value) {
  set_has_title();
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DispMsgRequest.title)
}
#endif
void DispMsgRequest::set_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DispMsgRequest.title)
}
void DispMsgRequest::set_title(const void* value, size_t size) {
  set_has_title();
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DispMsgRequest.title)
}
::std::string* DispMsgRequest::mutable_title() {
  set_has_title();
  // @@protoc_insertion_point(field_mutable:DispMsgRequest.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DispMsgRequest::release_title() {
  // @@protoc_insertion_point(field_release:DispMsgRequest.title)
  clear_has_title();
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DispMsgRequest::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    set_has_title();
  } else {
    clear_has_title();
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:DispMsgRequest.title)
}

// required bytes content = 2;
bool DispMsgRequest::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DispMsgRequest::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
void DispMsgRequest::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
void DispMsgRequest::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_content();
}
const ::std::string& DispMsgRequest::content() const {
  // @@protoc_insertion_point(field_get:DispMsgRequest.content)
  return content_.GetNoArena();
}
void DispMsgRequest::set_content(const ::std::string& value) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DispMsgRequest.content)
}
#if LANG_CXX11
void DispMsgRequest::set_content(::std::string&& value) {
  set_has_content();
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DispMsgRequest.content)
}
#endif
void DispMsgRequest::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DispMsgRequest.content)
}
void DispMsgRequest::set_content(const void* value, size_t size) {
  set_has_content();
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DispMsgRequest.content)
}
::std::string* DispMsgRequest::mutable_content() {
  set_has_content();
  // @@protoc_insertion_point(field_mutable:DispMsgRequest.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DispMsgRequest::release_content() {
  // @@protoc_insertion_point(field_release:DispMsgRequest.content)
  clear_has_content();
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DispMsgRequest::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    set_has_content();
  } else {
    clear_has_content();
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:DispMsgRequest.content)
}

// required bytes icon = 3;
bool DispMsgRequest::has_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DispMsgRequest::set_has_icon() {
  _has_bits_[0] |= 0x00000004u;
}
void DispMsgRequest::clear_has_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
void DispMsgRequest::clear_icon() {
  icon_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_icon();
}
const ::std::string& DispMsgRequest::icon() const {
  // @@protoc_insertion_point(field_get:DispMsgRequest.icon)
  return icon_.GetNoArena();
}
void DispMsgRequest::set_icon(const ::std::string& value) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DispMsgRequest.icon)
}
#if LANG_CXX11
void DispMsgRequest::set_icon(::std::string&& value) {
  set_has_icon();
  icon_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:DispMsgRequest.icon)
}
#endif
void DispMsgRequest::set_icon(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DispMsgRequest.icon)
}
void DispMsgRequest::set_icon(const void* value, size_t size) {
  set_has_icon();
  icon_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DispMsgRequest.icon)
}
::std::string* DispMsgRequest::mutable_icon() {
  set_has_icon();
  // @@protoc_insertion_point(field_mutable:DispMsgRequest.icon)
  return icon_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DispMsgRequest::release_icon() {
  // @@protoc_insertion_point(field_release:DispMsgRequest.icon)
  clear_has_icon();
  return icon_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DispMsgRequest::set_allocated_icon(::std::string* icon) {
  if (icon != NULL) {
    set_has_icon();
  } else {
    clear_has_icon();
  }
  icon_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:DispMsgRequest.icon)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DispMsgReply::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DispMsgReply::DispMsgReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_icebox_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DispMsgReply)
}
DispMsgReply::DispMsgReply(const DispMsgReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:DispMsgReply)
}

void DispMsgReply::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
}

DispMsgReply::~DispMsgReply() {
  // @@protoc_insertion_point(destructor:DispMsgReply)
  SharedDtor();
}

void DispMsgReply::SharedDtor() {
}

void DispMsgReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DispMsgReply::descriptor() {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DispMsgReply& DispMsgReply::default_instance() {
  protobuf_icebox_2eproto::InitDefaults();
  return *internal_default_instance();
}

DispMsgReply* DispMsgReply::New(::google::protobuf::Arena* arena) const {
  DispMsgReply* n = new DispMsgReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DispMsgReply::Clear() {
// @@protoc_insertion_point(message_clear_start:DispMsgReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DispMsgReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DispMsgReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_result();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DispMsgReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DispMsgReply)
  return false;
#undef DO_
}

void DispMsgReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DispMsgReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DispMsgReply)
}

::google::protobuf::uint8* DispMsgReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DispMsgReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DispMsgReply)
  return target;
}

size_t DispMsgReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DispMsgReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required bool result = 1;
  if (has_result()) {
    total_size += 1 + 1;
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DispMsgReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DispMsgReply)
  GOOGLE_DCHECK_NE(&from, this);
  const DispMsgReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DispMsgReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DispMsgReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DispMsgReply)
    MergeFrom(*source);
  }
}

void DispMsgReply::MergeFrom(const DispMsgReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DispMsgReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void DispMsgReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DispMsgReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DispMsgReply::CopyFrom(const DispMsgReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DispMsgReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DispMsgReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void DispMsgReply::Swap(DispMsgReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DispMsgReply::InternalSwap(DispMsgReply* other) {
  using std::swap;
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DispMsgReply::GetMetadata() const {
  protobuf_icebox_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_icebox_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DispMsgReply

// required bool result = 1;
bool DispMsgReply::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DispMsgReply::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
void DispMsgReply::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
void DispMsgReply::clear_result() {
  result_ = false;
  clear_has_result();
}
bool DispMsgReply::result() const {
  // @@protoc_insertion_point(field_get:DispMsgReply.result)
  return result_;
}
void DispMsgReply::set_result(bool value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:DispMsgReply.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
