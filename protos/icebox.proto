//File: icebox.proto
// c , java, golang

syntax = "proto2";
//package protos;
option go_package = "protos";

import "nanopb.proto";


message Timestamp {

    // Represents seconds of UTC time since Unix epoch
    // 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
    // 9999-12-31T23:59:59Z inclusive.
    required int64 seconds = 1;

    // Non-negative fractions of a second at nanosecond resolution. Negative
    // second values with fractions must still have non-negative nanos values
    // that count forward in time. Must be from 0 to 999,999,999
    // inclusive.
    required int32 nanos = 2;
}


message IceboxMessage {

    enum Type {
        UNDEFINED = 0;
        ERROR = 1;
        HELLO = 2;
        NEGOTIATE = 3;
        START = 4;
        END = 5;
        CHECK = 6;
        INIT = 7;
        PING = 8;
        RESET = 9;

        ADD_COIN = 10;
        CREATE_ADDRESS = 11;
        CREATE_SECRET = 12;
        LIST_COIN = 13;
        LIST_ADDRESS = 14;
        LIST_SECRET = 15;
        SIGN_TX = 16;
        REMOVE_COIN = 17;
        DELETE_ADDRESS = 18;
        DELETE_SECRET = 19;
    }

    message Header {
        required uint32 version = 1[default = 1];  // 消息版本号
        required Type type = 2;
        required Timestamp  timestamp = 3;
        required uint32 session_id = 4;
    }

//    required uint32 version = 1[default = 1];  // 消息版本号
//    required Type type = 2;
//    required uint32 session_id = 3;
    required Header header = 1;
    required bytes payload = 2;
    required bytes signature = 3;
}

// rpc只是用于演示相关接口，不用作实现
service Icebox {

//    rpc Hello (HiRequest) returns (HiReply) {}
    // 协商会话密钥过程。会话过程采用AES进行加密，密钥使用协商出来的共享密钥的前32字节
//    rpc NegotiateKey (NegotiateRequest) returns (NegotiateReply) {}
    // 会话需要加密
    //    rpc StartSession (StartRequest) returns (StartReply) {}

    // 会话需要加密
    rpc Chat (IceboxMessage) returns (IceboxMessage) {}

    // 结束当前会话后，立刻锁定设备；
    //    rpc EndSession (EndRequest) returns (EndReply) {}

    // getdevice info, 判断是否已经进行了初始化, 如果没有则需要进行初始化操作
    // 如果已经进行了初始化，需要返回device_id
    //    rpc CheckDevice (CheckRequest) returns (CheckReply) {}
    //    // initailaize device: create a main private secret key
    //    // 1. init: ask user input pin from device
    //    // 2. pin ==> memoric words ==> seed
    //    // 3. generate secret key and encrypt it with pin
    //    rpc InitDevice (InitRequest) returns (InitReply) {}
    //    // remove all datas
    //    rpc ResetDevice (ResetRequest) returns (ResetReply) {}
    //    // Sends a greeting
    //    rpc Ping (PingRequest) returns (PingReply) {}
    //    //
    //    //    rpc AddFeature (AddFeatureRequest) returns (AddFeatureReply) {}
    //
    //    rpc AddCoin (AddCoinRequest) returns (AddCoinReply) {}
    //
    //    //    rpc CreateFormula (CreateFormulaRequest) returns (CreateFormulaReply) {}
    //
    //    rpc CreateAddress (CreateAddressRequest) returns (CreateAddressReply) {}
    //
    //    rpc CreateSecret (CreateSecretRequest) returns (CreateSecretReply) {}
    //
    //    rpc ListCoin (ListCoinRequest) returns (ListCoinReply) {}
    //
    //    rpc ListSecret (ListSecretRequest) returns (ListSecretReply) {}
    //
    //    //    rpc QueryFormula(QueryFormulaRequst) returns (QueryFormulaReply) {}
    //
    //    rpc ListAddress (ListAddressRequest) returns (ListAddressReply) {}
    //
    //    rpc SignTx (SignTxRequest) returns (SignTxReply) {}
    //
    //    rpc RemoveCoin (RemoveCoinRequest) returns (RemoveCoinReply) {}
    //
    //    rpc DeleteSecret (DeleteSecretRequest) returns (DeleteSecretReply) {}
    //
    //    rpc DeleteAddress (DeleteAddressRequest) returns (DeleteAddressReply) {}

}

message Error {
    required int32 code = 1;
    optional string message = 2[(nanopb).max_size = 256];
}

message Header {
    required uint32 ver = 1 [default = 1];    // 消息版本号
    required uint32 sn = 2;     // 消息序列号，返回消息的序列号必须等于请求消息的序列号
}

message ReplyHeader {
    required uint32 ver = 1 [default = 1];    // 消息版本号
    required uint32 sn = 2;     // 消息序列号，返回消息的序列号必须等于请求消息的序列号
    required uint32 code = 3;
    optional string message = 4[(nanopb).max_size = 128];
}

message HiRequest {
//    required Header header = 1;
    required int64 magicA = 2;
}

message HiReply {
//    required ReplyHeader header = 1;
    required int64 magicB = 2;
//    required string model = 4;      // 设备型号
//    required string searial = 5;    // 设备序列号
}

message NegotiateRequest {
    required string keyA = 2;
    required string hash = 3;
}

message NegotiateReply {
    required string keyB = 2;
    required string hash = 3;
}

message StartRequest {
    // session id
//    required uint32 sessionID = 2;
    // 会话有效时长，单位：秒
//    required uint32 duration = 3;
}

message StartReply {

}

message ConversationRequest {
//    required Header header = 1;
    // session id
    required uint32 session_id = 2;
    // message id
    required uint32 message_id = 3;
    // encrypted message
    required string content = 4;
    // signatures
    required string signature = 5;
}

message ConversationReply {
//    required ReplyHeader header = 1;
    // session id
    required uint32 session_id = 2;
    // message id
    required uint32 message_id = 3;
    // encrypted message
    required string content = 4;
    // signatures
    required string signature = 5;
}

message EndRequest {
//    required Header header = 1;
}

message EndReply {
//    required ReplyHeader header = 1;
}

///////////////// Bussiness protocol ///////////////////////

message CheckRequest {
//    required Header header = 1;
    //    required string app_id = 2;
}

message CheckReply {
//    required ReplyHeader header = 1;
    required int32 state = 2;  // 0: uninited, 1: inited
    // if paired then return dev_id=hash(id+app_id)
    optional string dev_id = 3;
    //    optional string sn = 4; // device serial number
}

message InitRequest {
//    required Header header = 1;
    // 真实设备是没有这个字段的
    required string password = 2[(nanopb).max_size = 128];
    // TODO: 需要强制要求最低密码强度，如果密码强度太弱，设备侧返回错误
}
message InitReply {
//    required ReplyHeader header = 1;
    required string dev_id = 2[(nanopb).max_size = 32];
}

// The request message containing the user's name.
message PingRequest {}

// The response message containing the greetings
message PingReply {
//    required ReplyHeader header = 1;
    required int64 timestamp = 2;
}

// if coin_type have exists in cointable, then failed
message AddCoinRequest {
    required uint32 type = 2; // bip44: coin_type
    required uint32 idx = 3;  // bip44: address_index
    required string symbol = 4;
    required string name = 5;
}

message AddCoinReply {
//    required ReplyHeader header = 1;
//    required string path = 2;
}

message CreateAddressRequest {
//    required Header header = 1;
    required uint32 type = 2;
//    required uint32 idx = 3;
    required string password = 3[(nanopb).max_size = 64];
    // TODO: 该最大值未经验证
    optional string name = 4[(nanopb).max_size = 32];
}

message CreateAddressReply {
    required uint32 type = 1;
    required uint32 idx = 2;
    // TODO: 该最大值未经验证
    required string address = 3[(nanopb).max_size = 64]; // address
}

message CreateSecretRequest {
//    required Header header = 1;
    required uint32 type = 2;
    required uint32 idx = 3;
    required string password = 4[(nanopb).max_size = 64];
    // TODO: 该最大值未经验证
    optional string name = 5[(nanopb).max_size = 32];
}

message CreateSecretReply {
//    required ReplyHeader header = 1;
    // TODO: 该最大值未经验证
    required string address = 2[(nanopb).max_size = 64]; // address or password
}

message SignTxRequest {
//    required Header header = 1;
    required string password = 1;
    required uint32 type = 2;
    required uint32 idx = 3;
    required uint64 amount = 4;
    // TODO: 该最大值未经验证
    required string dest = 5[(nanopb).max_size = 64];
    // TODO: 该最大值未经验证
    required string txid = 6[(nanopb).max_size = 64];
}

message SignTxReply {
//    required ReplyHeader header = 1;
    // TODO: 该最大值未经验证
    required string signedTx = 2[(nanopb).max_size = 256];
}

// list all of wallets
message ListCoinRequest {
}

message ListCoinReply {
    required uint32 max = 2;
    repeated uint32 type = 3[(nanopb).max_count = 8];
}

message ListSecretRequest {
    required uint32 type = 2;
    optional uint32 idx = 3;
}

message Secret {
    required uint32 type = 1;
    required uint32 idx = 2;
    // TODO: 该最大值未经验证
    required string s_addr = 3[(nanopb).max_size = 64];
}

message ListSecretReply {
    required uint32 max = 2;
    repeated Secret secret = 3[(nanopb).max_count = 8];
}

message ListAddressRequest {
    required string password = 1;
    required uint32 type = 2;
    required uint32 offset = 3;
    required uint32 limit = 4; // 隐含的条件
//    optional uint32 idx = 3;
}

message BatchQueryRequest {
    required string password = 1;
    repeated uint32 type = 2;
//    required uint32 offset = 3;
//    required uint32 limit = 4; // 隐含的条件
    //    optional uint32 idx = 3;
}


// 查询单条记录
message GetAddressRequest {
    required string password = 1;
    required uint32 type = 2;
    required uint32 idx = 3;
}

message Address {
    required uint32 type = 1;
    required uint32 idx = 2;
    optional string name = 3;
    required string s_addr = 4[(nanopb).max_size = 64];
}

message ListAddressReply {
    required uint32 total_records = 1;      // 总共有多少数据
    required uint32 total_pages = 2; // 总共有多少页
    required uint32 limit = 3;      // 每页几条数据
    required uint32 offset = 4;     // 起始偏移量，相当于current
    repeated Address addr = 5[(nanopb).max_count = 25];
}

message RemoveCoinRequest {
    required string password = 1;
    required uint32 type = 2;
}

message RemoveCoinReply {
}

message DeleteSecretRequest {
    required string password = 1;
    required uint32 type = 2;
    required uint32 idx = 3;
}

message DeleteSecretReply {
}

message DeleteAddressRequest {
    required string password = 1;
    required uint32 type = 2;
    required uint32 idx = 3;
}

message DeleteAddressReply {
}

message ResetRequest {
    required string password = 1;
}
message ResetReply {
}
