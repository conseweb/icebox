// Code generated by go-enum
// DO NOT EDIT!

package codes

import (
	"fmt"
	"strings"
)

const (
	// OK is a Code of type OK
	OK Code = iota
	// Canceled is a Code of type Canceled
	Canceled
	// Unknown is a Code of type Unknown
	Unknown
	// InvalidArgument is a Code of type InvalidArgument
	InvalidArgument
	// DeadlineExceeded is a Code of type DeadlineExceeded
	DeadlineExceeded
	// NotFound is a Code of type NotFound
	NotFound
	// AlreadyExists is a Code of type AlreadyExists
	AlreadyExists
	// PermissionDenied is a Code of type PermissionDenied
	PermissionDenied
	// ResourceExhausted is a Code of type ResourceExhausted
	ResourceExhausted
	// FailedPrecondition is a Code of type FailedPrecondition
	FailedPrecondition
	// Aborted is a Code of type Aborted
	Aborted
	// OutOfRange is a Code of type OutOfRange
	OutOfRange
	// Unimplemented is a Code of type Unimplemented
	Unimplemented
	// Internal is a Code of type Internal
	Internal
	// Unavailable is a Code of type Unavailable
	Unavailable
	// DataLoss is a Code of type DataLoss
	DataLoss
	// Unauthenticated is a Code of type Unauthenticated
	Unauthenticated
)

const _CodeName = "OKCanceledUnknownInvalidArgumentDeadlineExceededNotFoundAlreadyExistsPermissionDeniedResourceExhaustedFailedPreconditionAbortedOutOfRangeUnimplementedInternalUnavailableDataLossUnauthenticated"

var _CodeMap = map[Code]string{
	0:  _CodeName[0:2],
	1:  _CodeName[2:10],
	2:  _CodeName[10:17],
	3:  _CodeName[17:32],
	4:  _CodeName[32:48],
	5:  _CodeName[48:56],
	6:  _CodeName[56:69],
	7:  _CodeName[69:85],
	8:  _CodeName[85:102],
	9:  _CodeName[102:120],
	10: _CodeName[120:127],
	11: _CodeName[127:137],
	12: _CodeName[137:150],
	13: _CodeName[150:158],
	14: _CodeName[158:169],
	15: _CodeName[169:177],
	16: _CodeName[177:192],
}

func (i Code) String() string {
	if str, ok := _CodeMap[i]; ok {
		return str
	}
	return fmt.Sprintf("Code(%d)", i)
}

var _CodeValue = map[string]Code{
	_CodeName[0:2]:                      0,
	strings.ToLower(_CodeName[0:2]):     0,
	_CodeName[2:10]:                     1,
	strings.ToLower(_CodeName[2:10]):    1,
	_CodeName[10:17]:                    2,
	strings.ToLower(_CodeName[10:17]):   2,
	_CodeName[17:32]:                    3,
	strings.ToLower(_CodeName[17:32]):   3,
	_CodeName[32:48]:                    4,
	strings.ToLower(_CodeName[32:48]):   4,
	_CodeName[48:56]:                    5,
	strings.ToLower(_CodeName[48:56]):   5,
	_CodeName[56:69]:                    6,
	strings.ToLower(_CodeName[56:69]):   6,
	_CodeName[69:85]:                    7,
	strings.ToLower(_CodeName[69:85]):   7,
	_CodeName[85:102]:                   8,
	strings.ToLower(_CodeName[85:102]):  8,
	_CodeName[102:120]:                  9,
	strings.ToLower(_CodeName[102:120]): 9,
	_CodeName[120:127]:                  10,
	strings.ToLower(_CodeName[120:127]): 10,
	_CodeName[127:137]:                  11,
	strings.ToLower(_CodeName[127:137]): 11,
	_CodeName[137:150]:                  12,
	strings.ToLower(_CodeName[137:150]): 12,
	_CodeName[150:158]:                  13,
	strings.ToLower(_CodeName[150:158]): 13,
	_CodeName[158:169]:                  14,
	strings.ToLower(_CodeName[158:169]): 14,
	_CodeName[169:177]:                  15,
	strings.ToLower(_CodeName[169:177]): 15,
	_CodeName[177:192]:                  16,
	strings.ToLower(_CodeName[177:192]): 16,
}

// ParseCode attempts to convert a string to a Code
func ParseCode(name string) (Code, error) {
	if x, ok := _CodeValue[name]; ok {
		return Code(x), nil
	}
	return Code(0), fmt.Errorf("%s is not a valid Code", name)
}

func (x *Code) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

func (x *Code) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseCode(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
